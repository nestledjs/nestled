import { ApolloDriver, ApolloDriverConfig } from '@nestjs/apollo'
import { Module } from '@nestjs/common'
import { ConfigModule } from '@nestjs/config'
import { GraphQLModule } from '@nestjs/graphql'
import { join } from 'path'
import { Request, Response } from 'express'
import { apiCorePubSub } from '@<%= npmScope %>/api/core/data-access'
import { configuration, validationSchema } from '@<%= npmScope %>/api/config'
import { Context } from 'graphql-ws'
import { ApiCoreFeatureController } from './api-core-feature.controller'
import { ApiCoreFeatureResolver } from './api-core-feature.resolver'
import { ApiCoreFeatureService } from './api-core-feature.service'
import { ComplexityPlugin } from './plugins/complexity.plugin'

interface ConnectionParameters {
  headers?: Record<string, string>
}

const redisPubSubProvider = {
  provide: 'REDIS_PUB_SUB',
  useValue: apiCorePubSub,
}

@Module({
  imports: [
    ConfigModule.forRoot({
      isGlobal: true,
      load: [configuration],
      validationSchema,
    }),
    GraphQLModule.forRoot<ApolloDriverConfig>({
      driver: ApolloDriver,
      autoSchemaFile: join(process.cwd(), 'api-schema.graphql'),
      subscriptions: {
        'graphql-ws': {
          onConnect: async (context: Context<Record<string, unknown> | undefined>) => {
            const { extra } = context
            if (extra && typeof extra === 'object' && 'request' in extra && extra.request && typeof extra.request === 'object' && 'rawHeaders' in extra.request) {
              const rawHeaders = extra.request.rawHeaders as string[] | undefined
              let token = ''
              if (rawHeaders) {
                for (let i = 0; i < rawHeaders.length; i += 2) {
                  if (rawHeaders[i].toLowerCase() === 'cookie') {
                    const cookies = rawHeaders[i + 1].split(';')
                    for (const cookie of cookies) {
                      const [name, value] = cookie.trim().split('=')
                      if (name === '__session') {
                        token = value
                        break
                      }
                    }
                    break
                  }
                }
              }

              if (token === '') {
                throw new Error('Authentication token is missing')
              }
            } else {
              throw new Error('Authentication token is missing')
            }
            return true;
          },
        },
      },
      context: ({ req, res, connectionParams }: { req: Partial<Request>; res: Response; connectionParams: ConnectionParameters }) => {
        if (connectionParams) {
          req = { headers: connectionParams.headers }
        }
        return { req, res }
      },
      sortSchema: true,
      buildSchemaOptions: {
        dateScalarMode: 'isoDate', // Better interoperability (ISO strings, not JS Dates)
        numberScalarMode: 'float', // Default is fine; override to 'integer' if you hate floats
        scalarsMap: [], // Optional for custom scalar mappings if you use them
        skipCheck: true, // Skip extra metadata validation â€” speeds up build
      },
    }),
  ],
  controllers: [ApiCoreFeatureController],
  providers: [ApiCoreFeatureResolver, ApiCoreFeatureService, ComplexityPlugin, redisPubSubProvider],
  exports: [ApiCoreFeatureService, ComplexityPlugin, 'REDIS_PUB_SUB'],
})
export class ApiCoreFeatureModule {}
