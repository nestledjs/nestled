import { Field, ObjectType } from '@nestjs/graphql';
<%
let nonDefaultTypes = new Set();
modelFields.forEach(field => {
  let baseType = field.type.replace(/(\[\])$/, ''); // Get base type for arrays
  if (!['string', 'number', 'boolean', 'Date'].includes(baseType)) {
    nonDefaultTypes.add(baseType);
  }
});
const nonDefaultTypesImport = Array.from(nonDefaultTypes).join(', ');
%>
<% if (nonDefaultTypes.size > 0) { %>
import { <%= nonDefaultTypesImport %> } from '@muzebook/api/core/data-access';
<% } %>

@ObjectType()
export class <%= modelClassName %> {
  <% modelFields.forEach(field => { %>
    <% if (field.type.endsWith('[]')) { %>
      @Field(() => [<%= field.type.replace('[]', '') %>], { nullable: true })
      <%= field.name %>?: <%= field.type %>;
    <% } else if (['string', 'number', 'boolean', 'Date'].includes(field.type)) { %>
      @Field({ nullable: true })
      <%= field.name %>?: <%= field.type %>;
    <% } else { %>
      @Field(() => <%= field.type %>, { nullable: true })
      <%= field.name %>?: <%= field.type %>;
    <% } %>
  <% }); %>
}
