import React, { useLayoutEffect, useState } from 'react'
import { useAtom } from 'jotai'
import { currentPathAtom, isDevAtom } from '@<%= npmScope %>/web/global/data-access'
import { RESET } from 'jotai/utils'
import { WebUiForm } from '@<%= npmScope %>/web-ui/form'
import { DocumentNode } from 'graphql'
import { useMutation } from '@apollo/client'
import { WebUiDevDataFeature } from '@<%= npmScope %>/web-ui/dev-data/feature'
import { TrashIcon } from '@heroicons/react/solid'
import { WebUiConfirmationModalFeature } from '@<%= npmScope %>/web-ui/confirmation-modal/feature'
import { useNavigate } from '@remix-run/react'
import { cleanFormInput } from '@<%= npmScope %>/shared/utils/feature'

interface PathData {
  path: string
  name: string
  description: string
  showSearch: boolean
  actionText: string
  actionLink: string
}
interface WebAdminCreateFormProps {
  pathData: PathData
  document: DocumentNode
  deleteDocument: DocumentNode
  idName: string
  buttonText: string
  fields: any[]
  id: string
  defaultValues: any
}

export function WebAdminUpdateForm(props: WebAdminCreateFormProps) {
  const navigate = useNavigate()
  const [isDev] = useAtom(isDevAtom)
  const [currentPath, setCurrentPath] = useAtom(currentPathAtom)
  const [loading, setLoading] = useState(false)
  const [cancelModalOpen, setCancelModalOpen] = useState(false)
  const [updateMutation] = useMutation(props.document)
  const [deleteMutation] = useMutation(props.deleteDocument)

  const submit = async (input: any) => {
    setLoading(true)
    const cleanedInput = cleanFormInput(input, props?.fields)
    updateMutation({
      variables: {
        [`${props.idName}`]: props.id,
        input: { ...cleanedInput },
      },
    }).then((data) => {
      setLoading(false)
      window.scrollTo({ top: 0, behavior: 'smooth' })
    })
  }

  async function deleteItem() {
    await deleteMutation({ variables: { [`${props.idName}`]: props.id } })
    navigate(props.pathData.actionLink)
  }

  useLayoutEffect(() => {
    setCurrentPath(props?.pathData)
    return () => {
      setCurrentPath(RESET)
    }
  }, [])

  return (
    <>
      <WebUiForm
        fields={props.fields}
        submit={(values) => submit(values)}
        defaultValues={props.defaultValues}
        buttonText={`Update ${props.buttonText}`}
        loading={loading}
      />
      <button
        type="button"
        onClick={() => setCancelModalOpen(true)}
        className="mt-8 inline-flex items-center px-3 py-2 border border-transparent shadow-sm text-sm leading-4 font-medium rounded-md text-red-700  bg-white hover:bg-gray-50 focus:outline-none  focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
      >
        <TrashIcon className="-ml-0.5 mr-2 h-4 w-4" aria-hidden="true" />
        Delete {props.buttonText}
      </button>
      <WebUiConfirmationModalFeature
        open={cancelModalOpen}
        setOpen={setCancelModalOpen}
        actionText={'Delete'}
        actionFunction={deleteItem}
        title={`Delete ${props?.buttonText}`}
        body={`Are you sure you want to delete this ${props?.buttonText}?  Data will be permanently lost.  You cannot undo this action.`}
      />
      {isDev ? <WebUiDevDataFeature data={props.defaultValues} /> : null}
    </>
  )
}
