// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-app/generator.ts
import { generateFiles, joinPathFragments, Tree, updateJson } from '@nx/devkit'
import { applicationGenerator as nestApplicationGenerator } from '@nx/nest'
import { installPlugins } from './utils/install-plugins'

interface Schema {
  [key: string]: unknown
}

export default async function (tree: Tree, schema: Schema) {
  // Generate the nest application using the built-in generator
  await nestApplicationGenerator(tree, {
    name: 'api',
    directory: 'apps/api',
    strict: true,
  })

  // Install required plugins
  const installTask = await installPlugins(tree)

  // Update the project configuration to use tsc instead of webpack
  const projectJsonPath = 'apps/api/project.json'
  if (tree.exists(projectJsonPath)) {
    updateJson(tree, projectJsonPath, (json) => {
      // Update build target to use tsc
      json.targets.build = {
        executor: '@nx/js:tsc',
        outputs: ['{options.outputPath}'],
        options: {
          outputPath: 'dist/out-tsc',
          main: 'apps/api/src/main.ts',
          tsConfig: 'apps/api/tsconfig.app.json',
        },
      }

      // Update serve target for consistency
      json.targets.serve = {
        executor: '@nx/js:node',
        options: {
          buildTarget: 'api:build',
          watch: true,
        },
      }

      return json
    })
  }

  // Update tsconfig.base.json
  updateJson(tree, 'tsconfig.base.json', (json) => {
    json.compilerOptions = {
      ...json.compilerOptions,
      strict: true,
      noImplicitAny: true,
      strictNullChecks: true,
      strictFunctionTypes: true,
      strictBindCallApply: true,
      strictPropertyInitialization: true,
      noImplicitThis: true,
      alwaysStrict: true,
      esModuleInterop: true,
      experimentalDecorators: true,
      emitDecoratorMetadata: true,
      skipLibCheck: true,
      skipDefaultLibCheck: true,
      baseUrl: '.',
      module: 'commonjs',
      moduleResolution: 'node',
      declaration: true,
      resolveJsonModule: true,
    }
    return json
  })

  // Update app's tsconfig.app.json
  updateJson(tree, 'apps/api/tsconfig.app.json', (json) => {
    json.compilerOptions = {
      ...json.compilerOptions,
      outDir: '../../dist/out-tsc',
      module: 'commonjs',
      types: ['node'],
      emitDecoratorMetadata: true,
      target: 'es2021',
    }
    json.include = [
      'src/**/*.ts',
      '../../libs/api/**/*.ts'  // Include all API library files
    ]
    json.exclude = ['jest.config.ts', 'src/**/*.spec.ts', 'src/**/*.test.ts']
    return json
  })

  // Add dev:api script to package.json
  updateJson(tree, 'package.json', (json) => {
    if (!json.scripts) {
      json.scripts = {}
    }
    json.scripts['dev:api'] = 'nx serve api'
    return json
  })

  // Generate custom files
  generateFiles(tree, joinPathFragments(__dirname, './files'), 'apps/api/src', { ...schema, tmpl: '' })

  // Delete the unused default app files
  const filesToDelete = ['apps/api/src/assets', 'apps/api/src/app']

  filesToDelete.forEach((path) => {
    if (tree.exists(path)) {
      tree.delete(path)
    }
  })

  return installTask
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-app/schema.d.ts
export interface AppSetupGeneratorSchema {}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-crud/generator.ts
import {
  formatFiles,
  generateFiles,
  installPackagesTask,
  joinPathFragments,
  names,
  readProjectConfiguration,
  Tree,
} from '@nx/devkit'
import * as workspace from '@nx/workspace'
import { projectRootDir } from '@nx/workspace'
import { getPrismaSchemaPath, parsePrismaSchema, readPrismaSchema } from '../shared/utils'
import { libraryGenerator } from '@nx/nest'
import { Linter } from '@nx/eslint'
import { getNpmScope } from '@nx/js/src/utils/package-json/get-npm-scope'

function normalizeOptions(tree, options, projectType) {
  const directoryName = options.directory ? names(options.directory).fileName : ''
  const projectDirectory = directoryName
    ? `${directoryName}/${names(options.name).fileName}`
    : names(options.name).fileName
  const projectName = projectDirectory.replace(/\//g, '-')
  const projectRoot = `${projectRootDir(projectType)}/${projectDirectory}`

  return {
    ...options,
    npmScope: `@${getNpmScope(tree)}`,
    projectName,
    projectRoot,
    projectDirectory,
    parsedTags: options.tags?.split(',').map((tag) => tag.trim()) ?? [],
    apiAppName: options.apiAppName,
    webAppName: options.webAppName,
    name: names(options.name).fileName,
  }
}

interface ApiCrud {
  name?: string
  model?: string
  plural?: string
  primaryField?: string
  webAppName?: string
  tags?: string
  directory?: string
  searchFields?: string
}

async function apiCrudGenerator(tree: Tree, schema: ApiCrud, type: string) {
  const normalizedOptions = normalizeOptions(tree, schema, workspace.ProjectType.Library)
  const filePath = `libs/${normalizedOptions.projectDirectory}`
  const projectName = `${normalizedOptions.projectName}-${type}`

  await libraryGenerator(tree, {
    name: type,
    directory: filePath,
    tags: `scope:${schema.directory},type:${type}`,
    linter: Linter.EsLint,
  })

  const libraryRoot = readProjectConfiguration(tree, projectName).root
  const modelName = schema.model || schema.name
  const pluralName = schema.plural || `${modelName}s`
  const formattedSearchFields = schema?.searchFields ? "'" + schema?.searchFields?.split(',').join("','") + "'" : ''
  let modelFields = null
  if (type === 'data-access') {
    modelFields = createModelFromPrisma(tree, names(modelName).className)
    console.log({ modelFields })

    if (!modelFields) {
      console.error(`Model fields not created correctly`)
      return
    }
  }
  const variables = {
    ...schema,
    ...names(schema.name),
    npmScope: normalizedOptions.npmScope,
    apiClassName: names(schema.directory).className,
    modelName,
    modelClassName: names(modelName).className,
    modelPropertyName: names(modelName).propertyName,
    pluralName,
    pluralClassName: names(pluralName).className,
    pluralPropertyName: names(pluralName).propertyName,
    projectName,
    projectClassName: names(projectName).className,
    projectPropertyName: names(projectName).propertyName,
    tmpl: '',
    filePath,
    type,
    typeClassName: names(type).className,
    searchFields: formattedSearchFields,
    modelFields,
  }

  generateFiles(
    tree, // the virtual file system
    joinPathFragments(__dirname, `./files/${type}`), // path to the file templates
    libraryRoot, // destination path of the files
    variables, // config object to replace variable in file templates
  )
  await formatFiles(tree)
  return () => {
    installPackagesTask(tree)
  }
}

function createModelFromPrisma(tree, modelName: string) {
  const prismaPath = getPrismaSchemaPath(tree)
  const prismaSchema = readPrismaSchema(tree, prismaPath)
  if (!prismaSchema) {
    console.error(`No Prisma schema found at ${prismaPath}`)
    return
  }
  return parsePrismaSchema(prismaSchema, modelName)
}

function updatePrisma(tree, options) {
  const prismaPath = getPrismaSchemaPath(tree)
  const schema = readPrismaSchema(tree, prismaPath)
  if (!schema) {
    console.error(`No Prisma schema found at ${prismaPath}`)
    return
  }
  const modelName = options.model || options.name
  const primaryField = options.primaryField || 'name'
  const modelIdentifier = `model ${names(modelName).className}`

  if (schema && !schema.includes(modelIdentifier + ' {')) {
    const modelDefinition = [
      `${modelIdentifier} {`,
      `  id        String   @id @default(cuid())`,
      `  createdAt DateTime @default(now())`,
      `  updatedAt DateTime @updatedAt`,
      `  ${primaryField} String`,
      '}',
    ].join('\n')

    tree.overwrite(prismaPath, [schema, modelDefinition, ''].join('\n\n'))
    console.info(`Add ${modelIdentifier} to ${prismaPath}`)
  }
}

function addImport(tree, options) {
  const normalizedOptions = normalizeOptions(
    tree,
    { ...options, directory: options.directory || 'api', name: options.name },
    workspace.ProjectType.Library,
  )
  const coreFeaturePath = `apps/${normalizedOptions.directory}/src/app/app.module.ts`

  if (!tree.exists(coreFeaturePath)) {
    console.error(`Can't find ${coreFeaturePath}`)
    return
  }

  console.info(`Found ${coreFeaturePath}`)

  const coreFeatureContents = tree.read(coreFeaturePath)?.toString()

  if (coreFeatureContents) {
    const appClassName = names(normalizedOptions.directory).className
    const nameClassName = names(normalizedOptions.name).className
    const searchImport = `// Add Imports Here`
    const featureImport = `import { ${appClassName}${nameClassName}FeatureModule } from '${normalizedOptions.npmScope}/${normalizedOptions.directory}/${normalizedOptions.name}/feature'`
    const searchModule = `// Add Modules Here`
    const featureModule = `    ${appClassName}${nameClassName}FeatureModule,`

    const updatedContents = coreFeatureContents
      .replace(searchImport, [featureImport, searchImport].join('\n'))
      .replace(searchModule, [featureModule, searchModule].join('\n'))

    tree.overwrite(coreFeaturePath, updatedContents)
  }
}

export default async function (tree: Tree, schema: ApiCrud) {
  await apiCrudGenerator(tree, schema, 'data-access')
  await apiCrudGenerator(tree, schema, 'feature')
  updatePrisma(tree, schema)
  addImport(tree, schema)
  console.warn(`Run 'pnpm prisma:apply' and restart the API`)
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-crud/schema.d.ts
export interface ApiCrudGeneratorSchema {
  name: string
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-dependencies/generator.ts
import { addDependenciesToPackageJson, Tree } from '@nx/devkit'

export async function apiDependenciesGenerator(tree: Tree) {
  // Add dependencies
  await addDependenciesToPackageJson(
    tree,
    {
      '@nestjs/common': '^10.0.0',
      '@nestjs/config': '^3.0.0',
      '@nestjs/core': '^10.0.0',
      '@nestjs/graphql': '^12.0.0',
      '@nestjs/platform-express': '^10.0.0',
      '@nestjs/apollo': '^12.0.0',
      '@nestjs/jwt': '^10.0.0',
      '@nestjs/passport': '^10.0.0',
      '@nestjs/axios': '^3.0.0',
      '@prisma/client': '^5.0.0',
      'apollo-server-express': '^3.12.0',
      'bcryptjs': '^2.4.3',
      'class-validator': '^0.14.0',
      'cookie-parser': '^1.4.6',
      'graphql': '^16.0.0',
      'graphql-subscriptions': '^2.0.0',
      'joi': '^17.9.0',
      'nodemailer': '^6.9.0',
      'passport-jwt': '^4.0.1',
      'reflect-metadata': '^0.1.13',
      'rxjs': '^7.8.0'
    },
    {
      nx: '20.6.2',
      '@nx/js': '20.6.2',
      '@nx/nest': '20.6.2',
      '@nx/node': '20.6.2',
      '@nx/webpack': '20.6.2',
      '@types/bcryptjs': '^2.4.2',
      '@types/cookie-parser': '^1.4.3',
      '@types/nodemailer': '^6.4.7',
      '@types/passport-jwt': '^3.0.8',
      'prisma': '^5.0.0',
      'pg': '8.14.1'
    },
  )

  // Update TypeScript configuration
  const tsConfigPath = 'tsconfig.base.json'
  if (tree.exists(tsConfigPath)) {
    const tsConfigContent = tree.read(tsConfigPath, 'utf-8')
    const tsConfig = JSON.parse(tsConfigContent)

    // Update module and moduleResolution
    tsConfig.compilerOptions.module = 'CommonJS'
    tsConfig.compilerOptions.moduleResolution = 'node'

    // Set baseUrl for path aliases
    tsConfig.compilerOptions.baseUrl = '.'

    // Remove emitDeclarationOnly if it exists
    if (tsConfig.compilerOptions.emitDeclarationOnly !== undefined) {
      delete tsConfig.compilerOptions.emitDeclarationOnly
    }

    // Write back the updated configuration
    tree.write(tsConfigPath, JSON.stringify(tsConfig, null, 2))
  }

  // Create setup.md file with generator commands
  const setupContent = `# Setup Instructions

Run the following commands in order to set up your project:

\`\`\`sh
nx g @nestled/generators:api-dependencies
\`\`\`

\`\`\`sh
nx g @nestled/generators:api-app
\`\`\`

\`\`\`sh
pnpm approve-builds
\`\`\`

\`\`\`sh
nx g @nestled/generators:api-libs
\`\`\`

\`\`\`sh
nx g @nestled/generators:project-config
\`\`\`

\`\`\`sh
nx g @nestled/generators:workspace-setup
\`\`\`
`

  tree.write('setup.md', setupContent)
}

export default apiDependenciesGenerator


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-gen/generator.ts
import { Tree, formatFiles, generateFiles, readProjectConfiguration } from '@nx/devkit';
import { log } from '../workspace-setup/lib/helpers';
import * as fs from 'fs';
import * as path from 'path';

interface ApiGenGeneratorSchema {
  overwritePrettier?: boolean;
  generateEnv?: boolean;
  generateDocker?: boolean;
  ignoreEnv?: boolean;
}

function configurePnpmAllowBuilds(tree: Tree) {
  const npmrcPath = '.npmrc';
  let content = '';

  if (tree.exists(npmrcPath)) {
    content = tree.read(npmrcPath)?.toString() || '';
    if (!content.includes('enable-pre-post-scripts')) {
      content += '\nenable-pre-post-scripts=true\n';
    }
    if (!content.includes('auto-install-peers')) {
      content += 'auto-install-peers=true\n';
    }
    if (!content.includes('strict-peer-dependencies')) {
      content += 'strict-peer-dependencies=false\n';
    }
  } else {
    content = `enable-pre-post-scripts=true
auto-install-peers=true
strict-peer-dependencies=false`;
  }

  tree.write(npmrcPath, content);
  log('Configured pnpm to automatically allow builds');
}

async function runGenerator(tree: Tree, generator: string, options: Record<string, unknown> = {}) {
  log(`Running generator: ${generator}`);
  try {
    const { default: generatorFn } = await import(generator);
    await generatorFn(tree, options);
    log(`Successfully completed: ${generator}`);
  } catch (error) {
    console.error(`Error running generator ${generator}:`, error);
    throw error;
  }
}

export default async function apiGenGenerator(tree: Tree, options: ApiGenGeneratorSchema) {
  // Configure pnpm first
  configurePnpmAllowBuilds(tree);

  const generators = [
    {
      name: '@nestled/generators:project-config',
      options: {
        overwritePrettier: options.overwritePrettier,
        generateEnv: options.generateEnv,
        generateDocker: options.generateDocker,
        ignoreEnv: options.ignoreEnv
      }
    },
    {
      name: '@nestled/generators:api-dependencies',
      options: {}
    },
    {
      name: '@nestled/generators:api-app',
      options: {}
    },
    {
      name: '@nestled/generators:api-files',
      options: {}
    },
    {
      name: '@nestled/generators:workspace-setup',
      options: {}
    }
  ];

  log('Starting API generation sequence');

  try {
    for (const generator of generators) {
      await runGenerator(tree, generator.name, generator.options);
    }
    await formatFiles(tree);
    log('API generation sequence completed successfully!');
  } catch (error) {
    console.error('API generation sequence failed:', error);
    throw error;
  }
}

// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-libs/generator.ts
import { formatFiles, installPackagesTask, joinPathFragments, readJson, Tree, names, updateJson } from '@nx/devkit'
import { libraryGenerator } from '@nx/nest/src/generators/library/library'
import { generateTemplateFiles, getNpmScope, installPlugins } from '../shared/utils'
import { promptProvider } from './prompts'
import { ApiLibGeneratorSchema } from './schema'
import * as ts from 'typescript'

// Add scope filter to ensure we only process libs/api
const API_LIBS_SCOPE = 'libs/api'

function addImport(tree: Tree, name: string, type: string) {
  const coreFeaturePath = `apps/api/src/app.module.ts`

  if (!tree.exists(coreFeaturePath)) {
    console.error(`Can't find ${coreFeaturePath}`)
    return
  }

  const nameClassName = names(name).className
  const typeClassName = names(type).className
  const npmScope = getNpmScope(tree)
  const moduleToAdd = `Api${nameClassName}${typeClassName}Module`
  const importPath = `@${npmScope}/api/${name}/${type}`

  let fileContent = tree.read(coreFeaturePath)?.toString() || ''

  // Add import statement if it doesn't exist
  if (!fileContent.includes(`import { ${moduleToAdd} }`)) {
    const importStatement = `import { ${moduleToAdd} } from '${importPath}';\n`
    fileContent = importStatement + fileContent
  }

  // Find the exact position of the appModules array
  const arrayStart = fileContent.indexOf('export const appModules = [')

  if (arrayStart !== -1) {
    // Find the closing bracket of the array
    const arrayEnd = fileContent.indexOf('];', arrayStart)

    if (arrayEnd !== -1) {
      // Get just the array content
      const arrayContent = fileContent.slice(arrayStart + 'export const appModules = ['.length, arrayEnd)

      // Check if module exists only in the array content
      if (!arrayContent.includes(moduleToAdd)) {
        // If array is empty, don't add a leading comma
        const isEmpty = arrayContent.trim() === ''
        const moduleEntry = isEmpty
          ? `\n  ${moduleToAdd}`
          : `,\n  ${moduleToAdd}`

        // Insert the new module just before the closing bracket
        const before = fileContent.slice(0, arrayEnd)
        const after = fileContent.slice(arrayEnd)
        fileContent = before + moduleEntry + after
      }
    }
  }

  // Clean up the array formatting if needed
  const arrayRegex = /export const appModules = \[([\s\S]*?)\];/
  const match = fileContent.match(arrayRegex)
  if (match) {
    const modules = match[1].split(',')
      .map(m => m.trim())
      .filter(m => m.length > 0)
    const formattedArray = `export const appModules = [\n  ${modules.join(',\n  ')}\n];`
    fileContent = fileContent.replace(arrayRegex, formattedArray)
  }

  tree.write(coreFeaturePath, fileContent)
}

async function apiGenerator(tree: Tree, schema: ApiLibGeneratorSchema, type: string) {
  const npmScope = getNpmScope(tree)
  const libraryRoot = joinPathFragments(API_LIBS_SCOPE, schema.name, type)
  const libraryName = `api-${schema.name}-${type}`
  const importPath = `@${npmScope}/api/${schema.name}/${type}`

  // Check if the directory already exists, if not create it
  if (!tree.exists(API_LIBS_SCOPE)) {
    tree.write(joinPathFragments(API_LIBS_SCOPE, '.gitkeep'), '')
  }

  // Use explicit naming to avoid conflicts
  await libraryGenerator(tree, {
    name: libraryName,
    directory: libraryRoot,
    importPath: importPath,
    skipFormat: true,
    tags: `scope:api,type:${type}`,
    strict: true,
  })

  // Update library's tsconfig.json
  const libTsConfigPath = joinPathFragments(libraryRoot, 'tsconfig.json')
  if (tree.exists(libTsConfigPath)) {
    updateJson(tree, libTsConfigPath, (json) => {
      json.compilerOptions = {
        ...json.compilerOptions,
        strict: true,
        noImplicitAny: true,
        strictNullChecks: true,
        strictFunctionTypes: true,
        strictBindCallApply: true,
        strictPropertyInitialization: true,
        noImplicitThis: true,
        alwaysStrict: true,
        experimentalDecorators: true,
        emitDecoratorMetadata: true,
      }
      return json
    })
  }

  // Update library's tsconfig.lib.json
  const libTsConfigLibPath = joinPathFragments(libraryRoot, 'tsconfig.lib.json')
  if (tree.exists(libTsConfigLibPath)) {
    updateJson(tree, libTsConfigLibPath, (json) => {
      json.compilerOptions = {
        ...json.compilerOptions,
        outDir: '../../../dist/out-tsc',
        declaration: true,
        types: ['node'],
        target: 'es2021',
      }
      json.include = ['src/**/*.ts']
      json.exclude = ['jest.config.ts', '**/*.spec.ts', '**/*.test.ts']
      return json
    })
  }

  // Generate the template files on top of the Nx-generated structure
  generateTemplateFiles({
    tree,
    schema,
    libraryRoot,
    type,
    templatePath: joinPathFragments(__dirname, '../api-files'),
    npmScope,
  })

  if (schema.name === 'core' && type === 'data-access') {
    // Add specific dependencies for this generator
    const dependencies = {
      'graphql-type-json': 'latest',
      '@nestjs/graphql': 'latest',
      '@nestjs/common': 'latest',
      '@prisma/client': 'latest',
    }

    const devDependencies = {}

    // Update package.json
    const packageJson = readJson(tree, 'package.json')

    // Add prisma schema path
    packageJson.prisma = {
      schema: 'libs/api/core/data-access/src/prisma/schema.prisma',
      seed: 'ts-node --project tsconfig.json libs/api/core/data-access/src/prisma/seed.ts',
    }

    // Add scripts
    packageJson.scripts = {
      ...packageJson.scripts,
      clean: 'git reset --hard HEAD && git clean -fd && rm -rf node_modules && rm -rf tmp && rm -rf dist && pnpm install',
      affected: 'nx affected',
      'affected:apps': 'nx affected:apps',
      'affected:build': 'nx affected:build',
      'affected:dep-graph': 'nx affected:dep-graph',
      'affected:e2e': 'nx affected:e2e',
      'affected:libs': 'nx affected:libs',
      'affected:lint': 'nx affected:lint',
      'affected:test': 'nx affected:test',
      'dep-graph': 'nx dep-graph',
      'build:api': 'nx build api --prod --skip-nx-cache',
      'deploy-api': 'git checkout api-deploy && git merge develop && git push && git checkout develop',
      'dev:api': 'nx serve api',
      format: 'nx format:write',
      'format:check': 'nx format:check',
      'format:write': 'nx format:write',
      help: 'nx help',
      lint: 'nx workspace-lint && nx lint',
      nx: 'nx',
      'pre-commit:lint': 'nx format:write --uncommitted & nx affected --target eslint --uncommitted',
      'prisma:apply': 'pnpm prisma:format && pnpm prisma db push',
      'prisma:format': 'pnpm prisma format',
      'prisma:generate': 'pnpm prisma generate',
      'prisma:migrate': 'pnpm prisma migrate save && pnpm prisma migrate up',
      'prisma:migrate:dev': 'pnpm prisma migrate dev',
      'prisma:migrate:prod': 'pnpm prisma migrate deploy',
      'prisma:reset': 'pnpm prisma migrate reset && pnpm prisma:seed',
      'prisma:seed': 'npx prisma db seed',
      'prisma:studio': 'pnpm prisma studio',
      sdk: 'graphql-codegen --config libs/shared/util-sdk/src/codegen.yml',
      'sdk:watch': 'pnpm sdk --watch',
      'types:watch': 'nodemon',
      setup: 'pnpm prisma:apply',
      test: 'nx test',
      'test:api': 'pnpm nx e2e api-e2e',
      'test:ci': 'pnpm test:api',
      update: 'nx migrate latest',
      'workspace-generator': 'nx workspace-generator',
    }

    tree.write('package.json', JSON.stringify(packageJson, null, 2))

    // Use the shared installPlugins utility to install the necessary packages
    await installPlugins(tree, dependencies, devDependencies)
  }

  // Add the module import after generating the library
  if (type === 'feature' || (type === 'data-access' && schema.name === 'mailer')) {
    addImport(tree, schema.name, type)
  }

  await formatFiles(tree)

  return () => {
    installPackagesTask(tree)
  }
}

export default async function generateLibraries(tree: Tree, schema: ApiLibGeneratorSchema) {
  const options = await promptProvider.handleMissingOptions(schema)
  const tasks: (() => void)[] = []

  if (options.generateAccounts || options.useDefaults) {
    tasks.push(await apiGenerator(tree, { name: 'account' }, 'data-access'))
    tasks.push(await apiGenerator(tree, { name: 'account' }, 'feature'))
  }

  if (options.generateAuth || options.useDefaults) {
    tasks.push(await apiGenerator(tree, { name: 'auth' }, 'data-access'))
    tasks.push(await apiGenerator(tree, { name: 'auth' }, 'feature'))
    tasks.push(await apiGenerator(tree, { name: 'auth' }, 'util'))
  }

  if (options.generateCore || options.useDefaults) {
    tasks.push(await apiGenerator(tree, { name: 'core' }, 'data-access'))
    tasks.push(await apiGenerator(tree, { name: 'core' }, 'feature'))
  }

  if (options.generateMailer || options.useDefaults) {
    tasks.push(await apiGenerator(tree, { name: 'mailer' }, 'data-access'))
  }

  if (options.generateUser || options.useDefaults) {
    tasks.push(await apiGenerator(tree, { name: 'user' }, 'data-access'))
    tasks.push(await apiGenerator(tree, { name: 'user' }, 'feature'))
  }

  return () => {
    tasks.forEach((task) => task?.())
  }
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-libs/prompts.ts
import { ApiLibGeneratorSchema } from './schema'
import { prompt } from 'enquirer'

type PromptDefinition = {
  type: 'confirm' | 'input'
  name: string
  message: string
  default?: boolean | string
  skip?: (answers: Partial<ApiLibGeneratorSchema>) => boolean
}

const defaultOptions: Partial<ApiLibGeneratorSchema> = {
  generateAccounts: true,
  generateAuth: true,
  generateCore: true,
  generateMailer: true,
  generateUser: true,
}

const prompts: PromptDefinition[] = [
  {
    type: 'confirm',
    name: 'useDefaults',
    message: 'Generate all library modules? (Accounts, Auth, Core, Mailer, User)',
    default: false,
  },
  {
    type: 'confirm',
    name: 'generateAccounts',
    message: 'Generate Accounts module?',
    default: true,
    skip: (answers) => answers.useDefaults === true,
  },
  {
    type: 'confirm',
    name: 'generateAuth',
    message: 'Generate Auth module?',
    default: true,
    skip: (answers) => answers.useDefaults === true,
  },
  {
    type: 'confirm',
    name: 'generateCore',
    message: 'Generate Core module?',
    default: true,
    skip: (answers) => answers.useDefaults === true,
  },
  {
    type: 'confirm',
    name: 'generateMailer',
    message: 'Generate Mailer module?',
    default: true,
    skip: (answers) => answers.useDefaults === true,
  },
  {
    type: 'confirm',
    name: 'generateUser',
    message: 'Generate User module?',
    default: true,
    skip: (answers) => answers.useDefaults === true,
  },
]

export const promptProvider = {
  async handleMissingOptions(options: ApiLibGeneratorSchema) {
    // If useDefaults is explicitly set to true in options, return immediately with defaults
    if (options.useDefaults === true) {
      return { ...defaultOptions, ...options }
    }

    // Only prompt for useDefaults first
    const useDefaultsPrompt = prompts[0]
    const { useDefaults } = await prompt<{ useDefaults: boolean }>({
      type: useDefaultsPrompt.type,
      name: useDefaultsPrompt.name,
      message: useDefaultsPrompt.message,
      initial: useDefaultsPrompt.default,
    })

    // If user chose defaults, return immediately with default values
    if (useDefaults) {
      return { ...defaultOptions, ...options, useDefaults }
    }

    // Otherwise, prompt for remaining options (skipping the useDefaults prompt)
    const remainingAnswers = await prompt(prompts.slice(1))
    return { ...options, useDefaults, ...remainingAnswers }
  },
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-libs/schema.d.ts
export interface ApiLibGeneratorSchema {
  name?: string;
  useDefaults?: boolean;
  generateAccounts?: boolean;
  generateAuth?: boolean;
  generateCore?: boolean;
  generateMailer?: boolean;
  generateUser?: boolean;
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/crud/generator.ts
import { Tree } from '@nx/devkit'
import { execSync } from 'child_process'

const sleep = (seconds = 1) => new Promise((resolve) => setTimeout(resolve, seconds * 1000))
function run(command) {
  console.log(`Running command: ${command}`)
  execSync(command, { stdio: 'inherit' })
}

export default async function (
  host: Tree,
  { model, primaryField, plural }: { model: string; primaryField: string; plural: string },
) {
  run(`nx g @muzebook/tools:api-crud ${model} --plural ${plural} --primaryField ${primaryField}`)
  run(`pnpm prisma:apply`)

  console.log('Please restart the API, will continue in 10 seconds...')
  await sleep(10)

  run(`nx g @muzebook/tools:web-admin-crud ${model} --plural ${plural} --primaryField ${primaryField}`)
  run(`pnpm sdk`)

  run(`nx g @muzebook/tools:web-user-crud ${model} --plural ${plural} --primaryField ${primaryField}`)
  run(`pnpm sdk`)
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/crud/schema.d.ts
export interface CrudGeneratorSchema {
  model: string
  primaryField: string
  plural: string
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/project-config/generator.ts
import { formatFiles, generateFiles, logger, Tree } from '@nx/devkit'
import * as path from 'path'

interface ConfigGeneratorSchema {
  overwritePrettier: boolean
  generateEnv: boolean
  generateDocker: boolean
  ignoreEnv: boolean
  // Add other options as needed
}

export default async function (tree: Tree, schema: ConfigGeneratorSchema) {
  const templateOptions = {
    ...schema,
    tmpl: '',
  }

  // Handle Prettier configuration
  if (schema.overwritePrettier) {
    generateFiles(tree, path.join(__dirname, 'files'), '.', {
      ...templateOptions,
      dot: '.',
    })
    logger.info('✅ Generated .prettierrc file')
  } else {
    logger.info('⏭️  Skipping .prettierrc generation')
  }

  // Handle .env.example generation
  if (schema.generateEnv) {
    generateFiles(tree, path.join(__dirname, 'files'), '.', {
      ...templateOptions,
      dot: '.',
    })
    logger.info('✅ Generated .env.example file')
  } else {
    logger.info('⏭️  Skipping .env.example generation')
  }

  // Handle Docker files generation
  if (schema.generateDocker) {
    generateFiles(tree, path.join(__dirname, 'files'), '.', templateOptions)
    logger.info('✅ Generated Dockerfile and docker-compose.yml')

    // Add Docker scripts to package.json
    const packageJsonPath = 'package.json'
    if (tree.exists(packageJsonPath)) {
      const packageJsonContent = JSON.parse(tree.read(packageJsonPath, 'utf-8') || '{}')

      packageJsonContent.scripts = {
        ...packageJsonContent.scripts,
        'docker:build': 'docker build . -t muzebook/api',
        'docker:down': 'docker compose down',
        'docker:push': 'docker push muzebook/api',
        'docker:run': 'docker run -it -p 8000:3000 muzebook/api',
        'docker:up': 'docker compose up',
      }

      tree.write(packageJsonPath, JSON.stringify(packageJsonContent, null, 2))
      logger.info('✅ Added Docker scripts to package.json')
    }
  } else {
    logger.info('⏭️  Skipping Docker files generation')
  }

  await formatFiles(tree)

  // Handle .env in .gitignore
  if (schema.ignoreEnv) {
    const gitignorePath = '.gitignore'
    if (tree.exists(gitignorePath)) {
      let gitignoreContent = tree.read(gitignorePath, 'utf-8')

      if (!gitignoreContent.includes('.env')) {
        gitignoreContent += '\n.env\n'
        tree.write(gitignorePath, gitignoreContent)
        logger.info('✅ Added .env to .gitignore')
      } else {
        logger.info('ℹ️  .env already exists in .gitignore')
      }
    } else {
      logger.info('⚠️  No .gitignore file found')
    }
  } else {
    logger.info('⏭️  Skipping .env addition to .gitignore')
  }
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/project-config/schema.d.ts
declare module 'schema' {
  export interface ProjectConfigSchema {
    overwritePrettier: boolean
    generateEnv: boolean
    generateDocker: boolean
    ignoreEnv: boolean
  }
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/remix-app/generator.ts


// /Users/justinhandley/IdeaProjects/nestled/generators/src/shared/utils.ts
import { addDependenciesToPackageJson, generateFiles, joinPathFragments, names, readJson, Tree } from '@nx/devkit'
import { getDMMF } from '@prisma/internals'

export function deleteFiles(tree: Tree, filesToDelete: string[]) {
  filesToDelete.forEach((file) => {
    if (tree.exists(file)) {
      tree.delete(file)
    }
  })
}

// List of files to delete
// const filesToDelete = [
//   // Add any other files you want to delete
// ]

// Delete unwanted files
// deleteFiles(tree, filesToDelete)

export function deleteDirectory(tree: Tree, dirPath: string) {
  if (tree.exists(dirPath)) {
    tree.children(dirPath).forEach((child) => {
      const childPath = joinPathFragments(dirPath, child)
      if (tree.isFile(childPath)) {
        tree.delete(childPath)
      } else {
        deleteDirectory(tree, childPath)
      }
    })
    tree.delete(dirPath)
  }
}

// List of directories to delete
// const directoriesToDelete = [
//   // Add any other directories you want to delete
// ]
// Delete unwanted directories
// directoriesToDelete.forEach((dir) => deleteDirectory(tree, dir))

// Optionally, update package.json or other configuration files
// updateJson(tree, 'apps/your-app/package.json', (json) => {
//   // Remove unwanted scripts, dependencies, etc.
//   delete json.scripts.someUnwantedScript;
//   delete json.dependencies.someUnwantedDependency;
//   return json;
// });

export function endsWithQuestionMark(str) {
  return /\?$/.test(str)
}

export function removeQuestionMarkAtEnd(str) {
  return str.replace(/\?$/, '')
}

export function getPrismaSchemaPath(tree) {
  const packageJsonContent = tree.read('package.json')
  if (!packageJsonContent) {
    console.error("Can't find package.json")
    return null
  }

  const packageJson = JSON.parse(packageJsonContent.toString())
  return packageJson.prisma?.schema
}

export function readPrismaSchema(tree, prismaPath) {
  if (!prismaPath) {
    console.error('Prisma schema path is not provided')
    return null
  }

  const prismaSchemaContent = tree.read(prismaPath)
  if (!prismaSchemaContent) {
    console.error(`Can't read the schema at ${prismaPath}`)
    return null
  }

  return prismaSchemaContent.toString()
}

export function mapPrismaTypeToNestJsType(prismaType: string) {
  const typeMap: Record<string, string> = {
    String: 'string',
    Boolean: 'boolean',
    Int: 'number',
    BigInt: 'bigint',
    Float: 'number',
    Decimal: 'number',
    DateTime: 'Date',
    Json: 'Record<string, any>',
    Bytes: 'Buffer',
  }

  return typeMap[prismaType] || prismaType
}

export async function parsePrismaSchema(schemaContent: string, modelName: string) {
  try {
    const dmmf = await getDMMF({ datamodel: schemaContent })
    const model = dmmf.datamodel.models.find((m) => m.name === modelName)

    if (!model) {
      return null
    }

    return model.fields.map((field) => ({
      name: field.name,
      type: mapPrismaTypeToNestJsType(field.type),
      optional: !field.isRequired,
    }))
  } catch (error) {
    console.error('Error parsing Prisma schema:', error)
    return null
  }
}

interface GenerateTemplateOptions {
  tree: Tree
  schema: any
  libraryRoot: string
  type: string
  templatePath: string
  npmScope: string
}

export function getNpmScope(tree: Tree): string {
  const packageJson = readJson(tree, 'package.json')
  const { name } = packageJson

  const match = name.match(/@([^/]+)/)
  if (!match) {
    throw new Error('No npm scope found in package.json name')
  }

  return match[1] // Returns just "nestled" from "@nestled/source"
}

export function generateTemplateFiles({
  tree,
  schema,
  libraryRoot,
  type,
  templatePath,
  npmScope,
}: GenerateTemplateOptions): void {
  const variables = {
    ...schema,
    ...names(`${schema.name}`),
    npmScope,
    tmpl: '',
  }

  // Fix the path - remove the redundant '../api-files'
  generateFiles(tree, joinPathFragments(templatePath, schema.name, type), libraryRoot, variables)
}

/**
 * Checks if a dependency is already present in package.json.
 *
 * @param tree - The Nx virtual file system.
 * @param packageName - The name of the package to check.
 * @returns true if the package is already installed, false otherwise.
 */
function isPackageInstalled(tree: Tree, packageName: string): boolean {
  const packageJson = readJson(tree, 'package.json')
  const allDependencies = {
    ...packageJson.dependencies,
    ...packageJson.devDependencies,
  }
  return !!allDependencies[packageName]
}

/**
 * Installs dependencies and devDependencies in the package.json file,
 * and configures Nx project graph plugins when appropriate.
 *
 * @param tree - The Nx Tree object (virtual filesystem).
 * @param dependencies - An object containing the dependencies to be added.
 * @param devDependencies - An object containing the devDependencies to be added.
 * @param options - Additional options for plugin configuration
 */
export async function installPlugins(
  tree: Tree,
  dependencies: Record<string, string> = {},
  devDependencies: Record<string, string> = {},
  options: {
    configureProjectGraph?: boolean
    pluginNames?: string[]
  } = {},
) {
  const depsToInstall: Record<string, string> = {}
  const devDepsToInstall: Record<string, string> = {}

  // Filter dependencies that are not yet installed
  for (const [pkg, version] of Object.entries(dependencies)) {
    if (!isPackageInstalled(tree, pkg)) {
      depsToInstall[pkg] = version
    }
  }

  // Filter devDependencies that are not yet installed
  for (const [pkg, version] of Object.entries(devDependencies)) {
    if (!isPackageInstalled(tree, pkg)) {
      devDepsToInstall[pkg] = version
    }
  }

  // If there are new dependencies to install, add them to package.json
  if (Object.keys(depsToInstall).length || Object.keys(devDepsToInstall).length) {
    return addDependenciesToPackageJson(tree, depsToInstall, devDepsToInstall)
  }

  return () => undefined // Return a no-op function instead of empty arrow function
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/web-admin-crud/generator.ts
import { formatFiles, generateFiles, installPackagesTask, joinPathFragments, names, Tree } from '@nx/devkit'
import { getNpmScope } from '@nx/js/src/utils/package-json/get-npm-scope'

function addNavigation(tree, options) {
  const routerPath = `apps/web/app/routes/admin.tsx`

  if (!tree.exists(routerPath)) {
    console.error(`Can't find ${routerPath}`)
    return
  }

  const routerContents = tree.read(routerPath)?.toString()
  if (routerContents) {
    const navEndpoint = '// Add New Nav Objects Here'
    const newNav = `{
      name: '${options.pluralClassName}',
      href: '/admin/${options.pluralName}',
      icon: HomeIcon,
      current: currentPath.toLowerCase().includes('admin/${options.pluralName}'),
    },`

    const updatedContents = routerContents.replace(navEndpoint, [newNav, navEndpoint].join('\n'))
    tree.overwrite(routerPath, updatedContents)
  }
}

function addFieldType(tree, options: Record<string, unknown>, schema: Record<string, unknown>) {
  console.log('Started Adding Field Type')

  let _a

  const routerPath = `libs/shared/fields/src/lib/shared-fields.tsx`
  if (!tree.exists(routerPath)) {
    console.error(`Can't find ${routerPath}`)
  } else {
    console.info(`Found ${routerPath}`)
  }
  const contents = (_a = tree.read(routerPath)) === null || _a === void 0 ? void 0 : _a.toString()
  if (contents) {
    const navEndpoint = '// Add New Admin Field Definitions Here'
    const newNav = `export const admin${options.className}Fields: WebUiFormField[] = [
  WebUiFormField.input('${schema.primaryField}', { label: '${schema.primaryField}' }),
]`

    const replacedModule = contents.replace(navEndpoint, [newNav, navEndpoint].join('\n'))

    tree.overwrite(routerPath, replacedModule)
  }
}

export default async function (tree: Tree, schema: any) {
  const npmScope = `@${getNpmScope(tree)}`
  const pluralName = schema.plural || `${schema.name}s`
  const pluralNames = names(pluralName)
  const variables = {
    ...schema,
    ...names(schema.name),
    pluralName: pluralNames.name,
    pluralClassName: pluralNames.className,
    pluralPropertyName: pluralNames.propertyName,
    npmScope,
    tmpl: '',
  }
  generateFiles(
    tree, // the virtual file system
    joinPathFragments(__dirname, `./app-pages`), // path to the file templates
    `apps/web/app/routes`, // destination path of the files
    variables, // config object to replace variable in file templates
  )
  generateFiles(
    tree, // the virtual file system
    joinPathFragments(__dirname, `./admin-sdk-files`), // path to the file templates
    `libs/shared/util-sdk/src/graphql/admin/${schema.name}`, // destination path of the files
    variables, // config object to replace variable in file templates
  )
  // generateFiles(
  //   tree, // the virtual file system
  //   joinPathFragments(__dirname, `./user-sdk-files`), // path to the file templates
  //   `libs/shared/util-sdk/src/graphql/${schema.name}`, // destination path of the files
  //   variables, // config object to replace variable in file templates
  // )

  addNavigation(tree, variables)
  addFieldType(tree, variables, schema)
  await formatFiles(tree)
  return () => {
    installPackagesTask(tree)
    console.warn(`Restart the API and Web Server to see changes`)
  }
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/web-admin-crud/schema.d.ts
export interface WebAdminCrudHelperGeneratorSchema {
  name: string
  plural: string
  primaryField: string
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/web-admin-crud-helper/generator.ts
import {
  formatFiles,
  generateFiles,
  installPackagesTask,
  joinPathFragments,
  readJson,
  readProjectConfiguration,
  Tree,
} from '@nx/devkit'
import { libraryGenerator } from '@nx/react/src/generators/library/library'
import { Linter } from '@nx/eslint'

export default async function (tree: Tree, schema: any) {
  await libraryGenerator(tree, {
    name: schema.name,
    directory: 'web-admin',
    style: 'none',
    skipTsConfig: false,
    skipFormat: false,
    unitTestRunner: 'jest',
    linter: Linter.EsLint,
  })
  const libraryRoot = readProjectConfiguration(tree, `web-admin-${schema.name}`).root
  const npmScope = readJson(tree, 'nx.json').npmScope
  const variables = {
    ...schema,
    npmScope,
    tmpl: '',
  }
  generateFiles(
    tree, // the virtual file system
    joinPathFragments(__dirname, `./files`), // path to the file templates
    libraryRoot, // destination path of the files
    variables, // config object to replace variable in file templates
  )
  await formatFiles(tree)
  return () => {
    installPackagesTask(tree)
  }
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/web-admin-crud-helper/schema.d.ts
export interface WebAdminCrudHelperGeneratorSchema {
  name: string
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/web-feature/generator.ts
import { formatFiles, Tree } from '@nx/devkit'
import { libraryGenerator } from '@nx/react'

interface CreateLibrarySchema {
  name: string
  appName?: string
  dryRun?: boolean
}

async function createLibrary(host: Tree, schema: CreateLibrarySchema) {
  if (!schema.name) {
    throw new Error('Name is required')
  }

  const appName = schema.appName || 'web'
  const directory = `${appName}/${schema.name}`
  await libraryGenerator(host, {
    name: 'data-access',
    directory,
    tags: `scope:${appName},type:data-access`,
    linter: 'eslint',
    style: 'none',
  })
  await libraryGenerator(host, {
    name: 'feature',
    directory,
    tags: `scope:${appName},type:feature`,
    linter: 'eslint',
    style: 'none',
  })
  await libraryGenerator(host, {
    name: 'ui',
    directory,
    tags: `scope:${appName},type:feature`,
    linter: 'eslint',
    style: 'none',
  })
}

export default async function (host: Tree, schema: CreateLibrarySchema) {
  try {
    await createLibrary(host, schema)
    await formatFiles(host)
  } catch (error) {
    console.error(error.message)
  }
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/web-feature/schema.d.ts
export interface WebFeatureGeneratorSchema {
  name: string
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/web-component/generator.ts
import { formatFiles, generateFiles, names, Tree } from '@nx/devkit'
import { readJsonSync } from 'fs-extra'
import { join } from 'path'
import * as process from 'process'

export default async function (host: Tree, schema: { name: string; target: string }) {
  const nxJson = readJsonSync(join(process.cwd(), 'nx.json'))
  const workspaceJson = readJsonSync(join(process.cwd(), 'workspace.json'))
  if (!workspaceJson.projects[schema.target]) {
    throw new Error(`Target ${schema.target} not found`)
  }
  if (!workspaceJson.projects[schema.target].sourceRoot) {
    throw new Error(`Target ${schema.target} sourceRoot not found`)
  }
  const target = `${workspaceJson.projects[schema.target].sourceRoot}/lib`

  const formattedNames = names(schema.name)
  generateFiles(host, join(__dirname, 'files'), join(target, schema.name), {
    ...formattedNames,
    npmScope: nxJson.npmScope,
    name: schema.name,
    target,
    tmpl: '',
  })
  await formatFiles(host)
  const { fileName } = formattedNames
  console.log(`Usage: <${fileName}></${fileName}>`)
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/web-component/schema.d.ts
export interface WebComponentGeneratorSchema {
  name: string
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/web-module/generator.ts
import { formatFiles, generateFiles, names, Tree } from '@nx/devkit'
import { readJsonSync } from 'fs-extra'
import { join } from 'path'
import * as process from 'process'

export default async function (host: Tree, schema: { name: string; target: string }) {
  const nxJson = readJsonSync(join(process.cwd(), 'nx.json'))
  const workspaceJson = readJsonSync(join(process.cwd(), 'workspace.json'))
  if (!workspaceJson.projects[schema.target]) {
    throw new Error(`Target ${schema.target} not found`)
  }
  if (!workspaceJson.projects[schema.target].sourceRoot) {
    throw new Error(`Target ${schema.target} sourceRoot not found`)
  }
  const target = `${workspaceJson.projects[schema.target].sourceRoot}/lib`

  const formattedNames = names(schema.name)
  generateFiles(host, join(__dirname, 'files'), join(target, schema.name), {
    ...formattedNames,
    npmScope: nxJson.npmScope,
    name: schema.name,
    target,
    tmpl: '',
  })
  await formatFiles(host)
  const { className, fileName } = formattedNames
  console.log(
    `{ path: '', loadChildren: () => import('./${fileName}/${fileName}.module').then((m) => m.${className}Module) },`,
  )
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/web-module/schema.d.ts
export interface WebModuleGeneratorSchema {
  name: string
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/web-user-crud/generator.ts
import {
  formatFiles,
  generateFiles,
  installPackagesTask,
  joinPathFragments,
  names,
  readJson,
  readProjectConfiguration,
  Tree,
} from '@nx/devkit'
import { WebUserCrudGeneratorSchema } from './schema'
import { libraryGenerator } from '@nx/react'
import { Linter } from '@nx/eslint'

function addNavigation(tree, options) {
  console.log('Started Adding Navigation')

  let _a

  const routerPath = `libs/web/router/src/lib/web-router.tsx`
  if (!tree.exists(routerPath)) {
    console.error(`Can't find ${routerPath}`)
  }
  console.info(`Found ${routerPath}`)
  const contents = (_a = tree.read(routerPath)) === null || _a === void 0 ? void 0 : _a.toString()
  if (contents) {
    const importEndpoint = '// Add New Imports Here'
    const newImports = `import { Web${options.className}Create, Web${options.className}List, Web${options.className}Update } from '@${options.npmScope}/web/${options.name}'`
    const navEndpoint = '// Add New Nav Objects Here'
    const newNav = `{
      name: '${options.pluralClassName}',
      href: '/${options.pluralName}',
      icon: HomeIcon,
      current: currentPath.path.includes('/${options.pluralName}'),
    },`
    const routeEndpoint = `{/*Add New Routes Here*/}`
    const newRoute = `<Route path="${options.pluralName}" element={<Web${options.className}List />} />
        <Route path="${options.name}">
          <Route path="new" element={<Web${options.className}Create />} />
          <Route path=":id" element={<Web${options.className}Update />} />
        </Route>`

    const replacedModule = contents
      .replace(importEndpoint, [newImports, importEndpoint].join('\n'))
      .replace(navEndpoint, [newNav, navEndpoint].join('\n'))
      .replace(routeEndpoint, [newRoute, routeEndpoint].join('\n'))

    tree.overwrite(routerPath, replacedModule)
  }
}
export default async function (tree: Tree, options: WebUserCrudGeneratorSchema) {
  await libraryGenerator(tree, {
    name: options.name,
    directory: 'web',
    style: 'none',
    skipTsConfig: false,
    skipFormat: false,
    unitTestRunner: 'jest',
    linter: Linter.EsLint,
  })
  const libraryRoot = readProjectConfiguration(tree, `web-${options.name}`).root

  const npmScope = readJson(tree, 'nx.json').npmScope
  const pluralName = options.plural || `${options.name}s`
  const pluralNames = names(pluralName)
  const variables = {
    ...options,
    ...names(options.name),
    pluralName: pluralNames.name,
    pluralClassName: pluralNames.className,
    pluralPropertyName: pluralNames.propertyName,
    npmScope,
    tmpl: '',
  }
  generateFiles(
    tree, // the virtual file system
    joinPathFragments(__dirname, `./files`), // path to the file templates
    libraryRoot, // destination path of the files
    variables, // config object to replace variable in file templates
  )
  generateFiles(
    tree, // the virtual file systemf
    joinPathFragments(__dirname, `./sdk-files`), // path to the file templates
    `libs/shared/util-sdk/src/graphql/${options.name}`, // destination path of the files
    variables, // config object to replace variable in file templates
  )

  addNavigation(tree, variables)
  await formatFiles(tree)
  return () => {
    installPackagesTask(tree)
    console.warn(`Restart the API and Web Server to see changes`)
  }
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/web-user-crud/schema.d.ts
export interface WebUserCrudGeneratorSchema {
  name: string
  plural: string
  primaryField: string
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/workspace-setup/generator.ts
require('dotenv').config()
import {
  canConnect,
  ensureDockerComposeIsRunning,
  ensureDockerIsRunning,
  ensureDotEnv,
  log,
  runPrismaSeed,
  runPrismaSetup,
} from './lib/helpers'

export default async function () {
  log('Setting up workspace ')

  ensureDotEnv()
  require('dotenv').config()

  const DATABASE_URL = process.env.DATABASE_URL

  if (!DATABASE_URL) {
    throw new Error(`Please provide DATABASE_URL env var`)
  }

  if (!DATABASE_URL.includes('localhost')) {
    throw new Error(`Can't connect to DATABASE_URL if it's not on localhost`)
  }

  const connected = await canConnect(DATABASE_URL)

  if (!connected) {
    ensureDockerIsRunning()
    await ensureDockerComposeIsRunning()
  }

  try {
    runPrismaSetup()
    await new Promise(resolve => setTimeout(resolve, 2000))
    runPrismaSeed()
    log('Workspace setup done!')
  } catch (error) {
    console.error('Error during workspace setup:', error.message)
  }
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/workspace-setup/schema.d.ts
export interface WorkspaceSetupGeneratorSchema {
  name: string
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-app/files/app.config.ts__tmpl__
import { registerAs } from '@nestjs/config'
import Joi from 'joi'

export const appConfig = registerAs('app', () => ({
  prefix: 'api',
  environment: process.env.NODE_ENV,
  host: process.env.HOST,
  port: process.env.PORT ? parseInt(process.env.PORT, 10) : 3000,
  apiUrl: process.env.API_URL,
  webPort: process.env.WEB_PORT ? parseInt(process.env.WEB_PORT, 10) : 4200,
  api: {
    cookie: {
      name: process.env.API_COOKIE_NAME,
      secret: process.env.API_COOKIE_SECRET,
      options: {
        domain: process.env.API_COOKIE_DOMAIN,
        httpOnly: true,
        secure: true,
        sameSite: 'none',
        path: '/',
      },
    },
    cors: {
      origin: [process.env.SITE_URL],
    },
  },
  siteUrl: process.env.SITE_URL || (process.env.API_URL ? process.env.API_URL.replace('/api', '') : ''),
  app: {
    email: process.env.APP_EMAIL,
    supportEmail: process.env.APP_SUPPORT_EMAIL,
    adminEmails: process.env.APP_ADMIN_EMAILS,
    name: process.env.APP_NAME,
  },
  smtp: {
    host: process.env.SMTP_HOST,
    port: process.env.SMTP_PORT ? parseInt(process.env.SMTP_PORT, 10) : 587,
    user: process.env.SMTP_USER,
    pass: process.env.SMTP_PASS,
    ignoreTLS: true,
  },
  twilio: {
    accountSid: process.env.TWILIO_ACCOUNT_SID,
    authToken: process.env.TWILIO_AUTH_TOKEN,
    fromNumber: process.env.TWILIO_FROM_NUMBER,
  },
}))

export const validationSchema = Joi.object({
    NODE_ENV: Joi.string().valid('development', 'production', 'test'),
    HOST: Joi.string().alphanum().default('localhost'),
    PORT: Joi.number().default(3000),
    WEB_PORT: Joi.number().default(4200),
    WEB_URL: Joi.string().default(`http://${process.env.HOST || 'localhost'}:${process.env.WEB_PORT}`),
    API_COOKIE_DOMAIN: Joi.string().default('localhost'),
    API_COOKIE_NAME: Joi.string().default('__session'),
    API_URL: Joi.string().default(`http://${process.env.HOST || 'localhost'}:${process.env.PORT}/api`),
    APP_NAME: Joi.string().required(),
    APP_EMAIL: Joi.string().email().required(),
    APP_SUPPORT_EMAIL: Joi.string().email().required(),
    APP_ADMIN_EMAILS: Joi.string().required(),
    SITE_URL: Joi.string().uri().required(),
    SMTP_HOST: Joi.string().required(),
    SMTP_PORT: Joi.string().required(),
    SMTP_USER: Joi.string().required(),
    SMTP_PASS: Joi.string().required(),
})


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-app/files/app.module.ts__tmpl__
import { MiddlewareConsumer, Module, NestModule, RequestMethod } from '@nestjs/common'
import { LoggerMiddleware } from './applogger.middleware'
import { ConfigModule } from '@nestjs/config'
import { appConfig, validationSchema } from './app.config'

export const appModules = [];

@Module({
  imports: [
    ConfigModule.forRoot({
      load: [appConfig],
      validationSchema: validationSchema,
      validationOptions: {
        allowUnknown: true,
        abortEarly: false,
      },
      isGlobal: true,
    }),
    ...appModules,
  ],
})
export class AppModule implements NestModule {
  configure(consumer: MiddlewareConsumer): void {
    consumer.apply(LoggerMiddleware).forRoutes('*', { path: '*', method: RequestMethod.ALL })
  }
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-app/files/applogger.middleware.ts__tmpl__
import { NextFunction, Request, Response } from 'express'
import { Injectable, Logger, NestMiddleware } from '@nestjs/common'

@Injectable()
export class LoggerMiddleware implements NestMiddleware {
  private readonly logger = new Logger('HTTP')

  use(request: Request, response: Response, next: NextFunction): void {
    const { ip, method, originalUrl } = request
    const userAgent = request.get('user-agent') || ''

    response.on('finish', () => {
      const { statusCode } = response
      const contentLength = response.get('content-length')

      this.logger.log(`${method} ${originalUrl} ${statusCode} ${contentLength} - ${userAgent} ${ip}`)
    })

    next()
  }
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-app/files/main.ts__tmpl__
import { Logger } from '@nestjs/common'
import { NestFactory } from '@nestjs/core'
import { ConfigService } from '@nestjs/config'
import cookieParser from 'cookie-parser'

import { AppModule } from './app.module'

async function bootstrap() {
  const app = await NestFactory.create(AppModule)
  const configService = app.get(ConfigService)
  const globalPrefix = configService.get('app.prefix')
  app.setGlobalPrefix(globalPrefix)
  app.enableCors({
    credentials: true,
    origin: configService.get('app.api.cors.origin'),
  })
  app.use(cookieParser(configService.get('app.api.cookie.secret')))

  const port = configService.get('app.port')
  const host = configService.get('app.host')
  await app.listen(port, host, () => {
    Logger.log('Listening at http://localhost:' + port + '/' + globalPrefix)
    Logger.log('Listening at http://localhost:' + port + '/graphql')
  })
}

bootstrap().catch((error) => {
  Logger.error('Failed to start the application', error);
  process.exit(1);
});


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-app/utils/install-plugins.ts
import { addDependenciesToPackageJson, logger, Tree } from '@nx/devkit'

export async function installPlugins(tree: Tree) {
  logger.info('Starting to install API dependencies...')

  const dependencies = {
    '@nestjs/common': 'latest',
    '@nestjs/core': 'latest',
    '@nestjs/config': 'latest',
    'cookie-parser': 'latest',
    '@prisma/client': 'latest',
    '@prisma/internals': '^6.3.1',
    express: 'latest',
    joi: 'latest',
  }

  const devDependencies = {
    '@nx/nest': 'latest',
    '@types/cookie-parser': 'latest',
    '@types/express': 'latest',
    prisma: 'latest',
    tsx: 'latest',
  }

  try {
    logger.info('Adding dependencies to package.json...')
    Object.entries(dependencies).forEach(([pkg, version]) => {
      logger.info(`Adding dependency: ${pkg}@${version}`)
    })
    Object.entries(devDependencies).forEach(([pkg, version]) => {
      logger.info(`Adding devDependency: ${pkg}@${version}`)
    })

    const installTask = addDependenciesToPackageJson(tree, dependencies, devDependencies)
    logger.info('API dependencies added successfully! Dependencies will be installed after generator completes.')
    return installTask
  } catch (error) {
    logger.error(`Failed to add API dependencies to package.json: ${error}`)
    throw error
  }
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/web-component/files/__name__.component.ts__tmpl__
import { Component } from '@angular/core'


@Component({
  selector: '<%= fileName %>',
  template: `
    <ng-container>
      <div class="flex p-4 shadow rounded-lg bg-gray-100 dark:bg-gray-800">
        <code><%= fileName %></code>
      </div>
      <code class="text-xs px-2 py-1 dark:bg-gray-800 rounded-md opacity-70">
        Component: <%= target %>/<%= fileName %>/<%= fileName %>.component.ts
      </code>
    </ng-container>
  `,
})
export class <%= className %>Component {

}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/web-component/files/__name__.module.ts__tmpl__
import { CommonModule } from '@angular/common'
import { NgModule } from '@angular/core'
import { RouterModule } from '@angular/router'
import { <%= className %>Component } from './<%= fileName %>.component'

@NgModule({
  declarations: [<%= className %>Component],
  exports: [<%= className %>Component],
  imports: [CommonModule, RouterModule],
})
export class <%= className %>Module {}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/workspace-setup/lib/helpers.ts
import { execSync } from 'child_process'
import { existsSync, readFileSync, writeFileSync } from 'fs'
import { basename } from 'path'
import { Client } from 'pg'

export const MAX_RETRIES = 30
export const WORKSPACE_NAME = basename(process.cwd())
export const DATABASE_URL = process.env.DATABASE_URL

export function log(...msg) {
  console.log(`[${WORKSPACE_NAME}]`, ...msg)
}

export async function connectToPostgres(url: string): Promise<Client> {
  const client = new Client(url)
  await client.connect()
  return client
}

export async function canConnect(url: string): Promise<boolean> {
  try {
    await connectToPostgres(url)
    log('Connected to Postgres')
    return true
  } catch (e) {
    return false
  }
}

export function ensureDockerIsRunning() {
  try {
    execSync('docker ps', { stdio: 'ignore' })
    log('Docker is Up')
    return true
  } catch (e) {
    throw new Error(`Make sure Docker is running, then run this again`)
  }
}

export function isDockerComposeRunning(): boolean {
  try {
    const res = execSync('docker compose top', {
      stdio: ['inherit', 'inherit'],
    })

    if (res) {
      log('Docker Compose is Running')
      return true
    }
    return false
  } catch (e) {
    return false
  }
}

export async function ensureDockerComposeIsRunning() {
  const isRunning = isDockerComposeRunning()
  if (isRunning) {
    return true
  }

  try {
    execSync('docker compose up -d', { stdio: 'ignore' })
    await waitForConnection()
    log('Docker Compose Started')
  } catch (e) {
    throw new Error(`Make sure Docker Compose is running`)
  }
}

export function ensureDotEnv() {
  try {
    if (!existsSync('.env')) {
      writeFileSync('.env', readFileSync('.env.example'))
      log('.env created (copied from .env.example)')
    } else {
      log('.env exists')
    }
  } catch (e) {
    throw new Error(`Error creating or reading.env file`)
  }
}

export function runPrismaSetup() {
  try {
    execSync('pnpm prisma:apply', { stdio: 'ignore' })
    log('Prisma Setup is Done')
    return true
  } catch (e) {
    throw new Error(`There was an issue running 'pnpm prisma:apply'`)
  }
}

export function runPrismaSeed() {
  try {
    execSync('npx prisma db seed -- --confirm --timeout 0', { stdio: 'inherit' })
    log('Prisma Seed is Done')
    return true
  } catch (e) {
    console.error('Prisma Seed Error:', e.message)
    throw new Error(`There was an issue running 'pnpm prisma:seed': ${e.message}`)
  }
}

export const sleep = (ms = 1000) => new Promise((resolve) => setTimeout(resolve, ms))

function waitForConnection(): Promise<void> {
  log('Waiting for Postgres to connect')
  return new Promise((resolve, reject) => {
    let count = 0

    function tryConnect() {
      if (count >= MAX_RETRIES) {
        reject()
        return
      }

      canConnect(DATABASE_URL).then((isConnected) => {
        if (isConnected) {
          resolve()
        } else {
          count++
          sleep().then(tryConnect)
        }
      })
    }

    tryConnect()
  })
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/web-module/files/__name__.component.ts__tmpl__
import { Component } from '@angular/core'
import { <%= className %>Store } from './<%= fileName %>.store';

@Component({
  template: `
    <ng-container *ngIf="vm$ | async as vm">
      <div class="flex p-4 shadow rounded-lg bg-gray-100 dark:bg-gray-800">
        <pre>{{ vm.items | json }}</pre>
      </div>
      <code class="text-xs px-2 py-1 dark:bg-gray-800 rounded-md opacity-70">
        Component: <%= target %>/<%= fileName %>/<%= fileName %>.component.ts
      </code>
    </ng-container>
  `,
  providers: [<%= className %>Store],
})
export class <%= className %>Component {
  readonly vm$ = this.store.vm$
  constructor(private readonly store: <%= className %>Store) {}
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/web-module/files/__name__.module.ts__tmpl__
import { CommonModule } from '@angular/common'
import { NgModule } from '@angular/core'
import { RouterModule } from '@angular/router'
import { <%= className %>Component } from './<%= fileName %>.component'

@NgModule({
  declarations: [<%= className %>Component],
  imports: [CommonModule, RouterModule.forChild([{ path: '', component: <%= className %>Component }])],
})
export class <%= className %>Module {}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/web-module/files/__name__.store.ts__tmpl__
import { Injectable } from '@angular/core'
import { ComponentStore, tapResponse } from '@ngrx/component-store'
import { WebCoreDataAccessService } from '@<%= npmScope %>/web/core/data-access'
import { of } from 'rxjs'
import { switchMap, tap } from 'rxjs/operators'

export interface Item {
  id?: string
  name?: string
}

interface <%= className %>State {
  items?: Item[]
  loading?: boolean
}

@Injectable()
export class <%= className %>Store extends ComponentStore<<%= className %>State> {
  constructor(private readonly data: WebCoreDataAccessService) {
    super({})
    this.loadItemsEffect()
  }

  readonly items$ = this.select(this.state$, (s) => s.items)
  readonly vm$ = this.select(this.items$, items => ({ items }))

  readonly loadItemsEffect = this.effect(($) =>
    $.pipe(
      tap(() => this.patchState({ loading: true })),
      switchMap(() =>
        of([ { id: Date.now().toString(), name: 'Item 1' }]).pipe(
          tapResponse(
            (res) => this.patchState({ items: res }),
            (e: any) => console.error('An error occurred', e),
          ),
        ),
      ),
    ),
  )
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/web-admin-crud-helper/files/src/index.ts__tmpl__
export * from './lib/web-admin-create-form'
export * from './lib/web-admin-update-form'


// /Users/justinhandley/IdeaProjects/nestled/generators/src/web-user-crud/files/src/index.ts__tmpl__
export * from './lib/web-<%= name %>-list'
export * from './lib/web-<%= name %>-create'
export * from './lib/web-<%= name %>-update'
export * from './lib/web-<%= name %>-helper'


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-crud/files/data-access/src/index.ts__tmpl__
export * from './lib/<%= projectName %>.module'
export * from './lib/<%= projectName %>-admin.service'
export * from './lib/<%= projectName %>-public.service'
export * from './lib/<%= projectName %>-user.service'


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/account/data-access/src/index.ts__tmpl__
export * from './lib/api-account-data-access.module'
export * from './lib/api-account-data-access.service'
export * from './lib/dto/account-create-email.input'
export * from './lib/dto/account-update-password.input'
export * from './lib/dto/account-update-profile.input'


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/account/feature/src/index.ts__tmpl__
export * from './lib/api-account-feature.module'


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-crud/files/feature/src/index.ts__tmpl__
export * from './lib/<%= projectName %>.module'


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/auth/data-access/src/index.ts__tmpl__
export * from './lib/api-auth-data-access.helper'
export * from './lib/api-auth-data-access.module'
export * from './lib/api-auth-data-access.service'
export * from './lib/dto/jwt.dto'
export * from './lib/dto/login.input'
export * from './lib/dto/register.input'
export * from './lib/dto/user-create.input'
export * from './lib/dto/forgot-password.input'
export * from './lib/dto/reset-password.input'
export * from './lib/models/user-token'


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/auth/feature/src/index.ts__tmpl__
export * from './lib/api-auth-feature.module'


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/core/data-access/src/index.ts__tmpl__
export * from './lib/api-core-data-access.module'
export * from './lib/api-core-data-access.service'
export * from './lib/dto/core-paging.input'
export * from './lib/dto/multi-select-input'
export * from './lib/models/core-paging'


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/auth/util/src/index.ts__tmpl__
export * from './lib/api-auth-util.module'
export * from './lib/guards/gql-auth-admin.guard'
export * from './lib/guards/gql-auth.guard'
export * from './lib/decorators/ctx-user.decorator'


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/user/data-access/src/index.ts__tmpl__
export * from './lib/api-user-data-access.module'
export * from './lib/api-user-data-access.module'
export * from './lib/api-user-data-access.service'
export * from './lib/models/user.model'
export * from './lib/models/role.enum'
export * from './lib/models/email.model'
export * from './lib/dto/admin-create-user.input'
export * from './lib/dto/admin-update-user.input'


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/core/feature/src/index.ts__tmpl__
export * from './lib/api-core-feature.module'
export * from './lib/api-core-feature.service'


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/user/feature/src/index.ts__tmpl__
export * from './lib/api-user-feature.module'


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/mailer/data-access/src/index.ts__tmpl__
export * from './lib/api-mailer-data-access.module'
export * from './lib/api-mailer-data-access.service'


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-crud/files/data-access/src/lib/__projectName__-admin.service.ts__tmpl__
import { Injectable, UseGuards } from '@nestjs/common'
import { PrismaSelect } from '@paljs/plugins'
import { Prisma } from '@prisma/client'
import { GraphQLResolveInfo } from 'graphql'
import { <%= apiClassName %>CoreDataAccessService, AdminCreate<%= modelClassName %>Input, AdminList<%= modelClassName %>Input, AdminUpdate<%= modelClassName %>Input,  CorePaging } from '<%= npmScope %>/<%= directory %>/core/data-access'
import {GqlAuthAdminGuard} from '<%= npmScope %>/api/auth/util'

@Injectable()
@UseGuards(GqlAuthAdminGuard)
export class <%= apiClassName %><%= modelClassName %>DataAccessAdminService {
  constructor(private readonly data: <%= apiClassName %>CoreDataAccessService) {}

  private readonly searchFields = [<%- searchFields %>]
    private where(input?: AdminList<%= modelClassName %>Input): Prisma.<%= modelClassName %>WhereInput {
      let conditions: Prisma.<%= modelClassName %>WhereInput[] = []

      if (input?.search) {
        conditions = this.data.search(conditions, input.search, this.searchFields)
      }

      return {
        AND: conditions,
      }
    }

  admin<%= pluralClassName %>(info: GraphQLResolveInfo, input?: AdminList<%= modelClassName %>Input) {
    const select = new PrismaSelect(info).value
    return this.data.<%= modelPropertyName %>.findMany({
      take: input?.take,
      skip: input?.skip,
      where: this.where(input),
      ...select,
    })
  }

  async adminCount<%= pluralClassName %>(input?: AdminList<%= modelClassName %>Input): Promise<CorePaging> {
    const total = await this.data.<%= modelPropertyName %>.count()
    const count = await this.data.<%= modelPropertyName %>.count({ where: this.where(input) })
    const take = input?.take ?? 10
    const skip = input?.skip ?? 0
    const page = Math.floor(skip / take)
    return {
      take,
      skip,
      page,
      count,
      total,
    }
  }

  admin<%= modelClassName %>(info: GraphQLResolveInfo, <%= modelPropertyName %>Id: string) {
    const select = new PrismaSelect(info).value
    return this.data.<%= modelPropertyName %>.findUnique({ where: { id: <%= modelPropertyName %>Id }, ...select, })
  }

  adminCreate<%= modelClassName %>(info: GraphQLResolveInfo, input: AdminCreate<%= modelClassName %>Input) {
    const select = new PrismaSelect(info).value
    return this.data.<%= modelPropertyName %>.create({
      data: { ...input },
      ...select,
    })
  }

  adminUpdate<%= modelClassName %>(info: GraphQLResolveInfo, <%= modelPropertyName %>Id: string, input: AdminUpdate<%= modelClassName %>Input) {
    const select = new PrismaSelect(info).value
    return this.data.<%= modelPropertyName %>.update({
      where: { id: <%= modelPropertyName %>Id },
      data: { ...input },
      ...select,
    })
  }

  adminDelete<%= modelClassName %>(<%= modelPropertyName %>Id: string) {
    return this.data.<%= modelPropertyName %>.delete({ where: { id: <%= modelPropertyName %>Id } })
  }
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-crud/files/data-access/src/lib/__projectName__-public.service.ts__tmpl__
import { Injectable } from '@nestjs/common'
import { <%= apiClassName %>CoreDataAccessService } from '<%= npmScope %>/<%= directory %>/core/data-access'

@Injectable()
export class <%= apiClassName %><%= modelClassName %>DataAccessPublicService {
  constructor(private readonly data: <%= apiClassName %>CoreDataAccessService) {}
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-crud/files/data-access/src/lib/__projectName__-user.service.ts__tmpl__
import { Injectable } from '@nestjs/common'
import { PrismaSelect } from '@paljs/plugins'
import { GraphQLResolveInfo } from 'graphql'
import { Prisma } from '@prisma/client'
import { <%= apiClassName %>CoreDataAccessService, UserCreate<%= modelClassName %>Input, UserList<%= modelClassName %>Input, UserUpdate<%= modelClassName %>Input, CorePaging } from '<%= npmScope %>/<%= directory %>/core/data-access'
import { UseGuards } from '@nestjs/common'
import {GqlAuthGuard} from '<%= npmScope %>/api/auth/util'

@Injectable()
@UseGuards(GqlAuthGuard)
export class <%= apiClassName %><%= modelClassName %>DataAccessUserService {
  constructor(private readonly data: <%= apiClassName %>CoreDataAccessService) {}

    private readonly searchFields = [<%- searchFields %>]
    private where(input?: UserList<%= modelClassName %>Input): Prisma.<%= modelClassName %>WhereInput {
      let conditions: Prisma.<%= modelClassName %>WhereInput[] = []

      if (input?.search) {
        conditions = this.data.search(conditions, input.search, this.searchFields)
      }

      return {
        AND: conditions,
      }
    }

  user<%= pluralClassName %>(info: GraphQLResolveInfo, input?: UserList<%= modelClassName %>Input) {
    const select = new PrismaSelect(info).value
    return this.data.<%= modelPropertyName %>.findMany({
      take: input?.take,
      skip: input?.skip,
      where: this.where(input),
      ...select,
    })
  }

  async userCount<%= pluralClassName %>(input?: UserList<%= modelClassName %>Input): Promise<CorePaging> {
    const total = await this.data.<%= modelPropertyName %>.count()
    const count = await this.data.<%= modelPropertyName %>.count({ where: this.where(input) })
    const take = input?.take ?? 10
    const skip = input?.skip ?? 0
    const page = Math.floor(skip / take)
    return {
      take,
      skip,
      page,
      count,
      total,
    }
  }

  user<%= modelClassName %>(info: GraphQLResolveInfo, <%= modelPropertyName %>Id: string) {
    const select = new PrismaSelect(info).value
    return this.data.<%= modelPropertyName %>.findUnique({ where: { id: <%= modelPropertyName %>Id }, ...select })
  }

  userCreate<%= modelClassName %>(info: GraphQLResolveInfo, input: UserCreate<%= modelClassName %>Input) {
    const select = new PrismaSelect(info).value
    return this.data.<%= modelPropertyName %>.create({
      data: { ...input },
      ...select,
    })
  }

  userUpdate<%= modelClassName %>(info: GraphQLResolveInfo, <%= modelPropertyName %>Id: string, input: UserUpdate<%= modelClassName %>Input) {
    const select = new PrismaSelect(info).value
    return this.data.<%= modelPropertyName %>.update({
      where: { id: <%= modelPropertyName %>Id },
      data: { ...input },
      ...select,
    })
  }

  userDelete<%= modelClassName %>(<%= modelPropertyName %>Id: string) {
    return this.data.<%= modelPropertyName %>.delete({ where: { id: <%= modelPropertyName %>Id } })
  }
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-crud/files/data-access/src/lib/__projectName__.module.ts__tmpl__
import { Module } from '@nestjs/common'
import { <%= apiClassName %>CoreDataAccessModule } from '<%= npmScope %>/<%= directory %>/core/data-access'

import { <%= apiClassName %><%= modelClassName %>DataAccessAdminService } from './<%= projectName %>-admin.service'
import { <%= apiClassName %><%= modelClassName %>DataAccessPublicService } from './<%= projectName %>-public.service'
import { <%= apiClassName %><%= modelClassName %>DataAccessUserService } from './<%= projectName %>-user.service'

@Module({
  imports: [<%= apiClassName %>CoreDataAccessModule],
  providers: [<%= apiClassName %><%= modelClassName %>DataAccessAdminService, <%= apiClassName %><%= modelClassName %>DataAccessPublicService, <%= apiClassName %><%= modelClassName %>DataAccessUserService],
  exports: [<%= apiClassName %><%= modelClassName %>DataAccessAdminService, <%= apiClassName %><%= modelClassName %>DataAccessPublicService, <%= apiClassName %><%= modelClassName %>DataAccessUserService],
})
export class <%= apiClassName %><%= modelClassName %>DataAccessModule {}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/account/data-access/src/lib/api-account-data-access.module.ts__tmpl__
import { Module } from '@nestjs/common'
import { ApiCoreDataAccessModule } from '@<%= npmScope %>/api/core/data-access'
import { ApiAccountDataAccessService } from './api-account-data-access.service'

@Module({
  imports: [ApiCoreDataAccessModule],
  providers: [ApiAccountDataAccessService],
  exports: [ApiAccountDataAccessService],
})
export class ApiAccountDataAccessModule {}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/account/data-access/src/lib/api-account-data-access.service.ts__tmpl__
import { BadRequestException, Injectable, Logger, UnauthorizedException } from '@nestjs/common'
import { ApiCoreDataAccessService } from '@<%= npmScope %>/api/core/data-access'
import { hashPassword, validatePassword } from '@<%= npmScope %>/api/auth/data-access'
import { Prisma } from '@prisma/client'
import { AccountCreateEmailInput } from './dto/account-create-email.input'
import { AccountUpdatePasswordInput } from './dto/account-update-password.input'
import { AccountUpdateProfileInput } from './dto/account-update-profile.input'

@Injectable()
export class ApiAccountDataAccessService {
  constructor(private readonly data: ApiCoreDataAccessService) {}

  accountEmails(userId: string) {
    return this.data.email.findMany({ where: { owner: { id: userId } }, orderBy: { primary: 'desc' } })
  }

  accountProfile(userId: string) {
    return this.data.findUserById(userId)
  }

  async accountCreateEmail(userId: string, input: AccountCreateEmailInput) {
    const exists = await this.data.findUserByEmail(input.email)
    if (exists) {
      throw new BadRequestException(`Can't add email address ${input.email}`)
    }
    return this.data.email.create({ data: { ownerId: userId, email: input.email, primary: false } })
  }

  async accountDeleteEmail(userId: string, userEmailId: string) {
    const owner = await this.data.email.findUnique({ where: { id: userEmailId } }).owner()
    if (owner.id !== userId) {
      throw new UnauthorizedException()
    }
    const email = await this.data.email.findUnique({ where: { id: userEmailId } })
    if (email.primary) {
      throw new BadRequestException(`You can't delete your primary email`)
    }
    return this.data.email.delete({ where: { id: userEmailId } })
  }

  accountUpdateProfile(userId: string, input: AccountUpdateProfileInput) {
    return this.data.user.update({
      where: { id: userId },
      data: {
        avatarUrl: input.avatarUrl,
        firstName: input.firstName,
        lastName: input.lastName,
        bio: input.bio,
        phone: input.phone,
      },
    })
  }

  async accountUpdateUsername(userId: string, username: string) {
    const available = await this.accountUsernameAvailable(userId, username)

    if (!available) {
      throw new BadRequestException(`Username ${username} is not available`)
    }

    return this.data.user.update({ where: { id: userId }, data: { username } })
  }

  async accountUsernameAvailable(userId: string, username: string): Promise<boolean> {
    const denied = await this.data.usernameDenyList(username)

    if (denied) {
      throw new BadRequestException(`Username ${username} is not available`)
    }

    const count = await this.data.user.count({
      where: { username },
    })
    return count === 0
  }

  async userEmailOwner(userId: string, userEmailId: string) {
    const owner = await this.data.email.findUnique({ where: { id: userEmailId } }).owner()
    if (owner.id !== userId) {
      throw new UnauthorizedException()
    }
    return owner
  }

  async updateUserEmail(userId: string, userEmailId: string, input: Prisma.EmailUpdateInput) {
    await this.userEmailOwner(userId, userEmailId)
    return this.data.email.update({ where: { id: userEmailId }, data: { ...input } })
  }

  async accountMarkEmailPrivate(userId: string, userEmailId: string) {
    return this.updateUserEmail(userId, userEmailId, { public: false })
  }

  async accountMarkEmailPublic(userId: string, userEmailId: string) {
    return this.updateUserEmail(userId, userEmailId, { public: true })
  }

  async accountMarkEmailPrimary(userId: string, userEmailId: string) {
    // Check if we are the owner
    await this.userEmailOwner(userId, userEmailId)
    // Mark all emails as non primary
    await this.data.email.updateMany({
      where: { owner: { id: userId } },
      data: { primary: false },
    })
    // Mark the chosen one
    return this.updateUserEmail(userId, userEmailId, { primary: true })
  }

  async accountResetPassword(userId: string) {
    const emails = await this.accountEmails(userId)
    const primary = emails.find((email) => email.primary)

    if (!primary) {
      throw new BadRequestException(`Could not find primary email for user with id ${userId}`)
    }
    Logger.verbose(`TODO: Implement Account Reset Password`)
    // await this.auth.forgotPassword(primary.email)
    return true
  }

  async accountUpdatePassword(userId: string, input: AccountUpdatePasswordInput) {
    const user = await this.data.findUserById(userId)
    // We need to make sure the user provides the correct current password
    await validatePassword(input.currentPassword, user.password)

    // The new password must be the same as the verified new password
    if (input.password !== input.verified) {
      throw new BadRequestException(`Passwords do not match!`)
    }
    // We can now update the password
    await this.data.user.update({ where: { id: userId }, data: { password: hashPassword(input.password) } })
    return true
  }
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/account/feature/src/lib/api-account-feature.module.ts__tmpl__
import { Module } from '@nestjs/common'
import { ApiAccountDataAccessModule } from '@<%= npmScope %>/api/account/data-access'
import { ApiAccountFeatureResolver } from './api-account-feature.resolver'

@Module({
  imports: [ApiAccountDataAccessModule],
  providers: [ApiAccountFeatureResolver],
})
export class ApiAccountFeatureModule {}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/account/feature/src/lib/api-account-feature.resolver.ts__tmpl__
import { UseGuards, ValidationPipe } from '@nestjs/common'
import { Args, Mutation, Query, Resolver } from '@nestjs/graphql'
import {
  AccountCreateEmailInput,
  AccountUpdatePasswordInput,
  AccountUpdateProfileInput,
  ApiAccountDataAccessService,
} from '@<%= npmScope %>/api/account/data-access'
import { CtxUser, GqlAuthGuard } from '@<%= npmScope %>/api/auth/util'
import { Email, User } from '@<%= npmScope %>/api/user/data-access'

@Resolver()
@UseGuards(GqlAuthGuard)
export class ApiAccountFeatureResolver {
  constructor(private readonly service: ApiAccountDataAccessService) {}

  @Query(() => [Email], { nullable: true })
  accountEmails(@CtxUser() user: User) {
    return this.service.accountEmails(user.id)
  }

  @Query(() => User, { nullable: true })
  accountProfile(@CtxUser() user: User) {
    return this.service.accountProfile(user.id)
  }

  @Query(() => Boolean, { nullable: true })
  accountUsernameAvailable(@CtxUser() user: User, @Args('username') username: string) {
    return this.service.accountUsernameAvailable(user.id, username)
  }

  @Mutation(() => Email, { nullable: true })
  accountCreateEmail(@CtxUser() user: User, @Args('input', new ValidationPipe()) input: AccountCreateEmailInput) {
    return this.service.accountCreateEmail(user.id, input)
  }

  @Mutation(() => Email, { nullable: true })
  accountDeleteEmail(@CtxUser() user: User, @Args('emailId') emailId: string) {
    return this.service.accountDeleteEmail(user.id, emailId)
  }

  @Mutation(() => Email, { nullable: true })
  accountMarkEmailPrimary(@CtxUser() user: User, @Args('emailId') emailId: string) {
    return this.service.accountMarkEmailPrimary(user.id, emailId)
  }

  @Mutation(() => Email, { nullable: true })
  accountMarkEmailPrivate(@CtxUser() user: User, @Args('emailId') emailId: string) {
    return this.service.accountMarkEmailPrivate(user.id, emailId)
  }

  @Mutation(() => Email, { nullable: true })
  accountMarkEmailPublic(@CtxUser() user: User, @Args('emailId') emailId: string) {
    return this.service.accountMarkEmailPublic(user.id, emailId)
  }

  @Mutation(() => User, { nullable: true })
  accountUpdateProfile(@CtxUser() user: User, @Args('input', new ValidationPipe()) input: AccountUpdateProfileInput) {
    return this.service.accountUpdateProfile(user.id, input)
  }

  @Mutation(() => User, { nullable: true })
  accountUpdateUsername(@CtxUser() user: User, @Args('username') username: string) {
    return this.service.accountUpdateUsername(user.id, username)
  }

  @Mutation(() => Boolean, { nullable: true })
  accountResetPassword(@CtxUser() user: User) {
    return this.service.accountResetPassword(user.id)
  }

  @Mutation(() => Boolean, { nullable: true })
  accountUpdatePassword(@CtxUser() user: User, @Args('input', new ValidationPipe()) input: AccountUpdatePasswordInput) {
    return this.service.accountUpdatePassword(user.id, input)
  }
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-crud/files/feature/src/lib/__projectName__-admin.resolver.ts__tmpl__
import { Args, Mutation, Query, Resolver, Info } from '@nestjs/graphql'
import { UseGuards } from '@nestjs/common'
import { GraphQLResolveInfo } from 'graphql'
import {
  <%= apiClassName %><%= modelClassName %>DataAccessAdminService,
} from '<%= npmScope %>/<%= directory %>/<%= modelName %>/data-access'
import {
  <%= modelClassName %>,
  AdminCreate<%= modelClassName %>Input,
  AdminList<%= modelClassName %>Input,
  AdminUpdate<%= modelClassName %>Input,
  User,
 CorePaging
} from '<%= npmScope %>/<%= directory %>/core/data-access'
import {
  CtxUser,
  GqlAuthAdminGuard,
} from '<%= npmScope %>/<%= directory %>/auth/util'

@Resolver()
@UseGuards(GqlAuthAdminGuard)
export class <%= projectClassName %>AdminResolver {
  constructor(private readonly service: <%= apiClassName %><%= modelClassName %>DataAccessAdminService) {}

  @Query(() => [<%= modelClassName %>], { nullable: true })
  admin<%= pluralClassName %>(
    @Info() info: GraphQLResolveInfo,
    @Args({ name: 'input', type: () => AdminList<%= modelClassName %>Input, nullable: true }) input?: AdminList<%= modelClassName %>Input,
  ) {
    return this.service.admin<%= pluralClassName %>(info, input)
  }

  @Query(() => CorePaging, { nullable: true })
  adminCount<%= pluralClassName %>(
    @Args({ name: 'input', type: () => AdminList<%= modelClassName %>Input, nullable: true }) input?: AdminList<%= modelClassName %>Input,
  ) {
    return this.service.adminCount<%= pluralClassName %>(input)
  }

  @Query(() => <%= modelClassName %>, { nullable: true })
  admin<%= modelClassName %>(@CtxUser() admin: User, @Info() info: GraphQLResolveInfo, @Args('<%= modelPropertyName %>Id') <%= modelPropertyName %>Id: string) {
    return this.service.admin<%= modelClassName %>(info, <%= modelPropertyName %>Id)
  }

  @Mutation(() => <%= modelClassName %>, { nullable: true })
  adminCreate<%= modelClassName %>(@CtxUser() admin: User, @Info() info: GraphQLResolveInfo,@Args('input') input: AdminCreate<%= modelClassName %>Input,) {
    return this.service.adminCreate<%= modelClassName %>(info, input)
  }

  @Mutation(() => <%= modelClassName %>, { nullable: true })
  adminUpdate<%= modelClassName %>(
    @Info() info: GraphQLResolveInfo,
    @Args('<%= modelPropertyName %>Id') <%= modelPropertyName %>Id: string,
    @Args('input') input: AdminUpdate<%= modelClassName %>Input,
  ) {
    return this.service.adminUpdate<%= modelClassName %>(info, <%= modelPropertyName %>Id, input)
  }

  @Mutation(() => <%= modelClassName %>, { nullable: true })
  adminDelete<%= modelClassName %>(@Args('<%= modelPropertyName %>Id') <%= modelPropertyName %>Id: string) {
    return this.service.adminDelete<%= modelClassName %>(<%= modelPropertyName %>Id)
  }
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-crud/files/feature/src/lib/__projectName__-public.resolver.ts__tmpl__
import { Resolver } from '@nestjs/graphql'
import { <%= apiClassName %><%= modelClassName %>DataAccessPublicService } from '<%= npmScope %>/<%= directory %>/<%= modelName %>/data-access'
import { <%= modelClassName %> } from "@muzebook/api/core/data-access";

@Resolver(() => <%= modelClassName %>)
export class <%= projectClassName %>PublicResolver {
  constructor(private readonly service: <%= apiClassName %><%= modelClassName %>DataAccessPublicService) {}
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-crud/files/feature/src/lib/__projectName__-user.resolver.ts__tmpl__
import { Args, Mutation, Query, Resolver, Info } from '@nestjs/graphql'
import { GraphQLResolveInfo } from 'graphql'
import {
  <%= apiClassName %><%= modelClassName %>DataAccessUserService,
} from '<%= npmScope %>/<%= directory %>/<%= modelName %>/data-access'
import {
  User,
  <%= modelClassName %>,
  UserCreate<%= modelClassName %>Input,
  UserList<%= modelClassName %>Input,
  UserUpdate<%= modelClassName %>Input,
  CorePaging
} from '<%= npmScope %>/<%= directory %>/core/data-access'
import { CtxUser, GqlAuthGuard } from '<%= npmScope %>/<%= directory %>/auth/util'
import { UseGuards } from '@nestjs/common'

@Resolver()
@UseGuards(GqlAuthGuard)
export class <%= projectClassName %>UserResolver {
  constructor(private readonly service: <%= apiClassName %><%= modelClassName %>DataAccessUserService) {}

  @Query(() => [<%= modelClassName %>], { nullable: true })
  user<%= pluralClassName %>(
    @Info() info: GraphQLResolveInfo,
    @Args({ name: 'input', type: () => UserList<%= modelClassName %>Input, nullable: true }) input?: UserList<%= modelClassName %>Input,
  ) {
    return this.service.user<%= pluralClassName %>(info, input)
  }

  @Query(() => CorePaging, { nullable: true })
  userCount<%= pluralClassName %>(
    @Args({ name: 'input', type: () => UserList<%= modelClassName %>Input, nullable: true }) input?: UserList<%= modelClassName %>Input,
  ) {
    return this.service.userCount<%= pluralClassName %>(input)
  }

  @Query(() => <%= modelClassName %>, { nullable: true })
  user<%= modelClassName %>( @Info() info: GraphQLResolveInfo, @Args('<%= modelPropertyName %>Id') <%= modelPropertyName %>Id: string) {
    return this.service.user<%= modelClassName %>(info, <%= modelPropertyName %>Id)
  }
  @Mutation(() => <%= modelClassName %>, { nullable: true })
  userCreate<%= modelClassName %>( @Info() info: GraphQLResolveInfo, @Args('input') input: UserCreate<%= modelClassName %>Input,) {
    return this.service.userCreate<%= modelClassName %>(info, input)
  }

  @Mutation(() => <%= modelClassName %>, { nullable: true })
  userUpdate<%= modelClassName %>(
    @Info() info: GraphQLResolveInfo,
    @Args('<%= modelPropertyName %>Id') <%= modelPropertyName %>Id: string,
    @Args('input') input: UserUpdate<%= modelClassName %>Input,
  ) {
    return this.service.userUpdate<%= modelClassName %>(info, <%= modelPropertyName %>Id, input)
  }

  @Mutation(() => <%= modelClassName %>, { nullable: true })
  userDelete<%= modelClassName %>(@Args('<%= modelPropertyName %>Id') <%= modelPropertyName %>Id: string) {
    return this.service.userDelete<%= modelClassName %>(<%= modelPropertyName %>Id)
  }
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-crud/files/feature/src/lib/__projectName__.module.ts__tmpl__
import { Module } from '@nestjs/common'
import { <%= apiClassName %><%= modelClassName %>DataAccessModule } from '<%= npmScope %>/<%= directory %>/<%= modelName %>/data-access'

import { <%= projectClassName %>AdminResolver } from './<%= projectName %>-admin.resolver'
import { <%= projectClassName %>PublicResolver } from './<%= projectName %>-public.resolver'
import { <%= projectClassName %>UserResolver } from './<%= projectName %>-user.resolver'

@Module({
  imports: [<%= apiClassName %><%= modelClassName %>DataAccessModule],
  providers: [<%= projectClassName %>AdminResolver, <%= projectClassName %>PublicResolver, <%= projectClassName %>UserResolver],
})
export class <%= projectClassName %>Module {}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/auth/data-access/src/lib/api-auth-data-access.helper.ts__tmpl__
import { compareSync, hashSync } from 'bcryptjs'
import { createHash } from 'crypto'
import { Request } from 'express'

const getHash = (str) => createHash('md5').update(str).digest('hex')

export const getGravatarUrl = (email = '') => {
  const gravatarUrl = 'https://www.gravatar.com/avatar/'
  const gravatarSize = 460
  return `${gravatarUrl}${getHash(email)}?s=${gravatarSize}&d=mp`
}

export function validatePassword(password: string, hashedPassword: string): boolean {
  return compareSync(password, hashedPassword)
}

export function hashPassword(password: string): string {
  return hashSync(password, 10)
}

export function generateMd5Hash(input: string): string {
  return getHash(input)
}

export function generateToken() {
  return generateMd5Hash(randomId(24))
}

export function generateExpireDate(days = 1) {
  return new Date(Date.now() + 60 * 60 * 24 * 1000 * days)
}

export function randomId(length = 8): string {
  return new Date().getTime().toString().substr(0, length)
}

export function rand(items) {
  return items[Math.floor(Math.random() * items.length)]
}

export function uniqueSuffix(input, length = 5) {
  const suffix = generateMd5Hash(Date.now() + input).slice(0, length)
  return `${input}-${suffix}`
}

export function cookieExtractor(req: Request) {
  const name = process.env.API_COOKIE_NAME || '__session'
  return req?.cookies?.[name] ? req.cookies[name] : undefined
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/auth/data-access/src/lib/api-auth-data-access.module.ts__tmpl__
import { ApiCoreDataAccessModule } from '@<%= npmScope %>/api/core/data-access'
import { ApiCoreFeatureModule } from '@<%= npmScope %>/api/core/feature'
import { Module } from '@nestjs/common'
import { HttpModule } from '@nestjs/axios'
import { JwtModule } from '@nestjs/jwt'
import { PassportModule } from '@nestjs/passport'
import { ApiAuthDataAccessService } from './api-auth-data-access.service'
import { JwtStrategy } from './strategies/jwt.strategy'
import { ApiMailerDataAccessModule } from '@<%= npmScope %>/api/mailer/data-access'

@Module({
  imports: [
    ApiCoreDataAccessModule,
    ApiCoreFeatureModule,
    ApiMailerDataAccessModule,
    PassportModule.register({ defaultStrategy: 'jwt' }),
    HttpModule,
    JwtModule.register({
      secret: process.env.JWT_SECRET,
    }),
  ],
  exports: [ApiAuthDataAccessService],
  providers: [ApiAuthDataAccessService, JwtStrategy],
})
export class ApiAuthDataAccessModule {}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/auth/data-access/src/lib/api-auth-data-access.service.ts__tmpl__
import { BadRequestException, Injectable, Logger, NotFoundException } from '@nestjs/common'
import { JwtService } from '@nestjs/jwt'
import { ApiCoreDataAccessService } from '@<%= npmScope %>/api/core/data-access'
import { ApiCoreFeatureService } from '@<%= npmScope %>/api/core/feature'
import { Response } from 'express'
import {
  generateExpireDate,
  generateToken,
  getGravatarUrl,
  hashPassword,
  validatePassword,
} from './api-auth-data-access.helper'
import { LoginInput } from './dto/login.input'
import { RegisterInput } from './dto/register.input'
import { UserToken } from './models/user-token'
import { UserCreateInput } from './dto/user-create.input'
import { Prisma } from '@prisma/client'
import { ApiMailerDataAccessService } from '@<%= npmScope %>/api/mailer/data-access'
import { passwordResetEmail } from './templates/password-reset-email.template'
import { Role, User } from '@<%= npmScope %>/api/user/data-access'

@Injectable()
export class ApiAuthDataAccessService {
  constructor(
    private readonly data: ApiCoreDataAccessService,
    private readonly core: ApiCoreFeatureService,
    private readonly jwtService: JwtService,
    private readonly mailer: ApiMailerDataAccessService,
  ) {}

  async createUser(input: Partial<UserCreateInput>) {
    const password = input.password
    const hashedPassword = hashPassword(password)
    const email = input.email.trim()
    const displayName = input.displayName || `${input.firstName} ${input.lastName}`.trim() || email

    return this.data.user
      .create({
        data: {
          firstName: input.firstName,
          lastName: input.lastName,
          emails: { create: { email, primary: true } },
          phone: input.phone,
          displayName,
          avatarUrl: input.avatarUrl || getGravatarUrl(input.email.toLowerCase()),
          password: hashedPassword,
          role: Role.User,
        },
      })
      .catch((e) => {
        if (e instanceof Prisma.PrismaClientKnownRequestError) {
          if (e.code === 'P2002') {
            throw new BadRequestException('This email is already in use')
          }
        }
      })
  }

  async register(payload: RegisterInput) {
    const user = await this.createUser({
      ...payload,
    })

    return this.signUser(user)
  }

  async login(input: LoginInput) {
    Logger.warn({ input })
    const email = input.email.trim()
    const password = input.password.trim()
    const user = await this.findUserByEmail(email)
    Logger.log({ user })

    if (!user) {
      throw new NotFoundException(`No user found for email: ${email}`)
    }

    const passwordValid = await validatePassword(password, user.password)

    if (!passwordValid) {
      throw new BadRequestException('Invalid password')
    }

    return this.signUser(user)
  }

  async forgotPassword(email: string): Promise<boolean> {
    const user = await this.findUserByEmail(email)

    if (!user) {
      Logger.warn(`Forgot password reset for non-existing user ${email}`)
      throw new Error(`${email} is not a user`)
    }

    const passwordResetToken = generateToken()
    const passwordResetExpires = generateExpireDate()

    await this.data.user.update({
      where: { id: user.id },
      data: { passwordResetToken, passwordResetExpires },
    })
    await this.mailer.send(passwordResetEmail({ email: email, firstName: user.firstName, passwordResetToken }))
    return true
  }

  async resetPassword(password: string, token: string): Promise<User> {
    const user = await this.data.user.findFirst({ where: { passwordResetToken: token } })

    if (!user) {
      Logger.warn(`There is no user associated with the password reset token ${token}`)
      throw new Error(`This token has been used or is invalid.`)
    }

    if (user.passwordResetExpires.valueOf() < new Date(Date.now()).valueOf()) {
      Logger.warn(`PasswordResetToken ${token} expired on ${user.passwordResetExpires}.`)
      throw new Error(`Your password reset token has expired.`)
    }

    const hashedPassword = hashPassword(password)
    return this.data.user.update({
      where: { id: user.id },
      data: {
        passwordResetToken: null,
        passwordResetExpires: null,
        password: hashedPassword,
      },
    })
  }

  signUser(user): UserToken {
    const token = this.jwtService.sign({ userId: user?.id })
    return { token, user }
  }

  validateUser(userId: string) {
    return this.findUserById(userId)
  }

  getUserFromToken(token: string) {
    const userId = this.jwtService.decode(token)['userId']

    return this.findUserById(userId)
  }

  public findUserByEmail(email: string) {
    return this.data.email.findUnique({ where: { email } }).owner({ include: { emails: true } })
  }

  public findUserById(userId: string) {
    return this.data.user.findUnique({ where: { id: userId } })
  }

  public findUserByUsername(username: string) {
    return this.data.user.findUnique({ where: { username } })
  }

  public setCookie(res: Response, token: string) {
    return res?.cookie(this.core.cookie.name, token, this.core.cookie.options)
  }

  public clearCookie(res: Response) {
    return res.clearCookie(this.core.cookie.name, this.core.cookie.options)
  }
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/auth/feature/src/lib/api-auth-feature.module.ts__tmpl__
import { Module } from '@nestjs/common'
import { ApiAuthDataAccessModule } from '@<%= npmScope %>/api/auth/data-access'
import { ApiAuthFeatureResolver } from './api-auth-feature.resolver'

@Module({
  imports: [ApiAuthDataAccessModule],
  providers: [ApiAuthFeatureResolver],
})
export class ApiAuthFeatureModule {}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/auth/feature/src/lib/api-auth-feature.resolver.ts__tmpl__
import {
  ApiAuthDataAccessService,
  ForgotPasswordInput,
  LoginInput,
  RegisterInput,
  ResetPasswordInput,
  UserToken,
} from '@<%= npmScope %>/api/auth/data-access'
import { Args, Context, Mutation, Parent, Query, ResolveField, Resolver } from '@nestjs/graphql'
import { Logger, UseGuards } from '@nestjs/common'
import { CtxUser, GqlAuthGuard } from '@<%= npmScope %>/api/auth/util'
import { User } from '@<%= npmScope %>/api/user/data-access'

@Resolver(() => UserToken)
export class ApiAuthFeatureResolver {
  constructor(private readonly service: ApiAuthDataAccessService) {}

  @Query(() => User, { nullable: true })
  @UseGuards(GqlAuthGuard)
  async me(@CtxUser() user: User) {
    return user
  }

  @Mutation(() => UserToken, { nullable: true })
  async login(@Context() context, @Args('input') input: LoginInput) {
    Logger.log('login', input)
    const userToken = await this.service.login(input)
    this.service.setCookie(context.res, userToken.token)
    return userToken
  }

  @Mutation(() => Boolean, { nullable: true })
  async logout(@Context() context) {
    Logger.log('logout')
    this.service.clearCookie(context.res)
    return true
  }

  @Mutation(() => UserToken, { nullable: true })
  async register(@Context() context, @Args('input') input: RegisterInput) {
    Logger.log('register', input)
    const userToken = await this.service.register(input)
    this.service.setCookie(context.res, userToken.token)
    return userToken
  }

  @Mutation(() => Boolean, { nullable: true })
  forgotPassword(@Args('input') input: ForgotPasswordInput): Promise<boolean> {
    return this.service.forgotPassword(input.email)
  }

  @Mutation(() => User, { nullable: true })
  resetPassword(@Args('input') input: ResetPasswordInput): Promise<User> {
    return this.service.resetPassword(input.password, input.token)
  }

  @ResolveField('user')
  user(@Parent() auth: UserToken) {
    return this.service.getUserFromToken(auth.token)
  }
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/core/data-access/src/lib/api-core-data-access.module.ts__tmpl__
import { Module } from '@nestjs/common'

import { ApiCoreDataAccessService } from './api-core-data-access.service'

@Module({
  providers: [ApiCoreDataAccessService],
  exports: [ApiCoreDataAccessService],
})
export class ApiCoreDataAccessModule {}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/core/data-access/src/lib/api-core-data-access.service.ts__tmpl__
import { BadRequestException, Injectable, OnModuleDestroy, OnModuleInit } from '@nestjs/common'
import { PrismaClient, Role } from '@prisma/client'

@Injectable()
export class ApiCoreDataAccessService extends PrismaClient implements OnModuleInit, OnModuleDestroy {
  constructor() {
    super()
  }

  public async onModuleDestroy() {
    await this.$disconnect()
  }

  public async onModuleInit() {
    await this.$connect()
  }

 search(conditions: any[], searchQuery: string, searchFields: string[]) {
     const query = searchQuery.trim()
     const terms: string[] = query?.includes(' ') ? query.split(' ') : [query].filter(Boolean)
     const searchFilters = terms.map((term) => ({
       OR: searchFields.map((field) => ({ [field]: { contains: term, mode: Prisma.QueryMode.insensitive } })),
     }))

     conditions.push(...searchFilters)
     return conditions
   }

   async countEntitiesWithPagination<W extends Prisma.Enumerable<object>>(
     countFunction: (args: { where?: W }) => Promise<number>,
     whereQuery: W,
     pagination: { take?: number; skip?: number },
   ): Promise<CorePaging> {
     const where = whereQuery
     const total = await countFunction({})
     const count = await countFunction({ where })
     const { take = 10, skip = 0 } = pagination

     const page = Math.ceil(skip / take)

     return {
       take,
       skip,
       page,
       count,
       total,
     }
   }
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/core/data-access/src/prisma/seed.ts__tmpl__
import { PrismaClient } from '@prisma/client'
import { countries } from './seed-data/iso-3166-countries'
import { seedUsers } from './seed-data/seed-users';

const prisma = new PrismaClient()
async function main() {
  for (const country of countries) {
    await prisma.country.upsert({
      where: { alpha2: country['alpha-2'] },
      update: {},
      create: {
        name: country.name,
        alpha2: country['alpha-2'],
        alpha3: country['alpha-3'],
        countryCode: country['country-code'],
        iso3166_2: country['iso_3166-2'],
        region: country.region,
        subRegion: country['sub-region'],
        intermediateRegion: country['intermediate-region'],
        regionCode: country['region-code'],
        subRegionCode: country['sub-region-code'],
        intermediateRegionCode: country['intermediate-region-code'],
      },
    })
  }
  for (const user of seedUsers) {
    await prisma.user.upsert({
      where: { id: user.id },
      update: {},
      create: {
        firstName: user.firstName,
        lastName: user.lastName,
        displayName: user.displayName,
        emails: {
          create: {
            email: user.email,
            primary: true,
          },
        },
        password: user.password,
        role: user.role,
      },
    })
  }
}
main()
  .then(async () => {
    await prisma.$disconnect()
  })
  .catch(async (e) => {
    console.error(e)
    await prisma.$disconnect()
    process.exit(1)
  })


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/auth/util/src/lib/api-auth-util.module.ts__tmpl__
import { Module } from '@nestjs/common'

@Module({
  controllers: [],
  providers: [],
  exports: [],
})
export class ApiAuthUtilModule {}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/user/data-access/src/lib/api-user-data-access.module.ts__tmpl__
import { Module } from '@nestjs/common'
import { ApiCoreDataAccessModule } from '@<%= npmScope %>/api/core/data-access'
import { ApiUserDataAccessService } from './api-user-data-access.service'

@Module({
  imports: [ApiCoreDataAccessModule],
  providers: [ApiUserDataAccessService],
  exports: [ApiUserDataAccessService],
})
export class ApiUserDataAccessModule {}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/user/data-access/src/lib/api-user-data-access.service.ts__tmpl__
import { Injectable } from '@nestjs/common'
import { ApiCoreDataAccessService, CorePaging, CorePagingInput } from '@<%= npmScope %>/api/core/data-access'
import { getGravatarUrl, hashPassword, uniqueSuffix } from '@<%= npmScope %>/api/auth/data-access'
import { AdminCreateUserInput } from './dto/admin-create-user.input'
import { AdminUpdateUserInput } from './dto/admin-update-user.input'

@Injectable()
export class ApiUserDataAccessService {
  constructor(private readonly data: ApiCoreDataAccessService) {}

  async adminUsers(userId: string, paging: CorePagingInput) {
    await this.data.ensureAdminUser(userId)
    return this.data.user.findMany({
      take: paging.limit,
      skip: paging.skip,
      include: { emails: true },
    })
  }

  async adminCountUsers(adminId: string, paging: CorePagingInput): Promise<CorePaging> {
    await this.data.ensureAdminUser(adminId)
    const total = await this.data.user.count()
    return {
      limit: paging.limit,
      skip: paging.skip,
      total,
    }
  }

  async adminUser(adminId: string, userId: string) {
    await this.data.ensureAdminUser(adminId)
    return this.data.user.findUnique({ where: { id: userId }, include: { emails: true } })
  }

  async adminCreateUser(adminId: string, input: AdminCreateUserInput) {
    await this.data.ensureAdminUser(adminId)
    const email = input.email.trim()
    const avatarUrl = getGravatarUrl(email)
    const displayName = input.displayName || `${input.firstName} ${input.lastName}`.trim() || email

    return this.data.user.create({
      data: {
        emails: { create: { email, primary: true } },
        role: input.role,
        firstName: input.firstName,
        lastName: input.lastName,
        avatarUrl,
        displayName,
      },
      include: { emails: true },
    })
  }

  async adminUpdateUser(adminId: string, userId: string, input: AdminUpdateUserInput) {
    await this.data.ensureAdminUser(adminId)
    return this.data.user.update({
      where: { id: userId },
      data: { ...input },
      include: { emails: true },
    })
  }

  async adminSetUserPassword(adminId: string, userId: string, password: string) {
    await this.data.ensureAdminUser(adminId)
    return this.data.user.update({
      where: { id: userId },
      data: { password: hashPassword(password) },
    })
  }

  async adminDeleteUser(adminId: string, userId: string) {
    await this.data.ensureAdminUser(adminId)
    return this.data.user.delete({ where: { id: userId } })
  }

  private formatUsername(email: string, username?: string): string {
    return username?.trim() || uniqueSuffix(email.trim().split('@')[0])
  }

  private async ensureUsernameAvailable(username: string): Promise<boolean> {
    const user = await this.data.findUserByUsername(username)
    if (user) {
      throw new Error(`This username is not available`)
    }
    return true
  }
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/core/feature/src/lib/api-core-feature.controller.ts__tmpl__
import { Controller, Get } from '@nestjs/common'
import { ApiCoreFeatureService } from './api-core-feature.service'

@Controller()
export class ApiCoreFeatureController {
  constructor(private readonly service: ApiCoreFeatureService) {}

  @Get('uptime')
  uptime() {
    return this.service.uptime()
  }
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/core/feature/src/lib/api-core-feature.module.ts__tmpl__
import { ApolloDriver, ApolloDriverConfig } from '@nestjs/apollo'
import { Module } from '@nestjs/common'
import { ConfigModule } from '@nestjs/config'
import { GraphQLModule } from '@nestjs/graphql'
import { PubSub } from 'graphql-subscriptions'
import { join } from 'path'

import { configuration } from './config/configuration'
import { validationSchema } from './config/validation'
import { ApiCoreFeatureController } from './api-core-feature.controller'
import { ApiCoreFeatureResolver } from './api-core-feature.resolver'
import { ApiCoreFeatureService } from './api-core-feature.service'

@Module({
  imports: [
    ConfigModule.forRoot({
      isGlobal: true,
      load: [configuration],
      validationSchema,
    }),
    GraphQLModule.forRoot<ApolloDriverConfig>({
      driver: ApolloDriver,
      autoSchemaFile: join(process.cwd(), 'api-schema.graphql'),
      context: ({ req, res }) => ({ req, res }),
      installSubscriptionHandlers: true,
      sortSchema: true,
    }),
  ],
  controllers: [ApiCoreFeatureController],
  providers: [ApiCoreFeatureResolver, ApiCoreFeatureService],
  exports: [ApiCoreFeatureService],
})
export class ApiCoreFeatureModule {}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/core/feature/src/lib/api-core-feature.resolver.ts__tmpl__
import { Float, Query, Resolver } from '@nestjs/graphql'
import { ApiCoreFeatureService } from './api-core-feature.service'

@Resolver()
export class ApiCoreFeatureResolver {
  constructor(private readonly service: ApiCoreFeatureService) {}

  @Query(() => Float, { nullable: true })
  uptime() {
    return this.service.uptime()
  }
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/core/feature/src/lib/api-core-feature.service.ts__tmpl__
import { Injectable } from '@nestjs/common'
import { ConfigService } from '@nestjs/config'
import { CookieOptions } from 'express'

@Injectable()
export class ApiCoreFeatureService {
  constructor(public readonly config: ConfigService) {}

  uptime(): number {
    return process.uptime()
  }

  get apiUrl(): string {
    return this.config.get('apiUrl')
  }

  get apiCorsOrigins(): string[] {
    return this.config.get('api.cors.origin')
  }

  get cookie(): { name: string; options: CookieOptions } {
    return this.config.get('api.cookie')
  }

  get appEmail() {
    return this.config.get('app.email')
  }

  get appSupportEmail() {
    return this.config.get('app.supportEmail')
  }

  get appAdminEmails() {
    return this.config.get('app.adminEmails')
  }

  get appName() {
    return this.config.get('app.name')
  }

  get siteUrl(): string {
    return this.config.get('siteUrl')
  }

  get mailerConfig() {
    return {
      host: this.config.get('smtp.host'),
      port: this.config.get('smtp.port'),
      auth: {
        user: this.config.get('smtp.user'),
        pass: this.config.get('smtp.pass'),
      },
    }
  }
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/user/feature/src/lib/api-user-feature-admin.resolver.ts__tmpl__
import { Args, Mutation, Query, Resolver } from '@nestjs/graphql'
import { UseGuards } from '@nestjs/common'
import { CorePaging, CorePagingInput } from '@<%= npmScope %>/api/core/data-access'
import { CtxUser, GqlAuthAdminGuard } from '@<%= npmScope %>/api/auth/util'
import {
  AdminCreateUserInput,
  AdminUpdateUserInput,
  ApiUserDataAccessService,
  User,
} from '@<%= npmScope %>/api/user/data-access'

@Resolver()
@UseGuards(GqlAuthAdminGuard)
export class ApiUserFeatureAdminResolver {
  constructor(private readonly service: ApiUserDataAccessService) {}

  @Query(() => [User], { nullable: true })
  adminUsers(
    @CtxUser() admin: User,
    @Args({ name: 'paging', type: () => CorePagingInput, nullable: true }) paging?: CorePagingInput,
  ) {
    return this.service.adminUsers(admin.id, paging)
  }

  @Query(() => CorePaging, { nullable: true })
  adminCountUsers(
    @CtxUser() admin: User,
    @Args({ name: 'paging', type: () => CorePagingInput, nullable: true }) paging?: CorePagingInput,
  ) {
    return this.service.adminCountUsers(admin.id, paging)
  }

  @Query(() => User, { nullable: true })
  adminUser(@CtxUser() admin: User, @Args('userId') userId: string) {
    return this.service.adminUser(admin.id, userId)
  }

  @Mutation(() => User, { nullable: true })
  adminCreateUser(@CtxUser() admin: User, @Args('input') input: AdminCreateUserInput) {
    return this.service.adminCreateUser(admin.id, input)
  }

  @Mutation(() => User, { nullable: true })
  adminUpdateUser(@CtxUser() admin: User, @Args('userId') userId: string, @Args('input') input: AdminUpdateUserInput) {
    return this.service.adminUpdateUser(admin.id, userId, input)
  }

  @Mutation(() => User, { nullable: true })
  adminSetUserPassword(@CtxUser() admin: User, @Args('userId') userId: string, @Args('password') password: string) {
    return this.service.adminSetUserPassword(admin.id, userId, password)
  }

  @Mutation(() => User, { nullable: true })
  adminDeleteUser(@CtxUser() admin: User, @Args('userId') userId: string) {
    return this.service.adminDeleteUser(admin.id, userId)
  }
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/user/feature/src/lib/api-user-feature.module.ts__tmpl__
import { Module } from '@nestjs/common'
import { ApiUserDataAccessModule } from '@<%= npmScope %>/api/user/data-access'
import { ApiUserFeatureAdminResolver } from './api-user-feature-admin.resolver'
import { ApiUserFeatureResolver } from './api-user-feature.resolver'

@Module({
  imports: [ApiUserDataAccessModule],
  providers: [ApiUserFeatureResolver, ApiUserFeatureAdminResolver],
})
export class ApiUserFeatureModule {}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/user/feature/src/lib/api-user-feature.resolver.ts__tmpl__
import { Parent, ResolveField, Resolver } from '@nestjs/graphql'
import { User } from '@<%= npmScope %>/api/user/data-access'

@Resolver(() => User)
export class ApiUserFeatureResolver {
  @ResolveField(() => String, { nullable: true })
  name(@Parent() user: User) {
    const name = [user?.firstName, user?.lastName].join(' ').trim()
    return name.length ? name : user?.displayName
  }

  @ResolveField(() => String, { nullable: true })
  email(@Parent() user: User) {
    const hasPrimary = user.emails?.find((email) => email.primary)

    return hasPrimary ? hasPrimary.email : user.emails?.find((e) => e).email
  }
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/mailer/data-access/src/lib/api-mailer-data-access.module.ts__tmpl__
import { Module } from '@nestjs/common'
import { ApiMailerDataAccessService } from './api-mailer-data-access.service'
import { ApiCoreFeatureModule } from '@<%= npmScope %>/api/core/feature'

@Module({
  imports: [ApiCoreFeatureModule],
  providers: [ApiMailerDataAccessService],
  exports: [ApiMailerDataAccessService],
})
export class ApiMailerDataAccessModule {}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/mailer/data-access/src/lib/api-mailer-data-access.service.ts__tmpl__
import { Injectable, Logger } from '@nestjs/common'
import { createTransport } from 'nodemailer'
import * as Mail from 'nodemailer/lib/mailer'
import { ApiCoreFeatureService } from '@<%= npmScope %>/api/core/feature'

export type PreparedMailer = (params: MailerParams) => PreparedMail

export interface MailerParams {
  appEmail: string
  appName: string
  siteUrl: string
}

export interface PreparedMail {
  label: string
  email: string
  html: string
  text: string
  subject: string
}

@Injectable()
export class ApiMailerDataAccessService {
  private readonly logger = new Logger('ApiMailerService')
  private readonly mailer: Mail
  private readonly appEmail: string
  private readonly appName: string
  private readonly appSupportEmail: string
  private readonly siteUrl: string

  constructor(private readonly config: ApiCoreFeatureService) {
    this.mailer = createTransport(this.config.mailerConfig)
    this.appEmail = this.config.appEmail
    this.appName = this.config.appName
    this.appSupportEmail = this.config.appSupportEmail
    this.siteUrl = this.config.siteUrl
  }

  async send(mailer: PreparedMailer) {
    const { email, html, label, subject, text } = mailer({
      appEmail: this.appEmail,
      appName: this.appName,
      siteUrl: this.siteUrl,
    })

    const from = `${this.appName} <${this.appEmail}>`
    const res = await this.mailer.sendMail({ to: email, from, subject, html, text })
    this.logger.verbose(`sendPreparedMail ${label} result: ${res.response} ${res.messageId}`)
    return res
  }
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-crud/files/data-access/src/lib/dto/admin-create-__modelName__.input.ts__tmpl__
import { Field, InputType } from '@nestjs/graphql'

@InputType()
export class AdminCreate<%= modelClassName %>Input {
  @Field({nullable: true})
  <%= primaryField %>?: string
}



// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-crud/files/data-access/src/lib/dto/admin-list-__modelName__.input.ts__tmpl__
import { Field, InputType } from '@nestjs/graphql'
import { CorePagingInput } from '<%= npmScope %>/<%= directory %>/core/data-access'

@InputType()
export class AdminList<%= modelClassName %>Input extends CorePagingInput {
  @Field({ nullable: true })
  <%= primaryField %>?: string
}



// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-crud/files/data-access/src/lib/dto/admin-update-__modelName__.input.ts__tmpl__
import { Field, InputType } from '@nestjs/graphql'

@InputType()
export class AdminUpdate<%= modelClassName %>Input {
  @Field({ nullable: true })
  <%= primaryField %>?: string
}



// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-crud/files/data-access/src/lib/dto/user-create-__modelName__.input.ts__tmpl__
import { Field, InputType } from '@nestjs/graphql'

@InputType()
export class UserCreate<%= modelClassName %>Input {
  @Field({nullable: true})
  <%= primaryField %>?: string
}



// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-crud/files/data-access/src/lib/dto/user-list-__modelName__.input.ts__tmpl__
import { Field, InputType } from '@nestjs/graphql'
import { CorePagingInput } from '<%= npmScope %>/<%= directory %>/core/data-access'

@InputType()
export class UserList<%= modelClassName %>Input extends CorePagingInput {
  @Field({ nullable: true })
  <%= primaryField %>?: string
}



// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-crud/files/data-access/src/lib/dto/user-update-__modelName__.input.ts__tmpl__
import { Field, InputType } from '@nestjs/graphql'

@InputType()
export class UserUpdate<%= modelClassName %>Input {
  @Field({ nullable: true })
  <%= primaryField %>?: string
}



// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-crud/files/data-access/src/lib/models/__modelName__.model.ts__tmpl__
import { Field, ObjectType } from '@nestjs/graphql';
<%
let nonDefaultTypes = new Set();
modelFields.forEach(field => {
  let baseType = field.type.replace(/(\[\])$/, ''); // Get base type for arrays
  if (!['string', 'number', 'boolean', 'Date'].includes(baseType)) {
    nonDefaultTypes.add(baseType);
  }
});
const nonDefaultTypesImport = Array.from(nonDefaultTypes).join(', ');
%>
<% if (nonDefaultTypes.size > 0) { %>
import { <%= nonDefaultTypesImport %> } from '@muzebook/api/core/data-access';
<% } %>

@ObjectType()
export class <%= modelClassName %> {
  <% modelFields.forEach(field => { %>
    <% if (field.type.endsWith('[]')) { %>
      @Field(() => [<%= field.type.replace('[]', '') %>], { nullable: true })
      <%= field.name %>?: <%= field.type %>;
    <% } else if (['string', 'number', 'boolean', 'Date'].includes(field.type)) { %>
      @Field({ nullable: true })
      <%= field.name %>?: <%= field.type %>;
    <% } else { %>
      @Field(() => <%= field.type %>, { nullable: true })
      <%= field.name %>?: <%= field.type %>;
    <% } %>
  <% }); %>
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/account/data-access/src/lib/dto/account-create-email.input.ts__tmpl__
import { Field, InputType } from '@nestjs/graphql'
import { IsEmail } from 'class-validator'

@InputType()
export class AccountCreateEmailInput {
  @Field()
  @IsEmail()
  email: string
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/account/data-access/src/lib/dto/account-update-password.input.ts__tmpl__
import { Field, InputType } from '@nestjs/graphql'
import { MinLength } from 'class-validator'

@InputType()
export class AccountUpdatePasswordInput {
  @Field()
  currentPassword?: string

  @Field()
  @MinLength(10)
  password?: string

  @Field()
  @MinLength(10)
  verified?: string
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/account/data-access/src/lib/dto/account-update-profile.input.ts__tmpl__
import { Field, InputType } from '@nestjs/graphql'

@InputType()
export class AccountUpdateProfileInput {
  @Field({ nullable: true })
  firstName?: string

  @Field({ nullable: true })
  lastName?: string

  @Field({ nullable: true })
  avatarUrl?: string

  @Field({ nullable: true })
  bio?: string

  @Field({ nullable: true })
  location?: string

  @Field({ nullable: true })
  phone?: string

  @Field({ nullable: true })
  dob?: Date
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/auth/data-access/src/lib/strategies/jwt.strategy.ts__tmpl__
import { Injectable, UnauthorizedException } from '@nestjs/common'
import { PassportStrategy } from '@nestjs/passport'
import { Request } from 'express'
import { ExtractJwt, Strategy } from 'passport-jwt'
import { ApiAuthDataAccessService } from '../api-auth-data-access.service'
import { JwtDto } from '../dto/jwt.dto'
import { User } from '@<%= npmScope %>/api/user/data-access'

function headerAndCookieExtractor(req: Request): string {
  const token = ExtractJwt.fromAuthHeaderAsBearerToken()(req)
  if (!token) {
    return cookieExtractor(req)
  }
  return token
}

function cookieExtractor(req: Request): string {
  const name = process.env.API_COOKIE_NAME || '__session'
  return req?.cookies?.[name] ? req.cookies[name] : undefined
}

@Injectable()
export class JwtStrategy extends PassportStrategy(Strategy) {
  constructor(private readonly auth: ApiAuthDataAccessService) {
    super({
      jwtFromRequest: headerAndCookieExtractor,
      secretOrKey: process.env.JWT_SECRET,
    })
  }

  async validate(payload: JwtDto): Promise<User> {
    const user = await this.auth.validateUser(payload.userId)
    if (!user) {
      throw new UnauthorizedException()
    }
    return user
  }
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/auth/data-access/src/lib/dto/forgot-password.input.ts__tmpl__
import { Field, InputType } from '@nestjs/graphql'
import { IsNotEmpty } from 'class-validator'

@InputType()
export class ForgotPasswordInput {
  @Field()
  @IsNotEmpty()
  email: string
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/auth/data-access/src/lib/dto/jwt.dto.ts__tmpl__
export interface JwtDto {
  userId: string
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/auth/data-access/src/lib/dto/login.input.ts__tmpl__
import { Field, InputType } from '@nestjs/graphql'
import { IsNotEmpty, MinLength } from 'class-validator'

@InputType()
export class LoginInput {
  @Field()
  @IsNotEmpty()
  email: string

  @Field()
  @IsNotEmpty()
  @MinLength(8)
  password: string

  @Field({ nullable: true })
  remember: boolean
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/auth/data-access/src/lib/dto/register.input.ts__tmpl__
import { IsEmail, IsNotEmpty, MinLength } from 'class-validator'
import { InputType, Field } from '@nestjs/graphql'

@InputType()
export class RegisterInput {
  @Field()
  @IsNotEmpty()
  @IsEmail()
  email: string

  @Field({ nullable: true })
  displayName?: string

  @Field({ nullable: true })
  firstName?: string

  @Field({ nullable: true })
  lastName?: string

  @Field({ nullable: true })
  phone?: string

  @Field({ nullable: true })
  avatarUrl?: string

  @Field()
  @IsNotEmpty()
  @MinLength(8)
  password: string
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/auth/data-access/src/lib/dto/reset-password-input.ts__tmpl__
import { Field, InputType } from '@nestjs/graphql'
import { IsNotEmpty } from 'class-validator'

@InputType()
export class ResetPasswordInput {
  @Field()
  @IsNotEmpty()
  token: string

  @Field()
  @IsNotEmpty()
  password: string
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/auth/data-access/src/lib/dto/reset-password.input.ts__tmpl__
import { Field, InputType } from '@nestjs/graphql'
import { IsNotEmpty } from 'class-validator'

@InputType()
export class ResetPasswordInput {
  @Field()
  @IsNotEmpty()
  token: string

  @Field()
  @IsNotEmpty()
  password: string
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/auth/data-access/src/lib/dto/user-create.input.ts__tmpl__
import { Field, InputType } from '@nestjs/graphql'
import { IsEmail, IsNotEmpty, MinLength } from 'class-validator'

@InputType()
export class UserCreateInput {
  @Field({ nullable: true })
  developer?: boolean

  @Field()
  @IsNotEmpty()
  @IsEmail()
  email: string

  @Field({ nullable: true })
  displayName?: string

  @Field({ nullable: true })
  @IsNotEmpty()
  @MinLength(8)
  password?: string

  @Field({ nullable: true })
  firstName?: string

  @Field({ nullable: true })
  lastName?: string

  @Field({ nullable: true })
  avatarUrl?: string

  @Field({ nullable: true })
  phone?: string
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/auth/data-access/src/lib/models/user-token.ts__tmpl__
import { Field, ObjectType } from '@nestjs/graphql'
import { User } from '@<%= npmScope %>/api/user/data-access'

@ObjectType()
export class UserToken {
  @Field({ description: 'JWT Bearer token' })
  token: string

  @Field(() => User)
  user: User
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/auth/data-access/src/lib/templates/password-reset-email.template.ts__tmpl__
import { MailerParams, PreparedMail, PreparedMailer } from '@<%= npmScope %>/api/mailer/data-access'

export function passwordResetEmail({
  email,
  firstName,
  passwordResetToken,
}: {
  email: string
  firstName: string
  passwordResetToken: string
}): PreparedMailer {
  return ({ appName, siteUrl }: MailerParams): PreparedMail => {
    const subject = `[${appName}] Password reset request`
    const url = `${siteUrl}/reset-password?token=${passwordResetToken}`

    const text = [
      `Hi ${firstName || 'There'},\n`,
      `We received a request to reset your password. If you did not generate this request, you can ignore this email.\n`,
      `If you need to reset your password, just click on the link below.\n`,
      `${url}\n`,
      `Thanks,\n`,
      `The ${appName} Team\n`,
    ].join('')

    const html = [
      `<p>Hi ${firstName || 'There'},</p>`,
      `<p>We received a request to reset your password. If you did not generate this request, you can ignore this email.</p>`,
      `<p>If you need to reset your password, just click on the link below.</p>`,
      `<p><a href="${url}">Click Here to Reset Your Password</a></p>`,
      `<p>Thanks,<br />The ${appName} Team</p>`,
    ].join('')

    return {
      label: 'password-reset-email',
      email,
      subject,
      html,
      text,
    }
  }
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/core/data-access/src/lib/dto/core-paging.input.ts__tmpl__
import { Field, InputType } from '@nestjs/graphql'
import { GraphQLJSONObject } from 'graphql-type-json'

@InputType()
export class CorePagingInput {
  @Field({ nullable: true, defaultValue: 20 })
  take?: number

  @Field({ nullable: true, defaultValue: 0 })
  skip?: number

  @Field({ nullable: true })
  search?: string

  @Field({ nullable: true })
  orderDirection?: 'asc' | 'desc'

  @Field({ nullable: true })
  orderBy?: string

  @Field(() => GraphQLJSONObject, { nullable: true })
  filters?: Record<string, unknown>
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/core/data-access/src/lib/dto/multi-select-input.ts__tmpl__
import { Field, InputType } from '@nestjs/graphql'

@InputType()
export class MultiSelectInput {
  @Field({ nullable: true })
  id?: string
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/core/data-access/src/lib/models/core-paging.ts__tmpl__
import { Field, ObjectType } from '@nestjs/graphql'

@ObjectType()
export class CorePaging {
  @Field({ nullable: true })
  total?: number

  @Field({ nullable: true })
  count?: number

  @Field({ nullable: true })
  take?: number

  @Field({ nullable: true })
  page?: number

  @Field({ nullable: true })
  skip?: number
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/core/data-access/src/prisma/seed-data/iso-3166-countries.ts__tmpl__
export const countries = [
  {
    name: 'Afghanistan',
    'alpha-2': 'AF',
    'alpha-3': 'AFG',
    'country-code': '004',
    'iso_3166-2': 'ISO 3166-2:AF',
    region: 'Asia',
    'sub-region': 'Southern Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '034',
    'intermediate-region-code': '',
  },
  {
    name: 'Åland Islands',
    'alpha-2': 'AX',
    'alpha-3': 'ALA',
    'country-code': '248',
    'iso_3166-2': 'ISO 3166-2:AX',
    region: 'Europe',
    'sub-region': 'Northern Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '154',
    'intermediate-region-code': '',
  },
  {
    name: 'Albania',
    'alpha-2': 'AL',
    'alpha-3': 'ALB',
    'country-code': '008',
    'iso_3166-2': 'ISO 3166-2:AL',
    region: 'Europe',
    'sub-region': 'Southern Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '039',
    'intermediate-region-code': '',
  },
  {
    name: 'Algeria',
    'alpha-2': 'DZ',
    'alpha-3': 'DZA',
    'country-code': '012',
    'iso_3166-2': 'ISO 3166-2:DZ',
    region: 'Africa',
    'sub-region': 'Northern Africa',
    'intermediate-region': '',
    'region-code': '002',
    'sub-region-code': '015',
    'intermediate-region-code': '',
  },
  {
    name: 'American Samoa',
    'alpha-2': 'AS',
    'alpha-3': 'ASM',
    'country-code': '016',
    'iso_3166-2': 'ISO 3166-2:AS',
    region: 'Oceania',
    'sub-region': 'Polynesia',
    'intermediate-region': '',
    'region-code': '009',
    'sub-region-code': '061',
    'intermediate-region-code': '',
  },
  {
    name: 'Andorra',
    'alpha-2': 'AD',
    'alpha-3': 'AND',
    'country-code': '020',
    'iso_3166-2': 'ISO 3166-2:AD',
    region: 'Europe',
    'sub-region': 'Southern Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '039',
    'intermediate-region-code': '',
  },
  {
    name: 'Angola',
    'alpha-2': 'AO',
    'alpha-3': 'AGO',
    'country-code': '024',
    'iso_3166-2': 'ISO 3166-2:AO',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Middle Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '017',
  },
  {
    name: 'Anguilla',
    'alpha-2': 'AI',
    'alpha-3': 'AIA',
    'country-code': '660',
    'iso_3166-2': 'ISO 3166-2:AI',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'Caribbean',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '029',
  },
  {
    name: 'Antarctica',
    'alpha-2': 'AQ',
    'alpha-3': 'ATA',
    'country-code': '010',
    'iso_3166-2': 'ISO 3166-2:AQ',
    region: '',
    'sub-region': '',
    'intermediate-region': '',
    'region-code': '',
    'sub-region-code': '',
    'intermediate-region-code': '',
  },
  {
    name: 'Antigua and Barbuda',
    'alpha-2': 'AG',
    'alpha-3': 'ATG',
    'country-code': '028',
    'iso_3166-2': 'ISO 3166-2:AG',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'Caribbean',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '029',
  },
  {
    name: 'Argentina',
    'alpha-2': 'AR',
    'alpha-3': 'ARG',
    'country-code': '032',
    'iso_3166-2': 'ISO 3166-2:AR',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'South America',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '005',
  },
  {
    name: 'Armenia',
    'alpha-2': 'AM',
    'alpha-3': 'ARM',
    'country-code': '051',
    'iso_3166-2': 'ISO 3166-2:AM',
    region: 'Asia',
    'sub-region': 'Western Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '145',
    'intermediate-region-code': '',
  },
  {
    name: 'Aruba',
    'alpha-2': 'AW',
    'alpha-3': 'ABW',
    'country-code': '533',
    'iso_3166-2': 'ISO 3166-2:AW',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'Caribbean',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '029',
  },
  {
    name: 'Australia',
    'alpha-2': 'AU',
    'alpha-3': 'AUS',
    'country-code': '036',
    'iso_3166-2': 'ISO 3166-2:AU',
    region: 'Oceania',
    'sub-region': 'Australia and New Zealand',
    'intermediate-region': '',
    'region-code': '009',
    'sub-region-code': '053',
    'intermediate-region-code': '',
  },
  {
    name: 'Austria',
    'alpha-2': 'AT',
    'alpha-3': 'AUT',
    'country-code': '040',
    'iso_3166-2': 'ISO 3166-2:AT',
    region: 'Europe',
    'sub-region': 'Western Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '155',
    'intermediate-region-code': '',
  },
  {
    name: 'Azerbaijan',
    'alpha-2': 'AZ',
    'alpha-3': 'AZE',
    'country-code': '031',
    'iso_3166-2': 'ISO 3166-2:AZ',
    region: 'Asia',
    'sub-region': 'Western Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '145',
    'intermediate-region-code': '',
  },
  {
    name: 'Bahamas',
    'alpha-2': 'BS',
    'alpha-3': 'BHS',
    'country-code': '044',
    'iso_3166-2': 'ISO 3166-2:BS',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'Caribbean',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '029',
  },
  {
    name: 'Bahrain',
    'alpha-2': 'BH',
    'alpha-3': 'BHR',
    'country-code': '048',
    'iso_3166-2': 'ISO 3166-2:BH',
    region: 'Asia',
    'sub-region': 'Western Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '145',
    'intermediate-region-code': '',
  },
  {
    name: 'Bangladesh',
    'alpha-2': 'BD',
    'alpha-3': 'BGD',
    'country-code': '050',
    'iso_3166-2': 'ISO 3166-2:BD',
    region: 'Asia',
    'sub-region': 'Southern Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '034',
    'intermediate-region-code': '',
  },
  {
    name: 'Barbados',
    'alpha-2': 'BB',
    'alpha-3': 'BRB',
    'country-code': '052',
    'iso_3166-2': 'ISO 3166-2:BB',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'Caribbean',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '029',
  },
  {
    name: 'Belarus',
    'alpha-2': 'BY',
    'alpha-3': 'BLR',
    'country-code': '112',
    'iso_3166-2': 'ISO 3166-2:BY',
    region: 'Europe',
    'sub-region': 'Eastern Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '151',
    'intermediate-region-code': '',
  },
  {
    name: 'Belgium',
    'alpha-2': 'BE',
    'alpha-3': 'BEL',
    'country-code': '056',
    'iso_3166-2': 'ISO 3166-2:BE',
    region: 'Europe',
    'sub-region': 'Western Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '155',
    'intermediate-region-code': '',
  },
  {
    name: 'Belize',
    'alpha-2': 'BZ',
    'alpha-3': 'BLZ',
    'country-code': '084',
    'iso_3166-2': 'ISO 3166-2:BZ',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'Central America',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '013',
  },
  {
    name: 'Benin',
    'alpha-2': 'BJ',
    'alpha-3': 'BEN',
    'country-code': '204',
    'iso_3166-2': 'ISO 3166-2:BJ',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Western Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '011',
  },
  {
    name: 'Bermuda',
    'alpha-2': 'BM',
    'alpha-3': 'BMU',
    'country-code': '060',
    'iso_3166-2': 'ISO 3166-2:BM',
    region: 'Americas',
    'sub-region': 'Northern America',
    'intermediate-region': '',
    'region-code': '019',
    'sub-region-code': '021',
    'intermediate-region-code': '',
  },
  {
    name: 'Bhutan',
    'alpha-2': 'BT',
    'alpha-3': 'BTN',
    'country-code': '064',
    'iso_3166-2': 'ISO 3166-2:BT',
    region: 'Asia',
    'sub-region': 'Southern Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '034',
    'intermediate-region-code': '',
  },
  {
    name: 'Bolivia (Plurinational State of)',
    'alpha-2': 'BO',
    'alpha-3': 'BOL',
    'country-code': '068',
    'iso_3166-2': 'ISO 3166-2:BO',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'South America',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '005',
  },
  {
    name: 'Bonaire, Sint Eustatius and Saba',
    'alpha-2': 'BQ',
    'alpha-3': 'BES',
    'country-code': '535',
    'iso_3166-2': 'ISO 3166-2:BQ',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'Caribbean',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '029',
  },
  {
    name: 'Bosnia and Herzegovina',
    'alpha-2': 'BA',
    'alpha-3': 'BIH',
    'country-code': '070',
    'iso_3166-2': 'ISO 3166-2:BA',
    region: 'Europe',
    'sub-region': 'Southern Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '039',
    'intermediate-region-code': '',
  },
  {
    name: 'Botswana',
    'alpha-2': 'BW',
    'alpha-3': 'BWA',
    'country-code': '072',
    'iso_3166-2': 'ISO 3166-2:BW',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Southern Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '018',
  },
  {
    name: 'Bouvet Island',
    'alpha-2': 'BV',
    'alpha-3': 'BVT',
    'country-code': '074',
    'iso_3166-2': 'ISO 3166-2:BV',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'South America',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '005',
  },
  {
    name: 'Brazil',
    'alpha-2': 'BR',
    'alpha-3': 'BRA',
    'country-code': '076',
    'iso_3166-2': 'ISO 3166-2:BR',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'South America',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '005',
  },
  {
    name: 'British Indian Ocean Territory',
    'alpha-2': 'IO',
    'alpha-3': 'IOT',
    'country-code': '086',
    'iso_3166-2': 'ISO 3166-2:IO',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Eastern Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '014',
  },
  {
    name: 'Brunei Darussalam',
    'alpha-2': 'BN',
    'alpha-3': 'BRN',
    'country-code': '096',
    'iso_3166-2': 'ISO 3166-2:BN',
    region: 'Asia',
    'sub-region': 'South-eastern Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '035',
    'intermediate-region-code': '',
  },
  {
    name: 'Bulgaria',
    'alpha-2': 'BG',
    'alpha-3': 'BGR',
    'country-code': '100',
    'iso_3166-2': 'ISO 3166-2:BG',
    region: 'Europe',
    'sub-region': 'Eastern Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '151',
    'intermediate-region-code': '',
  },
  {
    name: 'Burkina Faso',
    'alpha-2': 'BF',
    'alpha-3': 'BFA',
    'country-code': '854',
    'iso_3166-2': 'ISO 3166-2:BF',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Western Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '011',
  },
  {
    name: 'Burundi',
    'alpha-2': 'BI',
    'alpha-3': 'BDI',
    'country-code': '108',
    'iso_3166-2': 'ISO 3166-2:BI',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Eastern Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '014',
  },
  {
    name: 'Cabo Verde',
    'alpha-2': 'CV',
    'alpha-3': 'CPV',
    'country-code': '132',
    'iso_3166-2': 'ISO 3166-2:CV',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Western Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '011',
  },
  {
    name: 'Cambodia',
    'alpha-2': 'KH',
    'alpha-3': 'KHM',
    'country-code': '116',
    'iso_3166-2': 'ISO 3166-2:KH',
    region: 'Asia',
    'sub-region': 'South-eastern Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '035',
    'intermediate-region-code': '',
  },
  {
    name: 'Cameroon',
    'alpha-2': 'CM',
    'alpha-3': 'CMR',
    'country-code': '120',
    'iso_3166-2': 'ISO 3166-2:CM',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Middle Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '017',
  },
  {
    name: 'Canada',
    'alpha-2': 'CA',
    'alpha-3': 'CAN',
    'country-code': '124',
    'iso_3166-2': 'ISO 3166-2:CA',
    region: 'Americas',
    'sub-region': 'Northern America',
    'intermediate-region': '',
    'region-code': '019',
    'sub-region-code': '021',
    'intermediate-region-code': '',
  },
  {
    name: 'Cayman Islands',
    'alpha-2': 'KY',
    'alpha-3': 'CYM',
    'country-code': '136',
    'iso_3166-2': 'ISO 3166-2:KY',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'Caribbean',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '029',
  },
  {
    name: 'Central African Republic',
    'alpha-2': 'CF',
    'alpha-3': 'CAF',
    'country-code': '140',
    'iso_3166-2': 'ISO 3166-2:CF',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Middle Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '017',
  },
  {
    name: 'Chad',
    'alpha-2': 'TD',
    'alpha-3': 'TCD',
    'country-code': '148',
    'iso_3166-2': 'ISO 3166-2:TD',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Middle Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '017',
  },
  {
    name: 'Chile',
    'alpha-2': 'CL',
    'alpha-3': 'CHL',
    'country-code': '152',
    'iso_3166-2': 'ISO 3166-2:CL',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'South America',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '005',
  },
  {
    name: 'China',
    'alpha-2': 'CN',
    'alpha-3': 'CHN',
    'country-code': '156',
    'iso_3166-2': 'ISO 3166-2:CN',
    region: 'Asia',
    'sub-region': 'Eastern Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '030',
    'intermediate-region-code': '',
  },
  {
    name: 'Christmas Island',
    'alpha-2': 'CX',
    'alpha-3': 'CXR',
    'country-code': '162',
    'iso_3166-2': 'ISO 3166-2:CX',
    region: 'Oceania',
    'sub-region': 'Australia and New Zealand',
    'intermediate-region': '',
    'region-code': '009',
    'sub-region-code': '053',
    'intermediate-region-code': '',
  },
  {
    name: 'Cocos (Keeling) Islands',
    'alpha-2': 'CC',
    'alpha-3': 'CCK',
    'country-code': '166',
    'iso_3166-2': 'ISO 3166-2:CC',
    region: 'Oceania',
    'sub-region': 'Australia and New Zealand',
    'intermediate-region': '',
    'region-code': '009',
    'sub-region-code': '053',
    'intermediate-region-code': '',
  },
  {
    name: 'Colombia',
    'alpha-2': 'CO',
    'alpha-3': 'COL',
    'country-code': '170',
    'iso_3166-2': 'ISO 3166-2:CO',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'South America',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '005',
  },
  {
    name: 'Comoros',
    'alpha-2': 'KM',
    'alpha-3': 'COM',
    'country-code': '174',
    'iso_3166-2': 'ISO 3166-2:KM',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Eastern Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '014',
  },
  {
    name: 'Congo',
    'alpha-2': 'CG',
    'alpha-3': 'COG',
    'country-code': '178',
    'iso_3166-2': 'ISO 3166-2:CG',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Middle Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '017',
  },
  {
    name: 'Congo, Democratic Republic of the',
    'alpha-2': 'CD',
    'alpha-3': 'COD',
    'country-code': '180',
    'iso_3166-2': 'ISO 3166-2:CD',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Middle Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '017',
  },
  {
    name: 'Cook Islands',
    'alpha-2': 'CK',
    'alpha-3': 'COK',
    'country-code': '184',
    'iso_3166-2': 'ISO 3166-2:CK',
    region: 'Oceania',
    'sub-region': 'Polynesia',
    'intermediate-region': '',
    'region-code': '009',
    'sub-region-code': '061',
    'intermediate-region-code': '',
  },
  {
    name: 'Costa Rica',
    'alpha-2': 'CR',
    'alpha-3': 'CRI',
    'country-code': '188',
    'iso_3166-2': 'ISO 3166-2:CR',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'Central America',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '013',
  },
  {
    name: "Côte d'Ivoire",
    'alpha-2': 'CI',
    'alpha-3': 'CIV',
    'country-code': '384',
    'iso_3166-2': 'ISO 3166-2:CI',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Western Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '011',
  },
  {
    name: 'Croatia',
    'alpha-2': 'HR',
    'alpha-3': 'HRV',
    'country-code': '191',
    'iso_3166-2': 'ISO 3166-2:HR',
    region: 'Europe',
    'sub-region': 'Southern Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '039',
    'intermediate-region-code': '',
  },
  {
    name: 'Cuba',
    'alpha-2': 'CU',
    'alpha-3': 'CUB',
    'country-code': '192',
    'iso_3166-2': 'ISO 3166-2:CU',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'Caribbean',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '029',
  },
  {
    name: 'Curaçao',
    'alpha-2': 'CW',
    'alpha-3': 'CUW',
    'country-code': '531',
    'iso_3166-2': 'ISO 3166-2:CW',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'Caribbean',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '029',
  },
  {
    name: 'Cyprus',
    'alpha-2': 'CY',
    'alpha-3': 'CYP',
    'country-code': '196',
    'iso_3166-2': 'ISO 3166-2:CY',
    region: 'Asia',
    'sub-region': 'Western Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '145',
    'intermediate-region-code': '',
  },
  {
    name: 'Czechia',
    'alpha-2': 'CZ',
    'alpha-3': 'CZE',
    'country-code': '203',
    'iso_3166-2': 'ISO 3166-2:CZ',
    region: 'Europe',
    'sub-region': 'Eastern Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '151',
    'intermediate-region-code': '',
  },
  {
    name: 'Denmark',
    'alpha-2': 'DK',
    'alpha-3': 'DNK',
    'country-code': '208',
    'iso_3166-2': 'ISO 3166-2:DK',
    region: 'Europe',
    'sub-region': 'Northern Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '154',
    'intermediate-region-code': '',
  },
  {
    name: 'Djibouti',
    'alpha-2': 'DJ',
    'alpha-3': 'DJI',
    'country-code': '262',
    'iso_3166-2': 'ISO 3166-2:DJ',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Eastern Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '014',
  },
  {
    name: 'Dominica',
    'alpha-2': 'DM',
    'alpha-3': 'DMA',
    'country-code': '212',
    'iso_3166-2': 'ISO 3166-2:DM',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'Caribbean',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '029',
  },
  {
    name: 'Dominican Republic',
    'alpha-2': 'DO',
    'alpha-3': 'DOM',
    'country-code': '214',
    'iso_3166-2': 'ISO 3166-2:DO',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'Caribbean',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '029',
  },
  {
    name: 'Ecuador',
    'alpha-2': 'EC',
    'alpha-3': 'ECU',
    'country-code': '218',
    'iso_3166-2': 'ISO 3166-2:EC',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'South America',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '005',
  },
  {
    name: 'Egypt',
    'alpha-2': 'EG',
    'alpha-3': 'EGY',
    'country-code': '818',
    'iso_3166-2': 'ISO 3166-2:EG',
    region: 'Africa',
    'sub-region': 'Northern Africa',
    'intermediate-region': '',
    'region-code': '002',
    'sub-region-code': '015',
    'intermediate-region-code': '',
  },
  {
    name: 'El Salvador',
    'alpha-2': 'SV',
    'alpha-3': 'SLV',
    'country-code': '222',
    'iso_3166-2': 'ISO 3166-2:SV',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'Central America',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '013',
  },
  {
    name: 'Equatorial Guinea',
    'alpha-2': 'GQ',
    'alpha-3': 'GNQ',
    'country-code': '226',
    'iso_3166-2': 'ISO 3166-2:GQ',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Middle Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '017',
  },
  {
    name: 'Eritrea',
    'alpha-2': 'ER',
    'alpha-3': 'ERI',
    'country-code': '232',
    'iso_3166-2': 'ISO 3166-2:ER',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Eastern Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '014',
  },
  {
    name: 'Estonia',
    'alpha-2': 'EE',
    'alpha-3': 'EST',
    'country-code': '233',
    'iso_3166-2': 'ISO 3166-2:EE',
    region: 'Europe',
    'sub-region': 'Northern Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '154',
    'intermediate-region-code': '',
  },
  {
    name: 'Eswatini',
    'alpha-2': 'SZ',
    'alpha-3': 'SWZ',
    'country-code': '748',
    'iso_3166-2': 'ISO 3166-2:SZ',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Southern Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '018',
  },
  {
    name: 'Ethiopia',
    'alpha-2': 'ET',
    'alpha-3': 'ETH',
    'country-code': '231',
    'iso_3166-2': 'ISO 3166-2:ET',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Eastern Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '014',
  },
  {
    name: 'Falkland Islands (Malvinas)',
    'alpha-2': 'FK',
    'alpha-3': 'FLK',
    'country-code': '238',
    'iso_3166-2': 'ISO 3166-2:FK',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'South America',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '005',
  },
  {
    name: 'Faroe Islands',
    'alpha-2': 'FO',
    'alpha-3': 'FRO',
    'country-code': '234',
    'iso_3166-2': 'ISO 3166-2:FO',
    region: 'Europe',
    'sub-region': 'Northern Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '154',
    'intermediate-region-code': '',
  },
  {
    name: 'Fiji',
    'alpha-2': 'FJ',
    'alpha-3': 'FJI',
    'country-code': '242',
    'iso_3166-2': 'ISO 3166-2:FJ',
    region: 'Oceania',
    'sub-region': 'Melanesia',
    'intermediate-region': '',
    'region-code': '009',
    'sub-region-code': '054',
    'intermediate-region-code': '',
  },
  {
    name: 'Finland',
    'alpha-2': 'FI',
    'alpha-3': 'FIN',
    'country-code': '246',
    'iso_3166-2': 'ISO 3166-2:FI',
    region: 'Europe',
    'sub-region': 'Northern Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '154',
    'intermediate-region-code': '',
  },
  {
    name: 'France',
    'alpha-2': 'FR',
    'alpha-3': 'FRA',
    'country-code': '250',
    'iso_3166-2': 'ISO 3166-2:FR',
    region: 'Europe',
    'sub-region': 'Western Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '155',
    'intermediate-region-code': '',
  },
  {
    name: 'French Guiana',
    'alpha-2': 'GF',
    'alpha-3': 'GUF',
    'country-code': '254',
    'iso_3166-2': 'ISO 3166-2:GF',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'South America',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '005',
  },
  {
    name: 'French Polynesia',
    'alpha-2': 'PF',
    'alpha-3': 'PYF',
    'country-code': '258',
    'iso_3166-2': 'ISO 3166-2:PF',
    region: 'Oceania',
    'sub-region': 'Polynesia',
    'intermediate-region': '',
    'region-code': '009',
    'sub-region-code': '061',
    'intermediate-region-code': '',
  },
  {
    name: 'French Southern Territories',
    'alpha-2': 'TF',
    'alpha-3': 'ATF',
    'country-code': '260',
    'iso_3166-2': 'ISO 3166-2:TF',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Eastern Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '014',
  },
  {
    name: 'Gabon',
    'alpha-2': 'GA',
    'alpha-3': 'GAB',
    'country-code': '266',
    'iso_3166-2': 'ISO 3166-2:GA',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Middle Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '017',
  },
  {
    name: 'Gambia',
    'alpha-2': 'GM',
    'alpha-3': 'GMB',
    'country-code': '270',
    'iso_3166-2': 'ISO 3166-2:GM',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Western Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '011',
  },
  {
    name: 'Georgia',
    'alpha-2': 'GE',
    'alpha-3': 'GEO',
    'country-code': '268',
    'iso_3166-2': 'ISO 3166-2:GE',
    region: 'Asia',
    'sub-region': 'Western Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '145',
    'intermediate-region-code': '',
  },
  {
    name: 'Germany',
    'alpha-2': 'DE',
    'alpha-3': 'DEU',
    'country-code': '276',
    'iso_3166-2': 'ISO 3166-2:DE',
    region: 'Europe',
    'sub-region': 'Western Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '155',
    'intermediate-region-code': '',
  },
  {
    name: 'Ghana',
    'alpha-2': 'GH',
    'alpha-3': 'GHA',
    'country-code': '288',
    'iso_3166-2': 'ISO 3166-2:GH',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Western Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '011',
  },
  {
    name: 'Gibraltar',
    'alpha-2': 'GI',
    'alpha-3': 'GIB',
    'country-code': '292',
    'iso_3166-2': 'ISO 3166-2:GI',
    region: 'Europe',
    'sub-region': 'Southern Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '039',
    'intermediate-region-code': '',
  },
  {
    name: 'Greece',
    'alpha-2': 'GR',
    'alpha-3': 'GRC',
    'country-code': '300',
    'iso_3166-2': 'ISO 3166-2:GR',
    region: 'Europe',
    'sub-region': 'Southern Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '039',
    'intermediate-region-code': '',
  },
  {
    name: 'Greenland',
    'alpha-2': 'GL',
    'alpha-3': 'GRL',
    'country-code': '304',
    'iso_3166-2': 'ISO 3166-2:GL',
    region: 'Americas',
    'sub-region': 'Northern America',
    'intermediate-region': '',
    'region-code': '019',
    'sub-region-code': '021',
    'intermediate-region-code': '',
  },
  {
    name: 'Grenada',
    'alpha-2': 'GD',
    'alpha-3': 'GRD',
    'country-code': '308',
    'iso_3166-2': 'ISO 3166-2:GD',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'Caribbean',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '029',
  },
  {
    name: 'Guadeloupe',
    'alpha-2': 'GP',
    'alpha-3': 'GLP',
    'country-code': '312',
    'iso_3166-2': 'ISO 3166-2:GP',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'Caribbean',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '029',
  },
  {
    name: 'Guam',
    'alpha-2': 'GU',
    'alpha-3': 'GUM',
    'country-code': '316',
    'iso_3166-2': 'ISO 3166-2:GU',
    region: 'Oceania',
    'sub-region': 'Micronesia',
    'intermediate-region': '',
    'region-code': '009',
    'sub-region-code': '057',
    'intermediate-region-code': '',
  },
  {
    name: 'Guatemala',
    'alpha-2': 'GT',
    'alpha-3': 'GTM',
    'country-code': '320',
    'iso_3166-2': 'ISO 3166-2:GT',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'Central America',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '013',
  },
  {
    name: 'Guernsey',
    'alpha-2': 'GG',
    'alpha-3': 'GGY',
    'country-code': '831',
    'iso_3166-2': 'ISO 3166-2:GG',
    region: 'Europe',
    'sub-region': 'Northern Europe',
    'intermediate-region': 'Channel Islands',
    'region-code': '150',
    'sub-region-code': '154',
    'intermediate-region-code': '830',
  },
  {
    name: 'Guinea',
    'alpha-2': 'GN',
    'alpha-3': 'GIN',
    'country-code': '324',
    'iso_3166-2': 'ISO 3166-2:GN',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Western Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '011',
  },
  {
    name: 'Guinea-Bissau',
    'alpha-2': 'GW',
    'alpha-3': 'GNB',
    'country-code': '624',
    'iso_3166-2': 'ISO 3166-2:GW',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Western Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '011',
  },
  {
    name: 'Guyana',
    'alpha-2': 'GY',
    'alpha-3': 'GUY',
    'country-code': '328',
    'iso_3166-2': 'ISO 3166-2:GY',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'South America',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '005',
  },
  {
    name: 'Haiti',
    'alpha-2': 'HT',
    'alpha-3': 'HTI',
    'country-code': '332',
    'iso_3166-2': 'ISO 3166-2:HT',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'Caribbean',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '029',
  },
  {
    name: 'Heard Island and McDonald Islands',
    'alpha-2': 'HM',
    'alpha-3': 'HMD',
    'country-code': '334',
    'iso_3166-2': 'ISO 3166-2:HM',
    region: 'Oceania',
    'sub-region': 'Australia and New Zealand',
    'intermediate-region': '',
    'region-code': '009',
    'sub-region-code': '053',
    'intermediate-region-code': '',
  },
  {
    name: 'Holy See',
    'alpha-2': 'VA',
    'alpha-3': 'VAT',
    'country-code': '336',
    'iso_3166-2': 'ISO 3166-2:VA',
    region: 'Europe',
    'sub-region': 'Southern Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '039',
    'intermediate-region-code': '',
  },
  {
    name: 'Honduras',
    'alpha-2': 'HN',
    'alpha-3': 'HND',
    'country-code': '340',
    'iso_3166-2': 'ISO 3166-2:HN',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'Central America',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '013',
  },
  {
    name: 'Hong Kong',
    'alpha-2': 'HK',
    'alpha-3': 'HKG',
    'country-code': '344',
    'iso_3166-2': 'ISO 3166-2:HK',
    region: 'Asia',
    'sub-region': 'Eastern Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '030',
    'intermediate-region-code': '',
  },
  {
    name: 'Hungary',
    'alpha-2': 'HU',
    'alpha-3': 'HUN',
    'country-code': '348',
    'iso_3166-2': 'ISO 3166-2:HU',
    region: 'Europe',
    'sub-region': 'Eastern Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '151',
    'intermediate-region-code': '',
  },
  {
    name: 'Iceland',
    'alpha-2': 'IS',
    'alpha-3': 'ISL',
    'country-code': '352',
    'iso_3166-2': 'ISO 3166-2:IS',
    region: 'Europe',
    'sub-region': 'Northern Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '154',
    'intermediate-region-code': '',
  },
  {
    name: 'India',
    'alpha-2': 'IN',
    'alpha-3': 'IND',
    'country-code': '356',
    'iso_3166-2': 'ISO 3166-2:IN',
    region: 'Asia',
    'sub-region': 'Southern Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '034',
    'intermediate-region-code': '',
  },
  {
    name: 'Indonesia',
    'alpha-2': 'ID',
    'alpha-3': 'IDN',
    'country-code': '360',
    'iso_3166-2': 'ISO 3166-2:ID',
    region: 'Asia',
    'sub-region': 'South-eastern Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '035',
    'intermediate-region-code': '',
  },
  {
    name: 'Iran (Islamic Republic of)',
    'alpha-2': 'IR',
    'alpha-3': 'IRN',
    'country-code': '364',
    'iso_3166-2': 'ISO 3166-2:IR',
    region: 'Asia',
    'sub-region': 'Southern Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '034',
    'intermediate-region-code': '',
  },
  {
    name: 'Iraq',
    'alpha-2': 'IQ',
    'alpha-3': 'IRQ',
    'country-code': '368',
    'iso_3166-2': 'ISO 3166-2:IQ',
    region: 'Asia',
    'sub-region': 'Western Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '145',
    'intermediate-region-code': '',
  },
  {
    name: 'Ireland',
    'alpha-2': 'IE',
    'alpha-3': 'IRL',
    'country-code': '372',
    'iso_3166-2': 'ISO 3166-2:IE',
    region: 'Europe',
    'sub-region': 'Northern Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '154',
    'intermediate-region-code': '',
  },
  {
    name: 'Isle of Man',
    'alpha-2': 'IM',
    'alpha-3': 'IMN',
    'country-code': '833',
    'iso_3166-2': 'ISO 3166-2:IM',
    region: 'Europe',
    'sub-region': 'Northern Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '154',
    'intermediate-region-code': '',
  },
  {
    name: 'Israel',
    'alpha-2': 'IL',
    'alpha-3': 'ISR',
    'country-code': '376',
    'iso_3166-2': 'ISO 3166-2:IL',
    region: 'Asia',
    'sub-region': 'Western Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '145',
    'intermediate-region-code': '',
  },
  {
    name: 'Italy',
    'alpha-2': 'IT',
    'alpha-3': 'ITA',
    'country-code': '380',
    'iso_3166-2': 'ISO 3166-2:IT',
    region: 'Europe',
    'sub-region': 'Southern Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '039',
    'intermediate-region-code': '',
  },
  {
    name: 'Jamaica',
    'alpha-2': 'JM',
    'alpha-3': 'JAM',
    'country-code': '388',
    'iso_3166-2': 'ISO 3166-2:JM',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'Caribbean',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '029',
  },
  {
    name: 'Japan',
    'alpha-2': 'JP',
    'alpha-3': 'JPN',
    'country-code': '392',
    'iso_3166-2': 'ISO 3166-2:JP',
    region: 'Asia',
    'sub-region': 'Eastern Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '030',
    'intermediate-region-code': '',
  },
  {
    name: 'Jersey',
    'alpha-2': 'JE',
    'alpha-3': 'JEY',
    'country-code': '832',
    'iso_3166-2': 'ISO 3166-2:JE',
    region: 'Europe',
    'sub-region': 'Northern Europe',
    'intermediate-region': 'Channel Islands',
    'region-code': '150',
    'sub-region-code': '154',
    'intermediate-region-code': '830',
  },
  {
    name: 'Jordan',
    'alpha-2': 'JO',
    'alpha-3': 'JOR',
    'country-code': '400',
    'iso_3166-2': 'ISO 3166-2:JO',
    region: 'Asia',
    'sub-region': 'Western Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '145',
    'intermediate-region-code': '',
  },
  {
    name: 'Kazakhstan',
    'alpha-2': 'KZ',
    'alpha-3': 'KAZ',
    'country-code': '398',
    'iso_3166-2': 'ISO 3166-2:KZ',
    region: 'Asia',
    'sub-region': 'Central Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '143',
    'intermediate-region-code': '',
  },
  {
    name: 'Kenya',
    'alpha-2': 'KE',
    'alpha-3': 'KEN',
    'country-code': '404',
    'iso_3166-2': 'ISO 3166-2:KE',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Eastern Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '014',
  },
  {
    name: 'Kiribati',
    'alpha-2': 'KI',
    'alpha-3': 'KIR',
    'country-code': '296',
    'iso_3166-2': 'ISO 3166-2:KI',
    region: 'Oceania',
    'sub-region': 'Micronesia',
    'intermediate-region': '',
    'region-code': '009',
    'sub-region-code': '057',
    'intermediate-region-code': '',
  },
  {
    name: "Korea (Democratic People's Republic of)",
    'alpha-2': 'KP',
    'alpha-3': 'PRK',
    'country-code': '408',
    'iso_3166-2': 'ISO 3166-2:KP',
    region: 'Asia',
    'sub-region': 'Eastern Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '030',
    'intermediate-region-code': '',
  },
  {
    name: 'Korea, Republic of',
    'alpha-2': 'KR',
    'alpha-3': 'KOR',
    'country-code': '410',
    'iso_3166-2': 'ISO 3166-2:KR',
    region: 'Asia',
    'sub-region': 'Eastern Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '030',
    'intermediate-region-code': '',
  },
  {
    name: 'Kuwait',
    'alpha-2': 'KW',
    'alpha-3': 'KWT',
    'country-code': '414',
    'iso_3166-2': 'ISO 3166-2:KW',
    region: 'Asia',
    'sub-region': 'Western Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '145',
    'intermediate-region-code': '',
  },
  {
    name: 'Kyrgyzstan',
    'alpha-2': 'KG',
    'alpha-3': 'KGZ',
    'country-code': '417',
    'iso_3166-2': 'ISO 3166-2:KG',
    region: 'Asia',
    'sub-region': 'Central Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '143',
    'intermediate-region-code': '',
  },
  {
    name: "Lao People's Democratic Republic",
    'alpha-2': 'LA',
    'alpha-3': 'LAO',
    'country-code': '418',
    'iso_3166-2': 'ISO 3166-2:LA',
    region: 'Asia',
    'sub-region': 'South-eastern Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '035',
    'intermediate-region-code': '',
  },
  {
    name: 'Latvia',
    'alpha-2': 'LV',
    'alpha-3': 'LVA',
    'country-code': '428',
    'iso_3166-2': 'ISO 3166-2:LV',
    region: 'Europe',
    'sub-region': 'Northern Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '154',
    'intermediate-region-code': '',
  },
  {
    name: 'Lebanon',
    'alpha-2': 'LB',
    'alpha-3': 'LBN',
    'country-code': '422',
    'iso_3166-2': 'ISO 3166-2:LB',
    region: 'Asia',
    'sub-region': 'Western Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '145',
    'intermediate-region-code': '',
  },
  {
    name: 'Lesotho',
    'alpha-2': 'LS',
    'alpha-3': 'LSO',
    'country-code': '426',
    'iso_3166-2': 'ISO 3166-2:LS',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Southern Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '018',
  },
  {
    name: 'Liberia',
    'alpha-2': 'LR',
    'alpha-3': 'LBR',
    'country-code': '430',
    'iso_3166-2': 'ISO 3166-2:LR',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Western Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '011',
  },
  {
    name: 'Libya',
    'alpha-2': 'LY',
    'alpha-3': 'LBY',
    'country-code': '434',
    'iso_3166-2': 'ISO 3166-2:LY',
    region: 'Africa',
    'sub-region': 'Northern Africa',
    'intermediate-region': '',
    'region-code': '002',
    'sub-region-code': '015',
    'intermediate-region-code': '',
  },
  {
    name: 'Liechtenstein',
    'alpha-2': 'LI',
    'alpha-3': 'LIE',
    'country-code': '438',
    'iso_3166-2': 'ISO 3166-2:LI',
    region: 'Europe',
    'sub-region': 'Western Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '155',
    'intermediate-region-code': '',
  },
  {
    name: 'Lithuania',
    'alpha-2': 'LT',
    'alpha-3': 'LTU',
    'country-code': '440',
    'iso_3166-2': 'ISO 3166-2:LT',
    region: 'Europe',
    'sub-region': 'Northern Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '154',
    'intermediate-region-code': '',
  },
  {
    name: 'Luxembourg',
    'alpha-2': 'LU',
    'alpha-3': 'LUX',
    'country-code': '442',
    'iso_3166-2': 'ISO 3166-2:LU',
    region: 'Europe',
    'sub-region': 'Western Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '155',
    'intermediate-region-code': '',
  },
  {
    name: 'Macao',
    'alpha-2': 'MO',
    'alpha-3': 'MAC',
    'country-code': '446',
    'iso_3166-2': 'ISO 3166-2:MO',
    region: 'Asia',
    'sub-region': 'Eastern Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '030',
    'intermediate-region-code': '',
  },
  {
    name: 'Madagascar',
    'alpha-2': 'MG',
    'alpha-3': 'MDG',
    'country-code': '450',
    'iso_3166-2': 'ISO 3166-2:MG',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Eastern Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '014',
  },
  {
    name: 'Malawi',
    'alpha-2': 'MW',
    'alpha-3': 'MWI',
    'country-code': '454',
    'iso_3166-2': 'ISO 3166-2:MW',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Eastern Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '014',
  },
  {
    name: 'Malaysia',
    'alpha-2': 'MY',
    'alpha-3': 'MYS',
    'country-code': '458',
    'iso_3166-2': 'ISO 3166-2:MY',
    region: 'Asia',
    'sub-region': 'South-eastern Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '035',
    'intermediate-region-code': '',
  },
  {
    name: 'Maldives',
    'alpha-2': 'MV',
    'alpha-3': 'MDV',
    'country-code': '462',
    'iso_3166-2': 'ISO 3166-2:MV',
    region: 'Asia',
    'sub-region': 'Southern Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '034',
    'intermediate-region-code': '',
  },
  {
    name: 'Mali',
    'alpha-2': 'ML',
    'alpha-3': 'MLI',
    'country-code': '466',
    'iso_3166-2': 'ISO 3166-2:ML',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Western Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '011',
  },
  {
    name: 'Malta',
    'alpha-2': 'MT',
    'alpha-3': 'MLT',
    'country-code': '470',
    'iso_3166-2': 'ISO 3166-2:MT',
    region: 'Europe',
    'sub-region': 'Southern Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '039',
    'intermediate-region-code': '',
  },
  {
    name: 'Marshall Islands',
    'alpha-2': 'MH',
    'alpha-3': 'MHL',
    'country-code': '584',
    'iso_3166-2': 'ISO 3166-2:MH',
    region: 'Oceania',
    'sub-region': 'Micronesia',
    'intermediate-region': '',
    'region-code': '009',
    'sub-region-code': '057',
    'intermediate-region-code': '',
  },
  {
    name: 'Martinique',
    'alpha-2': 'MQ',
    'alpha-3': 'MTQ',
    'country-code': '474',
    'iso_3166-2': 'ISO 3166-2:MQ',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'Caribbean',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '029',
  },
  {
    name: 'Mauritania',
    'alpha-2': 'MR',
    'alpha-3': 'MRT',
    'country-code': '478',
    'iso_3166-2': 'ISO 3166-2:MR',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Western Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '011',
  },
  {
    name: 'Mauritius',
    'alpha-2': 'MU',
    'alpha-3': 'MUS',
    'country-code': '480',
    'iso_3166-2': 'ISO 3166-2:MU',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Eastern Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '014',
  },
  {
    name: 'Mayotte',
    'alpha-2': 'YT',
    'alpha-3': 'MYT',
    'country-code': '175',
    'iso_3166-2': 'ISO 3166-2:YT',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Eastern Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '014',
  },
  {
    name: 'Mexico',
    'alpha-2': 'MX',
    'alpha-3': 'MEX',
    'country-code': '484',
    'iso_3166-2': 'ISO 3166-2:MX',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'Central America',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '013',
  },
  {
    name: 'Micronesia (Federated States of)',
    'alpha-2': 'FM',
    'alpha-3': 'FSM',
    'country-code': '583',
    'iso_3166-2': 'ISO 3166-2:FM',
    region: 'Oceania',
    'sub-region': 'Micronesia',
    'intermediate-region': '',
    'region-code': '009',
    'sub-region-code': '057',
    'intermediate-region-code': '',
  },
  {
    name: 'Moldova, Republic of',
    'alpha-2': 'MD',
    'alpha-3': 'MDA',
    'country-code': '498',
    'iso_3166-2': 'ISO 3166-2:MD',
    region: 'Europe',
    'sub-region': 'Eastern Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '151',
    'intermediate-region-code': '',
  },
  {
    name: 'Monaco',
    'alpha-2': 'MC',
    'alpha-3': 'MCO',
    'country-code': '492',
    'iso_3166-2': 'ISO 3166-2:MC',
    region: 'Europe',
    'sub-region': 'Western Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '155',
    'intermediate-region-code': '',
  },
  {
    name: 'Mongolia',
    'alpha-2': 'MN',
    'alpha-3': 'MNG',
    'country-code': '496',
    'iso_3166-2': 'ISO 3166-2:MN',
    region: 'Asia',
    'sub-region': 'Eastern Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '030',
    'intermediate-region-code': '',
  },
  {
    name: 'Montenegro',
    'alpha-2': 'ME',
    'alpha-3': 'MNE',
    'country-code': '499',
    'iso_3166-2': 'ISO 3166-2:ME',
    region: 'Europe',
    'sub-region': 'Southern Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '039',
    'intermediate-region-code': '',
  },
  {
    name: 'Montserrat',
    'alpha-2': 'MS',
    'alpha-3': 'MSR',
    'country-code': '500',
    'iso_3166-2': 'ISO 3166-2:MS',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'Caribbean',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '029',
  },
  {
    name: 'Morocco',
    'alpha-2': 'MA',
    'alpha-3': 'MAR',
    'country-code': '504',
    'iso_3166-2': 'ISO 3166-2:MA',
    region: 'Africa',
    'sub-region': 'Northern Africa',
    'intermediate-region': '',
    'region-code': '002',
    'sub-region-code': '015',
    'intermediate-region-code': '',
  },
  {
    name: 'Mozambique',
    'alpha-2': 'MZ',
    'alpha-3': 'MOZ',
    'country-code': '508',
    'iso_3166-2': 'ISO 3166-2:MZ',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Eastern Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '014',
  },
  {
    name: 'Myanmar',
    'alpha-2': 'MM',
    'alpha-3': 'MMR',
    'country-code': '104',
    'iso_3166-2': 'ISO 3166-2:MM',
    region: 'Asia',
    'sub-region': 'South-eastern Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '035',
    'intermediate-region-code': '',
  },
  {
    name: 'Namibia',
    'alpha-2': 'NA',
    'alpha-3': 'NAM',
    'country-code': '516',
    'iso_3166-2': 'ISO 3166-2:NA',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Southern Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '018',
  },
  {
    name: 'Nauru',
    'alpha-2': 'NR',
    'alpha-3': 'NRU',
    'country-code': '520',
    'iso_3166-2': 'ISO 3166-2:NR',
    region: 'Oceania',
    'sub-region': 'Micronesia',
    'intermediate-region': '',
    'region-code': '009',
    'sub-region-code': '057',
    'intermediate-region-code': '',
  },
  {
    name: 'Nepal',
    'alpha-2': 'NP',
    'alpha-3': 'NPL',
    'country-code': '524',
    'iso_3166-2': 'ISO 3166-2:NP',
    region: 'Asia',
    'sub-region': 'Southern Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '034',
    'intermediate-region-code': '',
  },
  {
    name: 'Netherlands',
    'alpha-2': 'NL',
    'alpha-3': 'NLD',
    'country-code': '528',
    'iso_3166-2': 'ISO 3166-2:NL',
    region: 'Europe',
    'sub-region': 'Western Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '155',
    'intermediate-region-code': '',
  },
  {
    name: 'New Caledonia',
    'alpha-2': 'NC',
    'alpha-3': 'NCL',
    'country-code': '540',
    'iso_3166-2': 'ISO 3166-2:NC',
    region: 'Oceania',
    'sub-region': 'Melanesia',
    'intermediate-region': '',
    'region-code': '009',
    'sub-region-code': '054',
    'intermediate-region-code': '',
  },
  {
    name: 'New Zealand',
    'alpha-2': 'NZ',
    'alpha-3': 'NZL',
    'country-code': '554',
    'iso_3166-2': 'ISO 3166-2:NZ',
    region: 'Oceania',
    'sub-region': 'Australia and New Zealand',
    'intermediate-region': '',
    'region-code': '009',
    'sub-region-code': '053',
    'intermediate-region-code': '',
  },
  {
    name: 'Nicaragua',
    'alpha-2': 'NI',
    'alpha-3': 'NIC',
    'country-code': '558',
    'iso_3166-2': 'ISO 3166-2:NI',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'Central America',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '013',
  },
  {
    name: 'Niger',
    'alpha-2': 'NE',
    'alpha-3': 'NER',
    'country-code': '562',
    'iso_3166-2': 'ISO 3166-2:NE',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Western Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '011',
  },
  {
    name: 'Nigeria',
    'alpha-2': 'NG',
    'alpha-3': 'NGA',
    'country-code': '566',
    'iso_3166-2': 'ISO 3166-2:NG',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Western Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '011',
  },
  {
    name: 'Niue',
    'alpha-2': 'NU',
    'alpha-3': 'NIU',
    'country-code': '570',
    'iso_3166-2': 'ISO 3166-2:NU',
    region: 'Oceania',
    'sub-region': 'Polynesia',
    'intermediate-region': '',
    'region-code': '009',
    'sub-region-code': '061',
    'intermediate-region-code': '',
  },
  {
    name: 'Norfolk Island',
    'alpha-2': 'NF',
    'alpha-3': 'NFK',
    'country-code': '574',
    'iso_3166-2': 'ISO 3166-2:NF',
    region: 'Oceania',
    'sub-region': 'Australia and New Zealand',
    'intermediate-region': '',
    'region-code': '009',
    'sub-region-code': '053',
    'intermediate-region-code': '',
  },
  {
    name: 'North Macedonia',
    'alpha-2': 'MK',
    'alpha-3': 'MKD',
    'country-code': '807',
    'iso_3166-2': 'ISO 3166-2:MK',
    region: 'Europe',
    'sub-region': 'Southern Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '039',
    'intermediate-region-code': '',
  },
  {
    name: 'Northern Mariana Islands',
    'alpha-2': 'MP',
    'alpha-3': 'MNP',
    'country-code': '580',
    'iso_3166-2': 'ISO 3166-2:MP',
    region: 'Oceania',
    'sub-region': 'Micronesia',
    'intermediate-region': '',
    'region-code': '009',
    'sub-region-code': '057',
    'intermediate-region-code': '',
  },
  {
    name: 'Norway',
    'alpha-2': 'NO',
    'alpha-3': 'NOR',
    'country-code': '578',
    'iso_3166-2': 'ISO 3166-2:NO',
    region: 'Europe',
    'sub-region': 'Northern Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '154',
    'intermediate-region-code': '',
  },
  {
    name: 'Oman',
    'alpha-2': 'OM',
    'alpha-3': 'OMN',
    'country-code': '512',
    'iso_3166-2': 'ISO 3166-2:OM',
    region: 'Asia',
    'sub-region': 'Western Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '145',
    'intermediate-region-code': '',
  },
  {
    name: 'Pakistan',
    'alpha-2': 'PK',
    'alpha-3': 'PAK',
    'country-code': '586',
    'iso_3166-2': 'ISO 3166-2:PK',
    region: 'Asia',
    'sub-region': 'Southern Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '034',
    'intermediate-region-code': '',
  },
  {
    name: 'Palau',
    'alpha-2': 'PW',
    'alpha-3': 'PLW',
    'country-code': '585',
    'iso_3166-2': 'ISO 3166-2:PW',
    region: 'Oceania',
    'sub-region': 'Micronesia',
    'intermediate-region': '',
    'region-code': '009',
    'sub-region-code': '057',
    'intermediate-region-code': '',
  },
  {
    name: 'Palestine, State of',
    'alpha-2': 'PS',
    'alpha-3': 'PSE',
    'country-code': '275',
    'iso_3166-2': 'ISO 3166-2:PS',
    region: 'Asia',
    'sub-region': 'Western Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '145',
    'intermediate-region-code': '',
  },
  {
    name: 'Panama',
    'alpha-2': 'PA',
    'alpha-3': 'PAN',
    'country-code': '591',
    'iso_3166-2': 'ISO 3166-2:PA',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'Central America',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '013',
  },
  {
    name: 'Papua New Guinea',
    'alpha-2': 'PG',
    'alpha-3': 'PNG',
    'country-code': '598',
    'iso_3166-2': 'ISO 3166-2:PG',
    region: 'Oceania',
    'sub-region': 'Melanesia',
    'intermediate-region': '',
    'region-code': '009',
    'sub-region-code': '054',
    'intermediate-region-code': '',
  },
  {
    name: 'Paraguay',
    'alpha-2': 'PY',
    'alpha-3': 'PRY',
    'country-code': '600',
    'iso_3166-2': 'ISO 3166-2:PY',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'South America',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '005',
  },
  {
    name: 'Peru',
    'alpha-2': 'PE',
    'alpha-3': 'PER',
    'country-code': '604',
    'iso_3166-2': 'ISO 3166-2:PE',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'South America',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '005',
  },
  {
    name: 'Philippines',
    'alpha-2': 'PH',
    'alpha-3': 'PHL',
    'country-code': '608',
    'iso_3166-2': 'ISO 3166-2:PH',
    region: 'Asia',
    'sub-region': 'South-eastern Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '035',
    'intermediate-region-code': '',
  },
  {
    name: 'Pitcairn',
    'alpha-2': 'PN',
    'alpha-3': 'PCN',
    'country-code': '612',
    'iso_3166-2': 'ISO 3166-2:PN',
    region: 'Oceania',
    'sub-region': 'Polynesia',
    'intermediate-region': '',
    'region-code': '009',
    'sub-region-code': '061',
    'intermediate-region-code': '',
  },
  {
    name: 'Poland',
    'alpha-2': 'PL',
    'alpha-3': 'POL',
    'country-code': '616',
    'iso_3166-2': 'ISO 3166-2:PL',
    region: 'Europe',
    'sub-region': 'Eastern Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '151',
    'intermediate-region-code': '',
  },
  {
    name: 'Portugal',
    'alpha-2': 'PT',
    'alpha-3': 'PRT',
    'country-code': '620',
    'iso_3166-2': 'ISO 3166-2:PT',
    region: 'Europe',
    'sub-region': 'Southern Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '039',
    'intermediate-region-code': '',
  },
  {
    name: 'Puerto Rico',
    'alpha-2': 'PR',
    'alpha-3': 'PRI',
    'country-code': '630',
    'iso_3166-2': 'ISO 3166-2:PR',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'Caribbean',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '029',
  },
  {
    name: 'Qatar',
    'alpha-2': 'QA',
    'alpha-3': 'QAT',
    'country-code': '634',
    'iso_3166-2': 'ISO 3166-2:QA',
    region: 'Asia',
    'sub-region': 'Western Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '145',
    'intermediate-region-code': '',
  },
  {
    name: 'Réunion',
    'alpha-2': 'RE',
    'alpha-3': 'REU',
    'country-code': '638',
    'iso_3166-2': 'ISO 3166-2:RE',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Eastern Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '014',
  },
  {
    name: 'Romania',
    'alpha-2': 'RO',
    'alpha-3': 'ROU',
    'country-code': '642',
    'iso_3166-2': 'ISO 3166-2:RO',
    region: 'Europe',
    'sub-region': 'Eastern Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '151',
    'intermediate-region-code': '',
  },
  {
    name: 'Russian Federation',
    'alpha-2': 'RU',
    'alpha-3': 'RUS',
    'country-code': '643',
    'iso_3166-2': 'ISO 3166-2:RU',
    region: 'Europe',
    'sub-region': 'Eastern Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '151',
    'intermediate-region-code': '',
  },
  {
    name: 'Rwanda',
    'alpha-2': 'RW',
    'alpha-3': 'RWA',
    'country-code': '646',
    'iso_3166-2': 'ISO 3166-2:RW',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Eastern Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '014',
  },
  {
    name: 'Saint Barthélemy',
    'alpha-2': 'BL',
    'alpha-3': 'BLM',
    'country-code': '652',
    'iso_3166-2': 'ISO 3166-2:BL',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'Caribbean',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '029',
  },
  {
    name: 'Saint Helena, Ascension and Tristan da Cunha',
    'alpha-2': 'SH',
    'alpha-3': 'SHN',
    'country-code': '654',
    'iso_3166-2': 'ISO 3166-2:SH',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Western Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '011',
  },
  {
    name: 'Saint Kitts and Nevis',
    'alpha-2': 'KN',
    'alpha-3': 'KNA',
    'country-code': '659',
    'iso_3166-2': 'ISO 3166-2:KN',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'Caribbean',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '029',
  },
  {
    name: 'Saint Lucia',
    'alpha-2': 'LC',
    'alpha-3': 'LCA',
    'country-code': '662',
    'iso_3166-2': 'ISO 3166-2:LC',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'Caribbean',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '029',
  },
  {
    name: 'Saint Martin (French part)',
    'alpha-2': 'MF',
    'alpha-3': 'MAF',
    'country-code': '663',
    'iso_3166-2': 'ISO 3166-2:MF',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'Caribbean',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '029',
  },
  {
    name: 'Saint Pierre and Miquelon',
    'alpha-2': 'PM',
    'alpha-3': 'SPM',
    'country-code': '666',
    'iso_3166-2': 'ISO 3166-2:PM',
    region: 'Americas',
    'sub-region': 'Northern America',
    'intermediate-region': '',
    'region-code': '019',
    'sub-region-code': '021',
    'intermediate-region-code': '',
  },
  {
    name: 'Saint Vincent and the Grenadines',
    'alpha-2': 'VC',
    'alpha-3': 'VCT',
    'country-code': '670',
    'iso_3166-2': 'ISO 3166-2:VC',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'Caribbean',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '029',
  },
  {
    name: 'Samoa',
    'alpha-2': 'WS',
    'alpha-3': 'WSM',
    'country-code': '882',
    'iso_3166-2': 'ISO 3166-2:WS',
    region: 'Oceania',
    'sub-region': 'Polynesia',
    'intermediate-region': '',
    'region-code': '009',
    'sub-region-code': '061',
    'intermediate-region-code': '',
  },
  {
    name: 'San Marino',
    'alpha-2': 'SM',
    'alpha-3': 'SMR',
    'country-code': '674',
    'iso_3166-2': 'ISO 3166-2:SM',
    region: 'Europe',
    'sub-region': 'Southern Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '039',
    'intermediate-region-code': '',
  },
  {
    name: 'Sao Tome and Principe',
    'alpha-2': 'ST',
    'alpha-3': 'STP',
    'country-code': '678',
    'iso_3166-2': 'ISO 3166-2:ST',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Middle Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '017',
  },
  {
    name: 'Saudi Arabia',
    'alpha-2': 'SA',
    'alpha-3': 'SAU',
    'country-code': '682',
    'iso_3166-2': 'ISO 3166-2:SA',
    region: 'Asia',
    'sub-region': 'Western Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '145',
    'intermediate-region-code': '',
  },
  {
    name: 'Senegal',
    'alpha-2': 'SN',
    'alpha-3': 'SEN',
    'country-code': '686',
    'iso_3166-2': 'ISO 3166-2:SN',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Western Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '011',
  },
  {
    name: 'Serbia',
    'alpha-2': 'RS',
    'alpha-3': 'SRB',
    'country-code': '688',
    'iso_3166-2': 'ISO 3166-2:RS',
    region: 'Europe',
    'sub-region': 'Southern Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '039',
    'intermediate-region-code': '',
  },
  {
    name: 'Seychelles',
    'alpha-2': 'SC',
    'alpha-3': 'SYC',
    'country-code': '690',
    'iso_3166-2': 'ISO 3166-2:SC',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Eastern Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '014',
  },
  {
    name: 'Sierra Leone',
    'alpha-2': 'SL',
    'alpha-3': 'SLE',
    'country-code': '694',
    'iso_3166-2': 'ISO 3166-2:SL',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Western Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '011',
  },
  {
    name: 'Singapore',
    'alpha-2': 'SG',
    'alpha-3': 'SGP',
    'country-code': '702',
    'iso_3166-2': 'ISO 3166-2:SG',
    region: 'Asia',
    'sub-region': 'South-eastern Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '035',
    'intermediate-region-code': '',
  },
  {
    name: 'Sint Maarten (Dutch part)',
    'alpha-2': 'SX',
    'alpha-3': 'SXM',
    'country-code': '534',
    'iso_3166-2': 'ISO 3166-2:SX',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'Caribbean',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '029',
  },
  {
    name: 'Slovakia',
    'alpha-2': 'SK',
    'alpha-3': 'SVK',
    'country-code': '703',
    'iso_3166-2': 'ISO 3166-2:SK',
    region: 'Europe',
    'sub-region': 'Eastern Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '151',
    'intermediate-region-code': '',
  },
  {
    name: 'Slovenia',
    'alpha-2': 'SI',
    'alpha-3': 'SVN',
    'country-code': '705',
    'iso_3166-2': 'ISO 3166-2:SI',
    region: 'Europe',
    'sub-region': 'Southern Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '039',
    'intermediate-region-code': '',
  },
  {
    name: 'Solomon Islands',
    'alpha-2': 'SB',
    'alpha-3': 'SLB',
    'country-code': '090',
    'iso_3166-2': 'ISO 3166-2:SB',
    region: 'Oceania',
    'sub-region': 'Melanesia',
    'intermediate-region': '',
    'region-code': '009',
    'sub-region-code': '054',
    'intermediate-region-code': '',
  },
  {
    name: 'Somalia',
    'alpha-2': 'SO',
    'alpha-3': 'SOM',
    'country-code': '706',
    'iso_3166-2': 'ISO 3166-2:SO',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Eastern Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '014',
  },
  {
    name: 'South Africa',
    'alpha-2': 'ZA',
    'alpha-3': 'ZAF',
    'country-code': '710',
    'iso_3166-2': 'ISO 3166-2:ZA',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Southern Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '018',
  },
  {
    name: 'South Georgia and the South Sandwich Islands',
    'alpha-2': 'GS',
    'alpha-3': 'SGS',
    'country-code': '239',
    'iso_3166-2': 'ISO 3166-2:GS',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'South America',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '005',
  },
  {
    name: 'South Sudan',
    'alpha-2': 'SS',
    'alpha-3': 'SSD',
    'country-code': '728',
    'iso_3166-2': 'ISO 3166-2:SS',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Eastern Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '014',
  },
  {
    name: 'Spain',
    'alpha-2': 'ES',
    'alpha-3': 'ESP',
    'country-code': '724',
    'iso_3166-2': 'ISO 3166-2:ES',
    region: 'Europe',
    'sub-region': 'Southern Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '039',
    'intermediate-region-code': '',
  },
  {
    name: 'Sri Lanka',
    'alpha-2': 'LK',
    'alpha-3': 'LKA',
    'country-code': '144',
    'iso_3166-2': 'ISO 3166-2:LK',
    region: 'Asia',
    'sub-region': 'Southern Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '034',
    'intermediate-region-code': '',
  },
  {
    name: 'Sudan',
    'alpha-2': 'SD',
    'alpha-3': 'SDN',
    'country-code': '729',
    'iso_3166-2': 'ISO 3166-2:SD',
    region: 'Africa',
    'sub-region': 'Northern Africa',
    'intermediate-region': '',
    'region-code': '002',
    'sub-region-code': '015',
    'intermediate-region-code': '',
  },
  {
    name: 'Suriname',
    'alpha-2': 'SR',
    'alpha-3': 'SUR',
    'country-code': '740',
    'iso_3166-2': 'ISO 3166-2:SR',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'South America',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '005',
  },
  {
    name: 'Svalbard and Jan Mayen',
    'alpha-2': 'SJ',
    'alpha-3': 'SJM',
    'country-code': '744',
    'iso_3166-2': 'ISO 3166-2:SJ',
    region: 'Europe',
    'sub-region': 'Northern Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '154',
    'intermediate-region-code': '',
  },
  {
    name: 'Sweden',
    'alpha-2': 'SE',
    'alpha-3': 'SWE',
    'country-code': '752',
    'iso_3166-2': 'ISO 3166-2:SE',
    region: 'Europe',
    'sub-region': 'Northern Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '154',
    'intermediate-region-code': '',
  },
  {
    name: 'Switzerland',
    'alpha-2': 'CH',
    'alpha-3': 'CHE',
    'country-code': '756',
    'iso_3166-2': 'ISO 3166-2:CH',
    region: 'Europe',
    'sub-region': 'Western Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '155',
    'intermediate-region-code': '',
  },
  {
    name: 'Syrian Arab Republic',
    'alpha-2': 'SY',
    'alpha-3': 'SYR',
    'country-code': '760',
    'iso_3166-2': 'ISO 3166-2:SY',
    region: 'Asia',
    'sub-region': 'Western Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '145',
    'intermediate-region-code': '',
  },
  {
    name: 'Taiwan, Province of China',
    'alpha-2': 'TW',
    'alpha-3': 'TWN',
    'country-code': '158',
    'iso_3166-2': 'ISO 3166-2:TW',
    region: 'Asia',
    'sub-region': 'Eastern Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '030',
    'intermediate-region-code': '',
  },
  {
    name: 'Tajikistan',
    'alpha-2': 'TJ',
    'alpha-3': 'TJK',
    'country-code': '762',
    'iso_3166-2': 'ISO 3166-2:TJ',
    region: 'Asia',
    'sub-region': 'Central Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '143',
    'intermediate-region-code': '',
  },
  {
    name: 'Tanzania, United Republic of',
    'alpha-2': 'TZ',
    'alpha-3': 'TZA',
    'country-code': '834',
    'iso_3166-2': 'ISO 3166-2:TZ',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Eastern Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '014',
  },
  {
    name: 'Thailand',
    'alpha-2': 'TH',
    'alpha-3': 'THA',
    'country-code': '764',
    'iso_3166-2': 'ISO 3166-2:TH',
    region: 'Asia',
    'sub-region': 'South-eastern Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '035',
    'intermediate-region-code': '',
  },
  {
    name: 'Timor-Leste',
    'alpha-2': 'TL',
    'alpha-3': 'TLS',
    'country-code': '626',
    'iso_3166-2': 'ISO 3166-2:TL',
    region: 'Asia',
    'sub-region': 'South-eastern Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '035',
    'intermediate-region-code': '',
  },
  {
    name: 'Togo',
    'alpha-2': 'TG',
    'alpha-3': 'TGO',
    'country-code': '768',
    'iso_3166-2': 'ISO 3166-2:TG',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Western Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '011',
  },
  {
    name: 'Tokelau',
    'alpha-2': 'TK',
    'alpha-3': 'TKL',
    'country-code': '772',
    'iso_3166-2': 'ISO 3166-2:TK',
    region: 'Oceania',
    'sub-region': 'Polynesia',
    'intermediate-region': '',
    'region-code': '009',
    'sub-region-code': '061',
    'intermediate-region-code': '',
  },
  {
    name: 'Tonga',
    'alpha-2': 'TO',
    'alpha-3': 'TON',
    'country-code': '776',
    'iso_3166-2': 'ISO 3166-2:TO',
    region: 'Oceania',
    'sub-region': 'Polynesia',
    'intermediate-region': '',
    'region-code': '009',
    'sub-region-code': '061',
    'intermediate-region-code': '',
  },
  {
    name: 'Trinidad and Tobago',
    'alpha-2': 'TT',
    'alpha-3': 'TTO',
    'country-code': '780',
    'iso_3166-2': 'ISO 3166-2:TT',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'Caribbean',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '029',
  },
  {
    name: 'Tunisia',
    'alpha-2': 'TN',
    'alpha-3': 'TUN',
    'country-code': '788',
    'iso_3166-2': 'ISO 3166-2:TN',
    region: 'Africa',
    'sub-region': 'Northern Africa',
    'intermediate-region': '',
    'region-code': '002',
    'sub-region-code': '015',
    'intermediate-region-code': '',
  },
  {
    name: 'Turkey',
    'alpha-2': 'TR',
    'alpha-3': 'TUR',
    'country-code': '792',
    'iso_3166-2': 'ISO 3166-2:TR',
    region: 'Asia',
    'sub-region': 'Western Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '145',
    'intermediate-region-code': '',
  },
  {
    name: 'Turkmenistan',
    'alpha-2': 'TM',
    'alpha-3': 'TKM',
    'country-code': '795',
    'iso_3166-2': 'ISO 3166-2:TM',
    region: 'Asia',
    'sub-region': 'Central Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '143',
    'intermediate-region-code': '',
  },
  {
    name: 'Turks and Caicos Islands',
    'alpha-2': 'TC',
    'alpha-3': 'TCA',
    'country-code': '796',
    'iso_3166-2': 'ISO 3166-2:TC',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'Caribbean',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '029',
  },
  {
    name: 'Tuvalu',
    'alpha-2': 'TV',
    'alpha-3': 'TUV',
    'country-code': '798',
    'iso_3166-2': 'ISO 3166-2:TV',
    region: 'Oceania',
    'sub-region': 'Polynesia',
    'intermediate-region': '',
    'region-code': '009',
    'sub-region-code': '061',
    'intermediate-region-code': '',
  },
  {
    name: 'Uganda',
    'alpha-2': 'UG',
    'alpha-3': 'UGA',
    'country-code': '800',
    'iso_3166-2': 'ISO 3166-2:UG',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Eastern Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '014',
  },
  {
    name: 'Ukraine',
    'alpha-2': 'UA',
    'alpha-3': 'UKR',
    'country-code': '804',
    'iso_3166-2': 'ISO 3166-2:UA',
    region: 'Europe',
    'sub-region': 'Eastern Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '151',
    'intermediate-region-code': '',
  },
  {
    name: 'United Arab Emirates',
    'alpha-2': 'AE',
    'alpha-3': 'ARE',
    'country-code': '784',
    'iso_3166-2': 'ISO 3166-2:AE',
    region: 'Asia',
    'sub-region': 'Western Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '145',
    'intermediate-region-code': '',
  },
  {
    name: 'United Kingdom of Great Britain and Northern Ireland',
    'alpha-2': 'GB',
    'alpha-3': 'GBR',
    'country-code': '826',
    'iso_3166-2': 'ISO 3166-2:GB',
    region: 'Europe',
    'sub-region': 'Northern Europe',
    'intermediate-region': '',
    'region-code': '150',
    'sub-region-code': '154',
    'intermediate-region-code': '',
  },
  {
    name: 'United States of America',
    'alpha-2': 'US',
    'alpha-3': 'USA',
    'country-code': '840',
    'iso_3166-2': 'ISO 3166-2:US',
    region: 'Americas',
    'sub-region': 'Northern America',
    'intermediate-region': '',
    'region-code': '019',
    'sub-region-code': '021',
    'intermediate-region-code': '',
  },
  {
    name: 'United States Minor Outlying Islands',
    'alpha-2': 'UM',
    'alpha-3': 'UMI',
    'country-code': '581',
    'iso_3166-2': 'ISO 3166-2:UM',
    region: 'Oceania',
    'sub-region': 'Micronesia',
    'intermediate-region': '',
    'region-code': '009',
    'sub-region-code': '057',
    'intermediate-region-code': '',
  },
  {
    name: 'Uruguay',
    'alpha-2': 'UY',
    'alpha-3': 'URY',
    'country-code': '858',
    'iso_3166-2': 'ISO 3166-2:UY',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'South America',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '005',
  },
  {
    name: 'Uzbekistan',
    'alpha-2': 'UZ',
    'alpha-3': 'UZB',
    'country-code': '860',
    'iso_3166-2': 'ISO 3166-2:UZ',
    region: 'Asia',
    'sub-region': 'Central Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '143',
    'intermediate-region-code': '',
  },
  {
    name: 'Vanuatu',
    'alpha-2': 'VU',
    'alpha-3': 'VUT',
    'country-code': '548',
    'iso_3166-2': 'ISO 3166-2:VU',
    region: 'Oceania',
    'sub-region': 'Melanesia',
    'intermediate-region': '',
    'region-code': '009',
    'sub-region-code': '054',
    'intermediate-region-code': '',
  },
  {
    name: 'Venezuela (Bolivarian Republic of)',
    'alpha-2': 'VE',
    'alpha-3': 'VEN',
    'country-code': '862',
    'iso_3166-2': 'ISO 3166-2:VE',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'South America',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '005',
  },
  {
    name: 'Viet Nam',
    'alpha-2': 'VN',
    'alpha-3': 'VNM',
    'country-code': '704',
    'iso_3166-2': 'ISO 3166-2:VN',
    region: 'Asia',
    'sub-region': 'South-eastern Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '035',
    'intermediate-region-code': '',
  },
  {
    name: 'Virgin Islands (British)',
    'alpha-2': 'VG',
    'alpha-3': 'VGB',
    'country-code': '092',
    'iso_3166-2': 'ISO 3166-2:VG',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'Caribbean',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '029',
  },
  {
    name: 'Virgin Islands (U.S.)',
    'alpha-2': 'VI',
    'alpha-3': 'VIR',
    'country-code': '850',
    'iso_3166-2': 'ISO 3166-2:VI',
    region: 'Americas',
    'sub-region': 'Latin America and the Caribbean',
    'intermediate-region': 'Caribbean',
    'region-code': '019',
    'sub-region-code': '419',
    'intermediate-region-code': '029',
  },
  {
    name: 'Wallis and Futuna',
    'alpha-2': 'WF',
    'alpha-3': 'WLF',
    'country-code': '876',
    'iso_3166-2': 'ISO 3166-2:WF',
    region: 'Oceania',
    'sub-region': 'Polynesia',
    'intermediate-region': '',
    'region-code': '009',
    'sub-region-code': '061',
    'intermediate-region-code': '',
  },
  {
    name: 'Western Sahara',
    'alpha-2': 'EH',
    'alpha-3': 'ESH',
    'country-code': '732',
    'iso_3166-2': 'ISO 3166-2:EH',
    region: 'Africa',
    'sub-region': 'Northern Africa',
    'intermediate-region': '',
    'region-code': '002',
    'sub-region-code': '015',
    'intermediate-region-code': '',
  },
  {
    name: 'Yemen',
    'alpha-2': 'YE',
    'alpha-3': 'YEM',
    'country-code': '887',
    'iso_3166-2': 'ISO 3166-2:YE',
    region: 'Asia',
    'sub-region': 'Western Asia',
    'intermediate-region': '',
    'region-code': '142',
    'sub-region-code': '145',
    'intermediate-region-code': '',
  },
  {
    name: 'Zambia',
    'alpha-2': 'ZM',
    'alpha-3': 'ZMB',
    'country-code': '894',
    'iso_3166-2': 'ISO 3166-2:ZM',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Eastern Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '014',
  },
  {
    name: 'Zimbabwe',
    'alpha-2': 'ZW',
    'alpha-3': 'ZWE',
    'country-code': '716',
    'iso_3166-2': 'ISO 3166-2:ZW',
    region: 'Africa',
    'sub-region': 'Sub-Saharan Africa',
    'intermediate-region': 'Eastern Africa',
    'region-code': '002',
    'sub-region-code': '202',
    'intermediate-region-code': '014',
  },
]


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/core/data-access/src/prisma/seed-data/seed-users.ts__tmpl__
import { UserRole } from '@prisma/client'


export const seedUsers = [
  {
    id: '1',
    firstName: 'SuperAdmin',
    lastName: 'User',
    email: 'superadmin@example.com',
    displayName: 'Super Admin',
    role: UserRole.SUPER_ADMIN,
    password: 'password123',
  },
  {
    id: '2',
    firstName: 'Admin',
    lastName: 'User',
    email: 'admin@example.com',
    displayName: 'Admin User',
    role: UserRole.ADMIN,
    password: 'password123',
  },
  {
    id: '3',
    firstName: 'User',
    lastName: 'User',
    email: 'user@example.com',
    displayName: 'Regular User',
    role: UserRole.USER,
    password: 'password123',
  },
];


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/auth/util/src/lib/guards/gql-auth-admin.guard.ts__tmpl__
import { ExecutionContext, ForbiddenException, Injectable } from '@nestjs/common'
import { GqlExecutionContext } from '@nestjs/graphql'
import { AuthGuard } from '@nestjs/passport'

@Injectable()
export class GqlAuthAdminGuard extends AuthGuard('jwt') {
  private readonly _roles: string[] = ['Admin']

  getRequest(context: ExecutionContext) {
    const ctx = GqlExecutionContext.create(context)

    return ctx.getContext().req
  }

  constructor() {
    super()
  }

  async canActivate(context: ExecutionContext): Promise<boolean> {
    await super.canActivate(context)
    const ctx = GqlExecutionContext.create(context)
    const req = ctx.getContext().req

    if (!req || !req.user) {
      return false
    }
    const hasAccess = this.hasAccess(req.user)

    if (!hasAccess) {
      throw new ForbiddenException(`You need to have Admin access`)
    }
    return req && req.user && this.hasAccess(req.user)
  }

  private hasAccess(user): boolean {
    return user.role && this._roles.includes(user.role)
  }
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/auth/util/src/lib/guards/gql-auth.guard.ts__tmpl__
import { ExecutionContext, Injectable } from '@nestjs/common'
import { GqlExecutionContext } from '@nestjs/graphql'
import { AuthGuard } from '@nestjs/passport'

@Injectable()
export class GqlAuthGuard extends AuthGuard('jwt') {
  getRequest(context: ExecutionContext): Promise<Record<string, unknown>> {
    const ctx = GqlExecutionContext.create(context)
    return ctx.getContext().req
  }
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/user/data-access/src/lib/dto/admin-create-user.input.ts__tmpl__
import { Field, InputType } from '@nestjs/graphql'
import { Role } from '../models/role.enum'

@InputType()
export class AdminCreateUserInput {
  @Field(() => Role)
  role: Role

  @Field()
  email: string

  @Field({ nullable: true })
  displayName?: string

  @Field({ nullable: true })
  firstName?: string

  @Field({ nullable: true })
  lastName?: string
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/user/data-access/src/lib/dto/admin-update-user.input.ts__tmpl__
import { Field, InputType } from '@nestjs/graphql'
import { Role } from '../models/role.enum'

@InputType()
export class AdminUpdateUserInput {
  @Field(() => Role, { nullable: true })
  role: Role

  @Field({ nullable: true })
  displayName?: string

  @Field({ nullable: true })
  firstName?: string

  @Field({ nullable: true })
  lastName?: string

  @Field({ nullable: true })
  phone: string

  @Field({ nullable: true })
  avatarUrl?: string

  @Field({ nullable: true })
  location?: string

  @Field({ nullable: true })
  bio?: string
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/user/data-access/src/lib/models/email.model.ts__tmpl__
import { Field, ObjectType } from '@nestjs/graphql'

@ObjectType()
export class Email {
  @Field({ nullable: true })
  id: string

  @Field({ nullable: true })
  createdAt: Date

  @Field({ nullable: true })
  updatedAt: Date

  @Field({ nullable: true })
  email: string

  @Field({ nullable: true })
  public: boolean

  @Field({ nullable: true })
  primary: boolean

  @Field({ nullable: true })
  verified: boolean
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/user/data-access/src/lib/models/role.enum.ts__tmpl__
import { registerEnumType } from '@nestjs/graphql'
import { Role } from '@prisma/client'

export { Role }

registerEnumType(Role, { name: 'Role' })


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/user/data-access/src/lib/models/user.model.ts__tmpl__
import { Field, ObjectType } from '@nestjs/graphql'
import { Email } from './email.model'
import { Role } from './role.enum'

@ObjectType()
export class User {
  @Field({ nullable: true })
  id: string

  @Field({ nullable: true })
  createdAt: Date

  @Field({ nullable: true })
  updatedAt: Date

  @Field({ nullable: true })
  phone: string

  @Field({ nullable: true })
  displayName?: string

  @Field({ nullable: true })
  firstName?: string

  @Field({ nullable: true })
  lastName?: string

  @Field({ nullable: true })
  avatarUrl?: string

  @Field({ nullable: true })
  location?: string

  @Field({ nullable: true })
  bio?: string

  @Field(() => Role, { nullable: true })
  role: Role

  @Field(() => [Email], { nullable: true })
  emails?: Email[]

  password?: string
}


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/auth/util/src/lib/decorators/ctx-user.decorator.ts__tmpl__
import { createParamDecorator } from '@nestjs/common'
import { GqlExecutionContext } from '@nestjs/graphql'

export const CtxUser = createParamDecorator((data, ctx) => GqlExecutionContext.create(ctx).getContext().req.user)


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/core/feature/src/lib/config/configuration.ts__tmpl__
export const configuration = () => ({
  prefix: 'api',
  environment: process.env.NODE_ENV,
  host: process.env.HOST,
  port: parseInt(process.env.PORT, 10),
  apiUrl: process.env.API_URL,
  api: {
    cookie: {
      name: process.env.API_COOKIE_NAME,
      options: {
        domain: process.env.API_COOKIE_DOMAIN,
        httpOnly: true,
      },
    },
    cors: {
      origin: [process.env.WEB_URL],
    },
  },
  siteUrl: process.env.SITE_URL || process.env.API_URL.replace('/api', ''),
  app: {
    email: process.env.APP_EMAIL,
    supportEmail: process.env.APP_SUPPORT_EMAIL,
    adminEmails: process.env.APP_ADMIN_EMAILS,
    name: process.env.APP_NAME,
  },
  smtp: {
    host: process.env.SMTP_HOST,
    port: process.env.SMTP_PORT,
    user: process.env.SMTP_USER,
    pass: process.env.SMTP_PASS,
  },
})


// /Users/justinhandley/IdeaProjects/nestled/generators/src/api-files/core/feature/src/lib/config/validation.ts__tmpl__
import * as Joi from 'joi'

export const validationSchema = Joi.object({
  NODE_ENV: Joi.string().valid('development', 'production', 'test'),
  HOST: Joi.string().alphanum().default('localhost'),
  PORT: Joi.number().default(3000),
  WEB_PORT: Joi.number().default(4200),
  WEB_URL: Joi.string().default(`http://${process.env.HOST || 'localhost'}:${process.env.WEB_PORT}`),
  API_COOKIE_DOMAIN: Joi.string().default('localhost'),
  API_COOKIE_NAME: Joi.string().default('__session'),
  API_URL: Joi.string().default(`http://${process.env.HOST || 'localhost'}:${process.env.PORT}/api`),
  APP_NAME: Joi.string().required(),
  APP_EMAIL: Joi.string().email().required(),
  APP_SUPPORT_EMAIL: Joi.string().email().required(),
  APP_ADMIN_EMAILS: Joi.string().required(),
  SITE_URL: Joi.string().uri().required(),
  SMTP_HOST: Joi.string().required(),
  SMTP_PORT: Joi.string().required(),
  SMTP_USER: Joi.string().required(),
  SMTP_PASS: Joi.string().required(),
})


