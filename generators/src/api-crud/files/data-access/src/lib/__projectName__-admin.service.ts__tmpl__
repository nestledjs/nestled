import { Injectable, UseGuards } from '@nestjs/common'
import { PrismaSelect } from '@paljs/plugins'
import { Prisma } from '@prisma/client'
import { GraphQLResolveInfo } from 'graphql'
import { <%= apiClassName %>CoreDataAccessService, AdminCreate<%= modelClassName %>Input, AdminList<%= modelClassName %>Input, AdminUpdate<%= modelClassName %>Input,  CorePaging } from '<%= npmScope %>/<%= directory %>/core/data-access'
import {GqlAuthAdminGuard} from '<%= npmScope %>/api/auth/util'

@Injectable()
@UseGuards(GqlAuthAdminGuard)
export class <%= apiClassName %><%= modelClassName %>DataAccessAdminService {
  constructor(private readonly data: <%= apiClassName %>CoreDataAccessService) {}

  private readonly searchFields = [<%- searchFields %>]
    private where(input?: AdminList<%= modelClassName %>Input): Prisma.<%= modelClassName %>WhereInput {
      let conditions: Prisma.<%= modelClassName %>WhereInput[] = []

      if (input?.search) {
        conditions = this.data.search(conditions, input.search, this.searchFields)
      }

      return {
        AND: conditions,
      }
    }

  admin<%= pluralClassName %>(info: GraphQLResolveInfo, input?: AdminList<%= modelClassName %>Input) {
    const select = new PrismaSelect(info).value
    return this.data.<%= modelPropertyName %>.findMany({
      take: input?.take,
      skip: input?.skip,
      where: this.where(input),
      ...select,
    })
  }

  async adminCount<%= pluralClassName %>(input?: AdminList<%= modelClassName %>Input): Promise<CorePaging> {
    const total = await this.data.<%= modelPropertyName %>.count()
    const count = await this.data.<%= modelPropertyName %>.count({ where: this.where(input) })
    const take = input?.take ?? 10
    const skip = input?.skip ?? 0
    const page = Math.floor(skip / take)
    return {
      take,
      skip,
      page,
      count,
      total,
    }
  }

  admin<%= modelClassName %>(info: GraphQLResolveInfo, <%= modelPropertyName %>Id: string) {
    const select = new PrismaSelect(info).value
    return this.data.<%= modelPropertyName %>.findUnique({ where: { id: <%= modelPropertyName %>Id }, ...select, })
  }

  adminCreate<%= modelClassName %>(info: GraphQLResolveInfo, input: AdminCreate<%= modelClassName %>Input) {
    const select = new PrismaSelect(info).value
    return this.data.<%= modelPropertyName %>.create({
      data: { ...input },
      ...select,
    })
  }

  adminUpdate<%= modelClassName %>(info: GraphQLResolveInfo, <%= modelPropertyName %>Id: string, input: AdminUpdate<%= modelClassName %>Input) {
    const select = new PrismaSelect(info).value
    return this.data.<%= modelPropertyName %>.update({
      where: { id: <%= modelPropertyName %>Id },
      data: { ...input },
      ...select,
    })
  }

  adminDelete<%= modelClassName %>(<%= modelPropertyName %>Id: string) {
    return this.data.<%= modelPropertyName %>.delete({ where: { id: <%= modelPropertyName %>Id } })
  }
}
