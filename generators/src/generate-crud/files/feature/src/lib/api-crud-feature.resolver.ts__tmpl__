import { Args, Mutation, Query, Resolver, Info } from '@nestjs/graphql'
import { UseGuards } from '@nestjs/common'
import { GraphQLResolveInfo } from 'graphql'
import { <%= models.map(model => `${apiClassName}${model.modelName}DataAccessAdminService`).join(', ') %> } from '<%= npmScope %>/api/generated-crud/data-access'
import {
  <%= models.map(model => model.modelName).join(', ') %>,
  <%= models.map(model => `AdminCreate${model.modelName}Input`).join(', ') %>,
  <%= models.map(model => `List${model.modelName}Input`).join(', ') %>,
  <%= models.map(model => `AdminUpdate${model.modelName}Input`).join(', ') %>,
  User,
  CorePaging
} from '<%= npmScope %>/api/core/data-access'
import {
  CtxUser,
  GqlAuthAdminGuard,
} from '<%= npmScope %>/api/core/auth'

@Resolver()
@UseGuards(GqlAuthAdminGuard)
export class ApiCrudFeatureResolver {
  constructor(
    <%= models.map(model => `private readonly ${model.modelPropertyName}Service: ${apiClassName}${model.modelName}DataAccessAdminService`).join(',\n    ') %>
  ) {}

<% for (const model of models) { %>
  @Query(() => [<%= model.modelName %>], { nullable: true })
  <%= model.modelName %>s(
    @Info() info: GraphQLResolveInfo,
    @Args({ name: 'input', type: () => List<%= model.modelName %>Input, nullable: true }) input?: List<%= model.modelName %>Input,
  ) {
    return this.service.<%= model.modelName %>s(info, input)
  }

  @Query(() => CorePaging, { nullable: true })
  <%= model.modelName %>Count(
    @Args({ name: 'input', type: () => List<%= model.modelName %>Input, nullable: true }) input?: List<%= model.modelName %>Input,
  ) {
    return this.service.<%= model.modelName %>Count(input)
  }

  @Query(() => <%= model.modelName %>, { nullable: true })
  <%= model.modelName %>(
    @CtxUser() admin: User,
    @Info() info: GraphQLResolveInfo,
    @Args('<%= model.modelPropertyName %>Id') <%= model.modelPropertyName %>Id: string
  ) {
    return this.service.<%= model.modelName %>(info, <%= model.modelPropertyName %>Id)
  }

  @Mutation(() => <%= model.modelName %>, { nullable: true })
  create<%= model.modelName %>(
    @CtxUser() admin: User,
    @Info() info: GraphQLResolveInfo,
    @Args('input') input: AdminCreate<%= model.modelName %>Input,
  ) {
    return this.service.create<%= model.modelName %>(info, input)
  }

  @Mutation(() => <%= model.modelName %>, { nullable: true })
  update<%= model.modelName %>(
    @CtxUser() admin: User,
    @Info() info: GraphQLResolveInfo,
    @Args('<%= model.modelPropertyName %>Id') <%= model.modelPropertyName %>Id: string,
    @Args('input') input: AdminUpdate<%= model.modelName %>Input,
  ) {
    return this.service.update<%= model.modelName %>(info, <%= model.modelPropertyName %>Id, input)
  }

  @Mutation(() => Boolean, { nullable: true })
  delete<%= model.modelName %>(
    @CtxUser() admin: User,
    @Args('<%= model.modelPropertyName %>Id') <%= model.modelPropertyName %>Id: string,
  ) {
    return this.service.delete<%= model.modelName %>(<%= model.modelPropertyName %>Id)
  }
<% } %>
}
