import { Injectable, OnModuleDestroy, OnModuleInit } from '@nestjs/common'
import { Prisma, PrismaClient } from '@prisma/client'
import { withOptimize } from '@prisma/extension-optimize'

@Injectable()
export class ApiCoreDataAccessService extends PrismaClient implements OnModuleInit, OnModuleDestroy {
  constructor() {
    const config: Prisma.PrismaClientOptions = {
      datasources: {
        db: { url: `${process.env.DATABASE_URL}?connection_limit=30` },
      },
      log:
        process.env.LOG_PRISMA_QUERIES === 'true' || process.env.COUNT_PRISMA_QUERIES === 'true'
          ? [{ emit: 'event', level: 'query' }]
          : [{ emit: 'event', level: 'warn' }],
    }
    super(config)
    this.queryCount = 0

    // Only add Prisma Optimize extension in development
    if (process.env.OPTIMIZE_API_KEY && process.env.USE_OPTIMIZE === 'true') {
      const apiKey = process.env.OPTIMIZE_API_KEY
      if (!apiKey) {
        console.warn('Not Running Prisma Optimize - No API Key Set')
      }

      const extendedClient = new PrismaClient(config).$extends(withOptimize({ apiKey }))
      Object.assign(this, extendedClient)
    }
  }

  public queryCount: number

  public async onModuleDestroy(): Promise<void> {
    await this.$disconnect()
  }

  public async onModuleInit(): Promise<void> {
    await this.$connect()

    if (process.env['LOG_PRISMA_QUERIES'] == 'true') {
      this.$on('query', async (e) => {
        console.log(`QUERY: ${e.query} \n\nPARAMS: ${e.params}\n\n\n`)
      })
    }

    if (process.env['COUNT_PRISMA_QUERIES'] == 'true') {
      this.$on('query', async (e) => {
        this.queryCount++
      })
    }
  }

  search(conditions: any[], searchQuery: string, searchFields: string[]): any[] {
    const query = searchQuery.trim()
    const terms: string[] = query?.includes(' ') ? query.split(' ') : [query].filter(Boolean)
    const searchFilters = terms.map((term) => ({
      OR: searchFields.map((field) => ({ [field]: { contains: term, mode: Prisma.QueryMode.insensitive } })),
    }))

    conditions.push(...searchFilters)
    return conditions
  }
}
