import { ApolloClient } from '@apollo/client-integration-react-router'
import { ApolloLink, createHttpLink, from, split } from '@apollo/client'
import { setContext } from '@apollo/client/link/context'
import { onError } from '@apollo/client/link/error'
import { GraphQLWsLink } from '@apollo/client/link/subscriptions'
import { getMainDefinition } from '@apollo/client/utilities'
import { createClient } from 'graphql-ws'
import { cache } from './cache-config'

type ClientOptions = {
  token?: string
  webToken?: string
  apiUrl?: string
  platform?: 'web' | 'native'
  environment?: 'development' | 'staging' | 'production'
}

export function makeClient(request?: Request, options?: ClientOptions) {
  const uri = options?.apiUrl ?? 'http://localhost:3000/graphql'
  const wsUri = uri.replace(/^http/, 'ws')

  let token = options?.token ?? null
  if (!token && request) {
    const authHeader = request.headers.get('authorization')
    token = authHeader?.replace(/^Bearer\s+/, '') ?? null
  }

  const httpLink = createHttpLink({ uri, credentials: 'include' })

  const authLink = setContext((_, { headers }) => ({
    headers: token ? { ...headers, authorization: `Bearer ${token}` } : headers,
  }))

  const wsLink = new GraphQLWsLink(
    createClient({
      url: wsUri,
      connectionParams: () => (token ? { Authorization: `Bearer ${token}` } : {}),
      lazy: true,
    }),
  )

  const logLink = new ApolloLink((operation, forward) => {
    console.log(`[Apollo] ${operation.operationName}`, operation.variables)
    return forward(operation).map(result => {
      console.log(`[Apollo][Result] ${operation.operationName}`, result)
      return result
    })
  })

  const errorLink = onError(({ graphQLErrors, networkError }) => {
    if (graphQLErrors) {
      for (const { message, path } of graphQLErrors) {
        console.error(`[GraphQL error]: Message: ${message}, Path: ${path}`)
      }
    }
    if (networkError) {
      console.error(`[Network error]: ${networkError}`)
    }
  })

  const isDev = options?.environment === 'development'

  const link = from([
    errorLink,
    ...(isDev ? [logLink] : []),
    authLink,
    split(
      ({ query }) => {
        const def = getMainDefinition(query)
        return def.kind === 'OperationDefinition' && def.operation === 'subscription'
      },
      wsLink,
      httpLink,
    ),
  ])

  return new ApolloClient({
    link,
    cache,
    defaultOptions: { watchQuery: { fetchPolicy: 'cache-and-network' } },
  })
}
