
import { Logger } from '@nestjs/common'
import { NestFactory } from '@nestjs/core'
import { ConfigService } from '@<%= npmScope %>/api/config'
import cookieParser from 'cookie-parser'
import * as express from 'express'
import { NextFunction, Request, Response } from 'express'
import helmet from 'helmet'

import { AppModule } from './app.module'

/**
 * Middleware to redirect HTTP requests to HTTPS in production environments.
 */
function httpsRedirectMiddleware(
  req: Request,
  res: Response,
  next: NextFunction,
) {
  const isHttp = req.headers['x-forwarded-proto'] === 'http'
  if (isHttp && process.env.NODE_ENV === 'production') {
    const host = req.headers.host || req.hostname
    Logger.debug(`[HttpsRedirect] Redirecting http://${host}${req.originalUrl} to https`)
    return res.redirect(301, `https://${host}${req.originalUrl}`)
  }
  return next()
}

async function bootstrap() {
  const app = await NestFactory.create(AppModule, {
    bodyParser: false, // Disable default parser for custom conditional parsing
  })

  const configService = app.get(ConfigService)
  const globalPrefix = configService.prefix || 'api'

  /**
   * Defines a list of known, valid API prefixes. This acts as an allow-list for the
   * earlyRequestFilter, providing a "deny-by-default" security posture.
   *
   * !! IMPORTANT !!
   * To expose a new REST controller, you MUST add its root path to this list.
   * For example, for a `UsersController` at `/api/users`, add `/${globalPrefix}/users`.
   */
  const VALID_API_PREFIXES = [
    '/graphql', // Standard GraphQL endpoint
    `/${globalPrefix}/uptime`, // Generic health-check endpoint
  ]

  /**
   * Middleware to reject requests to non-existent or un-exposed API endpoints early.
   * This prevents requests from even reaching the NestJS router if they are not on the allow-list.
   */
  const earlyRequestFilter = (req: Request, res: Response, next: NextFunction) => {
    const path = req.path
    const isValidPath = VALID_API_PREFIXES.some(prefix => path.startsWith(prefix))

    if (!isValidPath) {
      Logger.debug(`[EarlyFilter] Rejecting request for un-exposed path: ${path}`)
      return res.status(404).json({
        statusCode: 404,
        message: `Cannot ${req.method} ${path}`,
        error: 'Not Found',
      })
    }

    return next()
  }

  // --- Middleware & Security Setup ---

  // 1. HTTPS Redirect: Enforce HTTPS in production.
  app.use(httpsRedirectMiddleware)

  // 2. Helmet: Apply security-related HTTP headers.
  app.use(
    helmet({
      contentSecurityPolicy: process.env.NODE_ENV === 'production' ? undefined : false,
      crossOriginEmbedderPolicy: false,
    }),
  )

  // 3. Global Prefix: Set for all API routes.
  app.setGlobalPrefix(globalPrefix)

  // 4. CORS: Enable Cross-Origin Resource Sharing.
  const origins = configService.apiCorsOrigins?.length
    ? configService.apiCorsOrigins
    : ['http://localhost:4200']

  app.enableCors({
    credentials: true,
    origin: (origin: string, callback: (err: Error | null, allow?: boolean) => void) => {
      if (!origin) return callback(null, true)
      if (origins.includes(origin)) return callback(null, true)
      return callback(new Error('Not allowed by CORS'))
    },
  })

  // 5. Early Request Filter: Apply the "deny-by-default" filter.
  app.use(earlyRequestFilter)

  // 6. Conditional Body Parser: Handle raw bodies for webhooks, JSON for others.
  app.use((req: Request, res: Response, next: NextFunction) => {
    if (req.originalUrl.startsWith(`/${globalPrefix}/webhooks/`)) {
      return express.raw({
        type: '*/*',
        verify: (req: Request, res, buf) => { (req as any).rawBody = buf },
      })(req, res, next)
    }
    return express.json()(req, res, next)
  })
  app.use(express.urlencoded({ extended: true }))

  // 7. Cookie Parser: Parse and optionally sign cookies.
  const cookieSecret = configService.cookie.secret
  if (!cookieSecret) {
    if (process.env['NODE_ENV'] === 'production') {
      Logger.error('Cookie secret is not configured in production. Set configService.cookie.secret.')
      process.exit(1)
    } else {
      Logger.warn('Using default cookie secret in development. Set configService.cookie.secret for better security.')
    }
  }
  app.use(cookieParser(cookieSecret || 'default-secret-in-dev'))

  // --- Application Start ---
  const port = process.env.PORT
    ? parseInt(process.env.PORT, 10)
    : configService.port || 3000

  await app.listen(port, () => {
    const host = 'localhost'
    Logger.log(`üöÄ Application is running on: http://${host}:${port}/${globalPrefix}`)
    Logger.log(`üöÄ GraphQL endpoint is at: http://${host}:${port}/graphql`)
    Logger.log(`üåø Environment: ${process.env.NODE_ENV || 'development'}`)
  })
}

bootstrap().catch((error) => {
  Logger.error('‚ùå Failed to start the application', error)
  process.exit(1)
})