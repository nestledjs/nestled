import graphqlFields from 'graphql-fields'
import { Prisma } from '@<%= npmScope %>/api/prisma'
import type { DMMF } from '@prisma/client/runtime/library'
import { GraphQLResolveInfo } from 'graphql/type'

const dmmf = Prisma.dmmf

function getNamedType(type: any): string {
  if (type.ofType) return getNamedType(type.ofType)
  return type.name
}

function getModelFromTypeName(typeName: string) {
  return dmmf.datamodel.models.find(m => m.name === typeName)
}

function buildSelectTree(fieldTree: any, model: any): any {
  const result: Record<string, any> = {}

  for (const key in fieldTree) {
    const field = model.fields.find((f: DMMF.Field) => f.name === key)
    if (!field) continue

    if (field.relationName && typeof fieldTree[key] === 'object') {
      const relatedModel = dmmf.datamodel.models.find(m => m.name === field.type)
      if (relatedModel) {
        result[key] = {
          select: buildSelectTree(fieldTree[key], relatedModel),
        }
      }
    } else {
      result[key] = true
    }
  }

  return result
}

/**
 * Automatically converts a GraphQL `info` object into a Prisma `select` object.
 */
export function createSelect(info: GraphQLResolveInfo) {
  const returnTypeName = getNamedType(info.returnType)
  const model = getModelFromTypeName(returnTypeName)

  if (!model) {
    throw new Error(`Model "${returnTypeName}" not found in Prisma schema.`)
  }

  const rawFields = graphqlFields(info)
  return buildSelectTree(rawFields, model)
}
