import { Injectable, Logger } from '@nestjs/common'
import { createTransport, Transporter } from 'nodemailer'
import { ApiCoreFeatureService } from '@<%= npmScope %>/api/core/feature'
import { SentMessageInfo } from 'nodemailer/lib/smtp-transport'

export interface SendMailParams {
  to: string
  subject: string
  html: string
  text: string
  from?: string
  appSupportEmail?: string
}

@Injectable()
export class SmtpMailerService {
  private readonly logger = new Logger('ApiMailerService')
  private readonly mailer: Transporter<SentMessageInfo>
  private readonly appEmail: string
  private readonly appName: string
  private readonly appSupportEmail: string
  private readonly siteUrl: string

  constructor(private readonly config: ApiCoreFeatureService) {
    this.mailer = createTransport({
      host: this.config.mailerConfig.host,
      port: parseInt(this.config.mailerConfig.port),
      auth: {
        user: this.config.mailerConfig.auth.user,
        pass: this.config.mailerConfig.auth.pass,
      },
    })
    this.appEmail = this.config.appEmail
    this.appName = this.config.appName
    this.appSupportEmail = this.config.appSupportEmail
    this.siteUrl = this.config.siteUrl
  }

  async send(params: SendMailParams) {
    const {
      to,
      subject,
      html,
      text,
      from,
      appSupportEmail,
    } = params

    const sender = from || `${this.appName} <${this.appEmail}>`
    const supportEmail = appSupportEmail || this.appSupportEmail

    const res = await this.mailer.sendMail({
      to,
      from: sender,
      subject,
      html,
      text,
      replyTo: supportEmail,
    })
    this.logger.verbose(`sendMail to ${to} result: ${res.response} ${res.messageId}`)
    return res
  }
}
