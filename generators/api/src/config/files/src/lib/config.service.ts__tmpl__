import { Injectable } from '@nestjs/common'
import { ConfigService as NestConfigService } from '@nestjs/config'
import { CookieOptions } from 'express'

@Injectable()
export class ConfigService {
  constructor(public readonly config: NestConfigService) {}

  get apiUrl(): string {
    return this.config.getOrThrow<string>('apiUrl')
  }

  get apiCorsOrigins(): string[] {
    return this.config.get<string[]>('api.cors.origin') ?? []
  }

  get cookie(): { name: string; secret: string; options: CookieOptions } {
    return this.config.getOrThrow<{ name: string; secret: string; options: CookieOptions }>(
      'api.cookie',
    )
  }

  get prefix(): string {
    return this.config.getOrThrow<string>('prefix')
  }

  get port(): number {
    return this.config.getOrThrow<number>('port')
  }

  get host(): string {
    return this.config.getOrThrow<string>('host')
  }

  get appEmail(): string {
    return this.config.getOrThrow<string>('app.email')
  }

  get appSupportEmail(): string {
    return this.config.getOrThrow<string>('app.supportEmail')
  }

  get appAdminEmails(): string {
    return this.config.getOrThrow<string>('app.adminEmails')
  }

  get appName(): string {
    return this.config.getOrThrow<string>('app.name')
  }

  get siteUrl(): string {
    return this.config.getOrThrow<string>('siteUrl')
  }

  get mailerConfig() {
    return {
      host: this.config.getOrThrow<string>('smtp.host'),
      port: this.config.getOrThrow<string>('smtp.port'),
      auth: {
        user: this.config.getOrThrow<string>('smtp.user'),
        pass: this.config.getOrThrow<string>('smtp.pass'),
      },
    }
  }

  get prismaOptimizeEnabled(): boolean {
    return this.config.get<boolean>('prisma.optimize.enabled') ?? false
  }

  get prismaOptimizeApiKey(): string | undefined {
    return this.config.get<string>('prisma.optimize.apiKey')
  }
}
