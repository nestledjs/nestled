import { Injectable } from '@nestjs/common'
import { ApiCoreDataAccessService } from '<%= npmScope %>/api/core/data-access'
import { PrismaSelect } from '@paljs/plugins'
import type { GraphQLResolveInfo } from 'graphql'
import * as dto from './dto'

@Injectable()
export class ApiCrudDataAccessService {
  constructor(private readonly data: ApiCoreDataAccessService) {}

<% for (const model of models) { %>
  async create<%= model.modelName.charAt(0).toUpperCase() + model.modelName.slice(1) %>(info: GraphQLResolveInfo, input: dto.Create<%= model.modelName %>Input) {
    const select = new PrismaSelect(info).value
    return this.data['<%= model.modelPropertyName %>'].create({
      data: input,
      ...select,
    });
  }

  async <%= (model.pluralModelName === model.modelName ? model.pluralModelName + 'List' : model.pluralModelName).charAt(0).toLowerCase() + (model.pluralModelName === model.modelName ? model.pluralModelName + 'List' : model.pluralModelName).slice(1) %>(info: GraphQLResolveInfo, input?: dto.List<%= model.modelName %>Input) {
    const select = new PrismaSelect(info).value
    return this.data['<%= model.modelPropertyName %>'].findMany({
      ...this.data.filter(input),
      ...select,
    });
  }

  async <%= (model.pluralModelName === model.modelName ? model.pluralModelName + 'List' : model.pluralModelName).charAt(0).toLowerCase() + (model.pluralModelName === model.modelName ? model.pluralModelName + 'List' : model.pluralModelName).slice(1) %>Count(input?: dto.List<%= model.modelName %>Input) {
    const count = await this.data['<%= model.modelPropertyName %>'].count({
      ...this.data.filter(input)
    });
    return { count, total: count };
  }

  async <%= model.modelName.charAt(0).toLowerCase() + model.modelName.slice(1) %>(info: GraphQLResolveInfo, id: string) {
    const select = new PrismaSelect(info).value
    return this.data['<%= model.modelPropertyName %>'].findUnique({
      where: { id },
      ...select,
    });
  }

  async update<%= model.modelName.charAt(0).toUpperCase() + model.modelName.slice(1) %>(info: GraphQLResolveInfo, id: string, input: dto.Update<%= model.modelName %>Input) {
    const select = new PrismaSelect(info).value
    return this.data['<%= model.modelPropertyName %>'].update({
      where: { id },
      data: input,
      ...select,
    });
  }

  async delete<%= model.modelName.charAt(0).toUpperCase() + model.modelName.slice(1) %>(id: string) {
    return this.data['<%= model.modelPropertyName %>'].delete({
      where: { id }
    });
  }
<% } %>
}
