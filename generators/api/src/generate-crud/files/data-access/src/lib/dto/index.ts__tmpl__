<%# EJS template for generating DTOs %>
<%
let gqlImports = new Set(['Field', 'InputType']);
let usesGraphQLJSON = false;
let usesInt = false;
let usesFloat = false;
let usesID = false;
let enumNames = new Set();
let usesPartialType = false;
const alwaysOptionalFields = ['id', 'createdAt', 'updatedAt'];

// First pass to determine necessary imports and enums
for (const model of models) {
  for (const field of model.fields) {
    if (field.kind === 'object') continue; // Skip relation fields entirely
    if (field.type === 'Int') usesInt = true;
    if (field.type === 'Float' || field.type === 'Decimal') usesFloat = true;
    if (field.type === 'Json') usesGraphQLJSON = true;
    if (field.type === 'ID') usesID = true;
    if (field.kind === 'enum') {
      enumNames.add(field.type);
    }
  }
}

if (usesInt) gqlImports.add('Int');
if (usesFloat) gqlImports.add('Float');
if (usesID) gqlImports.add('ID');
usesPartialType = models.length > 0; // If we generate any Update input, we need PartialType
%>
import { <%= Array.from(gqlImports).join(', ') %> } from '@nestjs/graphql'
<% if (enumNames.size > 0) { %>import { <%= Array.from(enumNames).join(', ') %> } from '@<%= npmScope %>/api/core/models'
<% } %><% if (usesGraphQLJSON) { %>import { GraphQLJSON } from 'graphql-type-json'<% } %>
import { CorePagingInput } from '@<%= npmScope %>/api/core/data-access'

<% for (const model of models) { %>
@InputType()
export class Create<%= model.modelName %>Input {
<% for (const field of model.fields) { %>
  <% if (field.kind === 'object') { continue; } %>
  <%
    let baseGqlType;
    let tsType;
    if (field.type === 'String') { baseGqlType = 'String'; tsType = 'string'; }
    else if (field.type === 'Int') { baseGqlType = 'Int'; tsType = 'number'; }
    else if (field.type === 'Float') { baseGqlType = 'Float'; tsType = 'number'; }
    else if (field.type === 'Decimal') { baseGqlType = 'Float'; tsType = 'number'; }
    else if (field.type === 'Boolean') { baseGqlType = 'Boolean'; tsType = 'boolean'; }
    else if (field.type === 'DateTime') { baseGqlType = 'Date'; tsType = 'Date'; }
    else if (field.type === 'Json') { baseGqlType = 'GraphQLJSON'; tsType = 'typeof GraphQLJSON'; }
    else if (field.type === 'ID') { baseGqlType = 'ID'; tsType = 'string'; }
    else if (field.kind === 'enum') {
      baseGqlType = field.type;
      tsType = field.type;
    } else {
      baseGqlType = 'String'; tsType = 'string';
    }
    let fieldDecoratorTypeArg = '';
    let finalTsType = tsType;
    let isOptional = false;
    if (field.isList) {
      fieldDecoratorTypeArg = `() => [${baseGqlType}]`;
      finalTsType = tsType + '[]';
    } else {
      if (baseGqlType !== 'String' && baseGqlType !== 'Boolean') {
        fieldDecoratorTypeArg = `() => ${baseGqlType}`;
      }
    }
    // Always optional for id, createdAt, updatedAt
    if (alwaysOptionalFields.includes(field.name)) {
      isOptional = true;
    } else {
      isOptional = !field.isRequired;
    }
  %>
  @Field(<% if (fieldDecoratorTypeArg) { %><%- fieldDecoratorTypeArg %>, <% } %>{ nullable: <%= isOptional ? 'true' : 'false' %> })
  <%= field.name %><%= isOptional ? '?' : '!' %>: <%= finalTsType %>
<% } %>
}

@InputType()
export class Update<%= model.modelName %>Input {
<% for (const field of model.fields) { %>
  <% if (field.kind === 'object') { continue; } %>
  <%
    let baseGqlType;
    let tsType;
    if (field.type === 'String') { baseGqlType = 'String'; tsType = 'string'; }
    else if (field.type === 'Int') { baseGqlType = 'Int'; tsType = 'number'; }
    else if (field.type === 'Float') { baseGqlType = 'Float'; tsType = 'number'; }
    else if (field.type === 'Decimal') { baseGqlType = 'Float'; tsType = 'number'; }
    else if (field.type === 'Boolean') { baseGqlType = 'Boolean'; tsType = 'boolean'; }
    else if (field.type === 'DateTime') { baseGqlType = 'Date'; tsType = 'Date'; }
    else if (field.type === 'Json') { baseGqlType = 'GraphQLJSON'; tsType = 'typeof GraphQLJSON'; }
    else if (field.type === 'ID') { baseGqlType = 'ID'; tsType = 'string'; }
    else if (field.kind === 'enum') {
      baseGqlType = field.type;
      tsType = field.type;
    } else {
      baseGqlType = 'String'; tsType = 'string';
    }
    let fieldDecoratorTypeArg = '';
    let finalTsType = tsType;
    if (field.isList) {
      fieldDecoratorTypeArg = `() => [${baseGqlType}]`;
      finalTsType = tsType + '[]';
    } else {
      if (baseGqlType !== 'String' && baseGqlType !== 'Boolean') {
        fieldDecoratorTypeArg = `() => ${baseGqlType}`;
      }
    }
  %>
  @Field(<% if (fieldDecoratorTypeArg) { %><%- fieldDecoratorTypeArg %>, <% } %>{ nullable: true })
  <%= field.name %>?: <%= finalTsType %>
<% } %>
}

@InputType()
export class List<%= model.modelName %>Input extends CorePagingInput {
<% for (const field of model.fields) { %>
  <% if (field.kind === 'object') { continue; } %>
  <%
    let baseGqlType;
    let tsType;
    if (field.type === 'String') { baseGqlType = 'String'; tsType = 'string'; }
    else if (field.type === 'Int') { baseGqlType = 'Int'; tsType = 'number'; }
    else if (field.type === 'Float') { baseGqlType = 'Float'; tsType = 'number'; }
    else if (field.type === 'Decimal') { baseGqlType = 'Float'; tsType = 'number'; }
    else if (field.type === 'Boolean') { baseGqlType = 'Boolean'; tsType = 'boolean'; }
    else if (field.type === 'DateTime') { baseGqlType = 'Date'; tsType = 'Date'; }
    else if (field.type === 'Json') { baseGqlType = 'GraphQLJSON'; tsType = 'typeof GraphQLJSON'; }
    else if (field.type === 'ID') { baseGqlType = 'ID'; tsType = 'string'; }
    else if (field.kind === 'enum') {
      baseGqlType = field.type;
      tsType = field.type;
    } else {
      baseGqlType = 'String'; tsType = 'string';
    }
    let fieldDecoratorTypeArg = '';
    let finalTsType = tsType;
    if (field.isList) {
      fieldDecoratorTypeArg = `() => [${baseGqlType}]`;
      finalTsType = tsType + '[]';
    } else {
      if (baseGqlType !== 'String' && baseGqlType !== 'Boolean') {
        fieldDecoratorTypeArg = `() => ${baseGqlType}`;
      }
    }
  %>
  @Field(<% if (fieldDecoratorTypeArg) { %><%- fieldDecoratorTypeArg %>, <% } %>{ nullable: true })
  <%= field.name %>?: <%= finalTsType %>
<% } %>
}

<% } %>
